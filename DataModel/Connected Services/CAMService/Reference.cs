//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CAMService
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CAMService.ICAMService")]
    public interface ICAMService
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetWorkingDaysBulk", ReplyAction="http://tempuri.org/ICAMService/GetWorkingDaysBulkResponse")]
        string GetWorkingDaysBulk(string xmlParamRequest);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetWorkingDaysBulk", ReplyAction="http://tempuri.org/ICAMService/GetWorkingDaysBulkResponse")]
        System.Threading.Tasks.Task<string> GetWorkingDaysBulkAsync(string xmlParamRequest);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/getStatusCodeInEntityStatus", ReplyAction="http://tempuri.org/ICAMService/getStatusCodeInEntityStatusResponse")]
        string getStatusCodeInEntityStatus(int EntityId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/getStatusCodeInEntityStatus", ReplyAction="http://tempuri.org/ICAMService/getStatusCodeInEntityStatusResponse")]
        System.Threading.Tasks.Task<string> getStatusCodeInEntityStatusAsync(int EntityId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/getParentStatusCodeInEntityStatus", ReplyAction="http://tempuri.org/ICAMService/getParentStatusCodeInEntityStatusResponse")]
        string getParentStatusCodeInEntityStatus(string StatusCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/getParentStatusCodeInEntityStatus", ReplyAction="http://tempuri.org/ICAMService/getParentStatusCodeInEntityStatusResponse")]
        System.Threading.Tasks.Task<string> getParentStatusCodeInEntityStatusAsync(string StatusCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/getDevisaStatusCodeInEntityDevisaStatus", ReplyAction="http://tempuri.org/ICAMService/getDevisaStatusCodeInEntityDevisaStatusResponse")]
        string getDevisaStatusCodeInEntityDevisaStatus(int EntityId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/getDevisaStatusCodeInEntityDevisaStatus", ReplyAction="http://tempuri.org/ICAMService/getDevisaStatusCodeInEntityDevisaStatusResponse")]
        System.Threading.Tasks.Task<string> getDevisaStatusCodeInEntityDevisaStatusAsync(int EntityId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetOfficeNetworkList", ReplyAction="http://tempuri.org/ICAMService/GetOfficeNetworkListResponse")]
        string GetOfficeNetworkList(string EntityCode, System.DateTime EffectiveStartDate, System.DateTime EffectiveEndDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetOfficeNetworkList", ReplyAction="http://tempuri.org/ICAMService/GetOfficeNetworkListResponse")]
        System.Threading.Tasks.Task<string> GetOfficeNetworkListAsync(string EntityCode, System.DateTime EffectiveStartDate, System.DateTime EffectiveEndDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetPositionDescription", ReplyAction="http://tempuri.org/ICAMService/GetPositionDescriptionResponse")]
        string GetPositionDescription(int PositionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetPositionDescription", ReplyAction="http://tempuri.org/ICAMService/GetPositionDescriptionResponse")]
        System.Threading.Tasks.Task<string> GetPositionDescriptionAsync(int PositionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetParentPosition", ReplyAction="http://tempuri.org/ICAMService/GetParentPositionResponse")]
        string GetParentPosition(int positionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetParentPosition", ReplyAction="http://tempuri.org/ICAMService/GetParentPositionResponse")]
        System.Threading.Tasks.Task<string> GetParentPositionAsync(int positionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetPositionLevelByUserId", ReplyAction="http://tempuri.org/ICAMService/GetPositionLevelByUserIdResponse")]
        int GetPositionLevelByUserId(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetPositionLevelByUserId", ReplyAction="http://tempuri.org/ICAMService/GetPositionLevelByUserIdResponse")]
        System.Threading.Tasks.Task<int> GetPositionLevelByUserIdAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetPositionLevelByPositionId", ReplyAction="http://tempuri.org/ICAMService/GetPositionLevelByPositionIdResponse")]
        int GetPositionLevelByPositionId(int PositionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetPositionLevelByPositionId", ReplyAction="http://tempuri.org/ICAMService/GetPositionLevelByPositionIdResponse")]
        System.Threading.Tasks.Task<int> GetPositionLevelByPositionIdAsync(int PositionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetListOfPositionByLevel", ReplyAction="http://tempuri.org/ICAMService/GetListOfPositionByLevelResponse")]
        string GetListOfPositionByLevel(int minPositionLevel, int maxPositionLevel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetListOfPositionByLevel", ReplyAction="http://tempuri.org/ICAMService/GetListOfPositionByLevelResponse")]
        System.Threading.Tasks.Task<string> GetListOfPositionByLevelAsync(int minPositionLevel, int maxPositionLevel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetMergerConsolidationList", ReplyAction="http://tempuri.org/ICAMService/GetMergerConsolidationListResponse")]
        string GetMergerConsolidationList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetMergerConsolidationList", ReplyAction="http://tempuri.org/ICAMService/GetMergerConsolidationListResponse")]
        System.Threading.Tasks.Task<string> GetMergerConsolidationListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetSourceMergerConsolidationList", ReplyAction="http://tempuri.org/ICAMService/GetSourceMergerConsolidationListResponse")]
        string GetSourceMergerConsolidationList(int EntityId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetSourceMergerConsolidationList", ReplyAction="http://tempuri.org/ICAMService/GetSourceMergerConsolidationListResponse")]
        System.Threading.Tasks.Task<string> GetSourceMergerConsolidationListAsync(int EntityId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetRegisteredEntity", ReplyAction="http://tempuri.org/ICAMService/GetRegisteredEntityResponse")]
        string GetRegisteredEntity(int UserId, int ApplicationId, string SectorCode, string Keyword, int Index, int RowsTaken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetRegisteredEntity", ReplyAction="http://tempuri.org/ICAMService/GetRegisteredEntityResponse")]
        System.Threading.Tasks.Task<string> GetRegisteredEntityAsync(int UserId, int ApplicationId, string SectorCode, string Keyword, int Index, int RowsTaken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetRegisteredEntityInactiveIncluded", ReplyAction="http://tempuri.org/ICAMService/GetRegisteredEntityInactiveIncludedResponse")]
        string GetRegisteredEntityInactiveIncluded(int UserId, int ApplicationId, string SectorCode, string Keyword, int Index, int pRowsTaken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetRegisteredEntityInactiveIncluded", ReplyAction="http://tempuri.org/ICAMService/GetRegisteredEntityInactiveIncludedResponse")]
        System.Threading.Tasks.Task<string> GetRegisteredEntityInactiveIncludedAsync(int UserId, int ApplicationId, string SectorCode, string Keyword, int Index, int pRowsTaken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetEntityList", ReplyAction="http://tempuri.org/ICAMService/GetEntityListResponse")]
        string GetEntityList(int ApplicationId, string SectorCode, string Keyword, int Page, int pRowsTaken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetEntityList", ReplyAction="http://tempuri.org/ICAMService/GetEntityListResponse")]
        System.Threading.Tasks.Task<string> GetEntityListAsync(int ApplicationId, string SectorCode, string Keyword, int Page, int pRowsTaken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetSingleApplicationEntity", ReplyAction="http://tempuri.org/ICAMService/GetSingleApplicationEntityResponse")]
        string GetSingleApplicationEntity(string EntityCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetSingleApplicationEntity", ReplyAction="http://tempuri.org/ICAMService/GetSingleApplicationEntityResponse")]
        System.Threading.Tasks.Task<string> GetSingleApplicationEntityAsync(string EntityCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetSingleApplicationEntityWithUus", ReplyAction="http://tempuri.org/ICAMService/GetSingleApplicationEntityWithUusResponse")]
        string GetSingleApplicationEntityWithUus(string EntityCode, bool isUUS);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetSingleApplicationEntityWithUus", ReplyAction="http://tempuri.org/ICAMService/GetSingleApplicationEntityWithUusResponse")]
        System.Threading.Tasks.Task<string> GetSingleApplicationEntityWithUusAsync(string EntityCode, bool isUUS);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetSingleApplicationEntityByNaturalCode", ReplyAction="http://tempuri.org/ICAMService/GetSingleApplicationEntityByNaturalCodeResponse")]
        string GetSingleApplicationEntityByNaturalCode(string pNaturalEntityCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetSingleApplicationEntityByNaturalCode", ReplyAction="http://tempuri.org/ICAMService/GetSingleApplicationEntityByNaturalCodeResponse")]
        System.Threading.Tasks.Task<string> GetSingleApplicationEntityByNaturalCodeAsync(string pNaturalEntityCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetSingleApplicationEntityByEntityId", ReplyAction="http://tempuri.org/ICAMService/GetSingleApplicationEntityByEntityIdResponse")]
        string GetSingleApplicationEntityByEntityId(int entityId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetSingleApplicationEntityByEntityId", ReplyAction="http://tempuri.org/ICAMService/GetSingleApplicationEntityByEntityIdResponse")]
        System.Threading.Tasks.Task<string> GetSingleApplicationEntityByEntityIdAsync(int entityId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetSingleApplicationEntityInactiveIncluded", ReplyAction="http://tempuri.org/ICAMService/GetSingleApplicationEntityInactiveIncludedResponse" +
            "")]
        string GetSingleApplicationEntityInactiveIncluded(int entityId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetSingleApplicationEntityInactiveIncluded", ReplyAction="http://tempuri.org/ICAMService/GetSingleApplicationEntityInactiveIncludedResponse" +
            "")]
        System.Threading.Tasks.Task<string> GetSingleApplicationEntityInactiveIncludedAsync(int entityId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetSingleApplicationEntityInactiveIncludedByEntity" +
            "Code", ReplyAction="http://tempuri.org/ICAMService/GetSingleApplicationEntityInactiveIncludedByEntity" +
            "CodeResponse")]
        string GetSingleApplicationEntityInactiveIncludedByEntityCode(string EntityCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetSingleApplicationEntityInactiveIncludedByEntity" +
            "Code", ReplyAction="http://tempuri.org/ICAMService/GetSingleApplicationEntityInactiveIncludedByEntity" +
            "CodeResponse")]
        System.Threading.Tasks.Task<string> GetSingleApplicationEntityInactiveIncludedByEntityCodeAsync(string EntityCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetEntityType", ReplyAction="http://tempuri.org/ICAMService/GetEntityTypeResponse")]
        string GetEntityType(string pEntityCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetEntityType", ReplyAction="http://tempuri.org/ICAMService/GetEntityTypeResponse")]
        System.Threading.Tasks.Task<string> GetEntityTypeAsync(string pEntityCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetSupervisoryUnit", ReplyAction="http://tempuri.org/ICAMService/GetSupervisoryUnitResponse")]
        string GetSupervisoryUnit(string EntityCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetSupervisoryUnit", ReplyAction="http://tempuri.org/ICAMService/GetSupervisoryUnitResponse")]
        System.Threading.Tasks.Task<string> GetSupervisoryUnitAsync(string EntityCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetSupervisoryOrganizationId", ReplyAction="http://tempuri.org/ICAMService/GetSupervisoryOrganizationIdResponse")]
        int GetSupervisoryOrganizationId(string entityCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetSupervisoryOrganizationId", ReplyAction="http://tempuri.org/ICAMService/GetSupervisoryOrganizationIdResponse")]
        System.Threading.Tasks.Task<int> GetSupervisoryOrganizationIdAsync(string entityCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetSupervisoryOrganization", ReplyAction="http://tempuri.org/ICAMService/GetSupervisoryOrganizationResponse")]
        string GetSupervisoryOrganization(string entityCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetSupervisoryOrganization", ReplyAction="http://tempuri.org/ICAMService/GetSupervisoryOrganizationResponse")]
        System.Threading.Tasks.Task<string> GetSupervisoryOrganizationAsync(string entityCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/UpdateCAMEntity", ReplyAction="http://tempuri.org/ICAMService/UpdateCAMEntityResponse")]
        bool UpdateCAMEntity(int EntityId, string EntityName, string NPWP, string Email, string Website, string UpdatedBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/UpdateCAMEntity", ReplyAction="http://tempuri.org/ICAMService/UpdateCAMEntityResponse")]
        System.Threading.Tasks.Task<bool> UpdateCAMEntityAsync(int EntityId, string EntityName, string NPWP, string Email, string Website, string UpdatedBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/UpdateCAMEntityDetails", ReplyAction="http://tempuri.org/ICAMService/UpdateCAMEntityDetailsResponse")]
        bool UpdateCAMEntityDetails(int EntityId, string Address, string RegionCode, string CityCode, string ZipCode, string Phone, string Fax, string UpdatedBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/UpdateCAMEntityDetails", ReplyAction="http://tempuri.org/ICAMService/UpdateCAMEntityDetailsResponse")]
        System.Threading.Tasks.Task<bool> UpdateCAMEntityDetailsAsync(int EntityId, string Address, string RegionCode, string CityCode, string ZipCode, string Phone, string Fax, string UpdatedBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/UpdateCAMOfficeNetwork", ReplyAction="http://tempuri.org/ICAMService/UpdateCAMOfficeNetworkResponse")]
        bool UpdateCAMOfficeNetwork(int OfficeNetworkId, string OfficeName, System.DateTime EffectiveStartDate, System.Nullable<System.DateTime> EffectiveEndDate, string UpdatedBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/UpdateCAMOfficeNetwork", ReplyAction="http://tempuri.org/ICAMService/UpdateCAMOfficeNetworkResponse")]
        System.Threading.Tasks.Task<bool> UpdateCAMOfficeNetworkAsync(int OfficeNetworkId, string OfficeName, System.DateTime EffectiveStartDate, System.Nullable<System.DateTime> EffectiveEndDate, string UpdatedBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/UpdateEntityEffectiveDate", ReplyAction="http://tempuri.org/ICAMService/UpdateEntityEffectiveDateResponse")]
        bool UpdateEntityEffectiveDate(int EntityId, System.Nullable<System.DateTime> EntityEffectiveEndDate, string UpdatedBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/UpdateEntityEffectiveDate", ReplyAction="http://tempuri.org/ICAMService/UpdateEntityEffectiveDateResponse")]
        System.Threading.Tasks.Task<bool> UpdateEntityEffectiveDateAsync(int EntityId, System.Nullable<System.DateTime> EntityEffectiveEndDate, string UpdatedBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetEntityName", ReplyAction="http://tempuri.org/ICAMService/GetEntityNameResponse")]
        string GetEntityName(int EntityId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetEntityName", ReplyAction="http://tempuri.org/ICAMService/GetEntityNameResponse")]
        System.Threading.Tasks.Task<string> GetEntityNameAsync(int EntityId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetEntityIdByNaturalEntityCode", ReplyAction="http://tempuri.org/ICAMService/GetEntityIdByNaturalEntityCodeResponse")]
        int GetEntityIdByNaturalEntityCode(string NaturalEntityCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetEntityIdByNaturalEntityCode", ReplyAction="http://tempuri.org/ICAMService/GetEntityIdByNaturalEntityCodeResponse")]
        System.Threading.Tasks.Task<int> GetEntityIdByNaturalEntityCodeAsync(string NaturalEntityCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetCountNotif", ReplyAction="http://tempuri.org/ICAMService/GetCountNotifResponse")]
        int GetCountNotif(int UserId, int ApplicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetCountNotif", ReplyAction="http://tempuri.org/ICAMService/GetCountNotifResponse")]
        System.Threading.Tasks.Task<int> GetCountNotifAsync(int UserId, int ApplicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetNotif", ReplyAction="http://tempuri.org/ICAMService/GetNotifResponse")]
        string GetNotif(int UserId, int ApplicationId, int RowsTaken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetNotif", ReplyAction="http://tempuri.org/ICAMService/GetNotifResponse")]
        System.Threading.Tasks.Task<string> GetNotifAsync(int UserId, int ApplicationId, int RowsTaken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetMenus", ReplyAction="http://tempuri.org/ICAMService/GetMenusResponse")]
        string GetMenus(int UserId, int RoleId, int ApplicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetMenus", ReplyAction="http://tempuri.org/ICAMService/GetMenusResponse")]
        System.Threading.Tasks.Task<string> GetMenusAsync(int UserId, int RoleId, int ApplicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetMenuHierarchyBottomUpByUrl", ReplyAction="http://tempuri.org/ICAMService/GetMenuHierarchyBottomUpByUrlResponse")]
        string GetMenuHierarchyBottomUpByUrl(int UserId, int ApplicationId, string Url);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetMenuHierarchyBottomUpByUrl", ReplyAction="http://tempuri.org/ICAMService/GetMenuHierarchyBottomUpByUrlResponse")]
        System.Threading.Tasks.Task<string> GetMenuHierarchyBottomUpByUrlAsync(int UserId, int ApplicationId, string Url);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetMenuByApplicationId", ReplyAction="http://tempuri.org/ICAMService/GetMenuByApplicationIdResponse")]
        string GetMenuByApplicationId(int ApplicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetMenuByApplicationId", ReplyAction="http://tempuri.org/ICAMService/GetMenuByApplicationIdResponse")]
        System.Threading.Tasks.Task<string> GetMenuByApplicationIdAsync(int ApplicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetChildrenFromMenu", ReplyAction="http://tempuri.org/ICAMService/GetChildrenFromMenuResponse")]
        string GetChildrenFromMenu(int MenuId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetChildrenFromMenu", ReplyAction="http://tempuri.org/ICAMService/GetChildrenFromMenuResponse")]
        System.Threading.Tasks.Task<string> GetChildrenFromMenuAsync(int MenuId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetSingleAksesMenu", ReplyAction="http://tempuri.org/ICAMService/GetSingleAksesMenuResponse")]
        string GetSingleAksesMenu(string Url, int ApplicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetSingleAksesMenu", ReplyAction="http://tempuri.org/ICAMService/GetSingleAksesMenuResponse")]
        System.Threading.Tasks.Task<string> GetSingleAksesMenuAsync(string Url, int ApplicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetSingleMenu", ReplyAction="http://tempuri.org/ICAMService/GetSingleMenuResponse")]
        string GetSingleMenu(string MenuCode, int ApplicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetSingleMenu", ReplyAction="http://tempuri.org/ICAMService/GetSingleMenuResponse")]
        System.Threading.Tasks.Task<string> GetSingleMenuAsync(string MenuCode, int ApplicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/SearchCurrentActiveRoleByUserName", ReplyAction="http://tempuri.org/ICAMService/SearchCurrentActiveRoleByUserNameResponse")]
        string SearchCurrentActiveRoleByUserName(string UserName, int ApplicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/SearchCurrentActiveRoleByUserName", ReplyAction="http://tempuri.org/ICAMService/SearchCurrentActiveRoleByUserNameResponse")]
        System.Threading.Tasks.Task<string> SearchCurrentActiveRoleByUserNameAsync(string UserName, int ApplicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetSingleAksesRole", ReplyAction="http://tempuri.org/ICAMService/GetSingleAksesRoleResponse")]
        string GetSingleAksesRole(int RoleId, int ApplicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetSingleAksesRole", ReplyAction="http://tempuri.org/ICAMService/GetSingleAksesRoleResponse")]
        System.Threading.Tasks.Task<string> GetSingleAksesRoleAsync(int RoleId, int ApplicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetAksesRoleChildren", ReplyAction="http://tempuri.org/ICAMService/GetAksesRoleChildrenResponse")]
        string GetAksesRoleChildren(int RoleId, int ApplicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetAksesRoleChildren", ReplyAction="http://tempuri.org/ICAMService/GetAksesRoleChildrenResponse")]
        System.Threading.Tasks.Task<string> GetAksesRoleChildrenAsync(int RoleId, int ApplicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetApplicationRole", ReplyAction="http://tempuri.org/ICAMService/GetApplicationRoleResponse")]
        string GetApplicationRole(int ApplicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetApplicationRole", ReplyAction="http://tempuri.org/ICAMService/GetApplicationRoleResponse")]
        System.Threading.Tasks.Task<string> GetApplicationRoleAsync(int ApplicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetRoleChildren", ReplyAction="http://tempuri.org/ICAMService/GetRoleChildrenResponse")]
        string GetRoleChildren(int pParentRoleId, int pApplicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetRoleChildren", ReplyAction="http://tempuri.org/ICAMService/GetRoleChildrenResponse")]
        System.Threading.Tasks.Task<string> GetRoleChildrenAsync(int pParentRoleId, int pApplicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetUserRoleOnApplication", ReplyAction="http://tempuri.org/ICAMService/GetUserRoleOnApplicationResponse")]
        string GetUserRoleOnApplication(int UserId, int ApplicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetUserRoleOnApplication", ReplyAction="http://tempuri.org/ICAMService/GetUserRoleOnApplicationResponse")]
        System.Threading.Tasks.Task<string> GetUserRoleOnApplicationAsync(int UserId, int ApplicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/AllEntitiesAccess", ReplyAction="http://tempuri.org/ICAMService/AllEntitiesAccessResponse")]
        bool AllEntitiesAccess(int RoleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/AllEntitiesAccess", ReplyAction="http://tempuri.org/ICAMService/AllEntitiesAccessResponse")]
        System.Threading.Tasks.Task<bool> AllEntitiesAccessAsync(int RoleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/DeleteUserExt", ReplyAction="http://tempuri.org/ICAMService/DeleteUserExtResponse")]
        bool DeleteUserExt(string xmlAksesUser, string uName, int appId, int pRoleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/DeleteUserExt", ReplyAction="http://tempuri.org/ICAMService/DeleteUserExtResponse")]
        System.Threading.Tasks.Task<bool> DeleteUserExtAsync(string xmlAksesUser, string uName, int appId, int pRoleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/SearchUserIdByName", ReplyAction="http://tempuri.org/ICAMService/SearchUserIdByNameResponse")]
        int SearchUserIdByName(string Username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/SearchUserIdByName", ReplyAction="http://tempuri.org/ICAMService/SearchUserIdByNameResponse")]
        System.Threading.Tasks.Task<int> SearchUserIdByNameAsync(string Username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetSingleAksesUser1", ReplyAction="http://tempuri.org/ICAMService/GetSingleAksesUser1Response")]
        string GetSingleAksesUser1(int UserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetSingleAksesUser1", ReplyAction="http://tempuri.org/ICAMService/GetSingleAksesUser1Response")]
        System.Threading.Tasks.Task<string> GetSingleAksesUser1Async(int UserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetSingleAksesUser2", ReplyAction="http://tempuri.org/ICAMService/GetSingleAksesUser2Response")]
        string GetSingleAksesUser2(string Username, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetSingleAksesUser2", ReplyAction="http://tempuri.org/ICAMService/GetSingleAksesUser2Response")]
        System.Threading.Tasks.Task<string> GetSingleAksesUser2Async(string Username, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetIntUserList", ReplyAction="http://tempuri.org/ICAMService/GetIntUserListResponse")]
        string GetIntUserList(string IdNumber, string NamaPengguna, int OrganizationId, int ActiveFlag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetIntUserList", ReplyAction="http://tempuri.org/ICAMService/GetIntUserListResponse")]
        System.Threading.Tasks.Task<string> GetIntUserListAsync(string IdNumber, string NamaPengguna, int OrganizationId, int ActiveFlag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetExtUserList", ReplyAction="http://tempuri.org/ICAMService/GetExtUserListResponse")]
        string GetExtUserList(string IdNumber, string NamaPengguna, string EntityName, int ActiveFlag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetExtUserList", ReplyAction="http://tempuri.org/ICAMService/GetExtUserListResponse")]
        System.Threading.Tasks.Task<string> GetExtUserListAsync(string IdNumber, string NamaPengguna, string EntityName, int ActiveFlag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/IsAuthenticated", ReplyAction="http://tempuri.org/ICAMService/IsAuthenticatedResponse")]
        bool IsAuthenticated(string Username, string Password, int ApplicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/IsAuthenticated", ReplyAction="http://tempuri.org/ICAMService/IsAuthenticatedResponse")]
        System.Threading.Tasks.Task<bool> IsAuthenticatedAsync(string Username, string Password, int ApplicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/Activation", ReplyAction="http://tempuri.org/ICAMService/ActivationResponse")]
        string Activation(string EncPassword, string Bogus, string Sugob);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/Activation", ReplyAction="http://tempuri.org/ICAMService/ActivationResponse")]
        System.Threading.Tasks.Task<string> ActivationAsync(string EncPassword, string Bogus, string Sugob);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/ActivationUserExt", ReplyAction="http://tempuri.org/ICAMService/ActivationUserExtResponse")]
        bool ActivationUserExt(string xmlAksesUser, int ApplicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/ActivationUserExt", ReplyAction="http://tempuri.org/ICAMService/ActivationUserExtResponse")]
        System.Threading.Tasks.Task<bool> ActivationUserExtAsync(string xmlAksesUser, int ApplicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/ChangePassword", ReplyAction="http://tempuri.org/ICAMService/ChangePasswordResponse")]
        string ChangePassword(string oldPassword, string newPassword, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/ChangePassword", ReplyAction="http://tempuri.org/ICAMService/ChangePasswordResponse")]
        System.Threading.Tasks.Task<string> ChangePasswordAsync(string oldPassword, string newPassword, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/RequestResetPassword", ReplyAction="http://tempuri.org/ICAMService/RequestResetPasswordResponse")]
        string RequestResetPassword(string resetMenuUrl, string emailAddr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/RequestResetPassword", ReplyAction="http://tempuri.org/ICAMService/RequestResetPasswordResponse")]
        System.Threading.Tasks.Task<string> RequestResetPasswordAsync(string resetMenuUrl, string emailAddr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/ResetPassword", ReplyAction="http://tempuri.org/ICAMService/ResetPasswordResponse")]
        string ResetPassword(string encNewPassword, string bogus, string sugob);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/ResetPassword", ReplyAction="http://tempuri.org/ICAMService/ResetPasswordResponse")]
        System.Threading.Tasks.Task<string> ResetPasswordAsync(string encNewPassword, string bogus, string sugob);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/AddUserExt", ReplyAction="http://tempuri.org/ICAMService/AddUserExtResponse")]
        string AddUserExt(string xmlAksesUser, string uName, int appId, int roleId, int entityId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/AddUserExt", ReplyAction="http://tempuri.org/ICAMService/AddUserExtResponse")]
        System.Threading.Tasks.Task<string> AddUserExtAsync(string xmlAksesUser, string uName, int appId, int roleId, int entityId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/AddUserApplication", ReplyAction="http://tempuri.org/ICAMService/AddUserApplicationResponse")]
        bool AddUserApplication(string pEmail, string uName, int appId, int roleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/AddUserApplication", ReplyAction="http://tempuri.org/ICAMService/AddUserApplicationResponse")]
        System.Threading.Tasks.Task<bool> AddUserApplicationAsync(string pEmail, string uName, int appId, int roleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetROUnderUserId", ReplyAction="http://tempuri.org/ICAMService/GetROUnderUserIdResponse")]
        string GetROUnderUserId(int pAppId, string pEntityCode, string pRORoleCode, int pUserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetROUnderUserId", ReplyAction="http://tempuri.org/ICAMService/GetROUnderUserIdResponse")]
        System.Threading.Tasks.Task<string> GetROUnderUserIdAsync(int pAppId, string pEntityCode, string pRORoleCode, int pUserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetROUnderUserIdByEntityId", ReplyAction="http://tempuri.org/ICAMService/GetROUnderUserIdByEntityIdResponse")]
        string GetROUnderUserIdByEntityId(int pAppId, int EntityId, string pRORoleCode, int pUserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetROUnderUserIdByEntityId", ReplyAction="http://tempuri.org/ICAMService/GetROUnderUserIdByEntityIdResponse")]
        System.Threading.Tasks.Task<string> GetROUnderUserIdByEntityIdAsync(int pAppId, int EntityId, string pRORoleCode, int pUserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/updateUser", ReplyAction="http://tempuri.org/ICAMService/updateUserResponse")]
        bool updateUser(string xmlAksesUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/updateUser", ReplyAction="http://tempuri.org/ICAMService/updateUserResponse")]
        System.Threading.Tasks.Task<bool> updateUserAsync(string xmlAksesUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetSingleAksesUserApplication", ReplyAction="http://tempuri.org/ICAMService/GetSingleAksesUserApplicationResponse")]
        string GetSingleAksesUserApplication(int UserId, int ApplicationId, int RoleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetSingleAksesUserApplication", ReplyAction="http://tempuri.org/ICAMService/GetSingleAksesUserApplicationResponse")]
        System.Threading.Tasks.Task<string> GetSingleAksesUserApplicationAsync(int UserId, int ApplicationId, int RoleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetUserIdInUserApplication", ReplyAction="http://tempuri.org/ICAMService/GetUserIdInUserApplicationResponse")]
        string GetUserIdInUserApplication(int ApplicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetUserIdInUserApplication", ReplyAction="http://tempuri.org/ICAMService/GetUserIdInUserApplicationResponse")]
        System.Threading.Tasks.Task<string> GetUserIdInUserApplicationAsync(int ApplicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetUserRoleIdOnApplication", ReplyAction="http://tempuri.org/ICAMService/GetUserRoleIdOnApplicationResponse")]
        string GetUserRoleIdOnApplication(int UserId, int ApplicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetUserRoleIdOnApplication", ReplyAction="http://tempuri.org/ICAMService/GetUserRoleIdOnApplicationResponse")]
        System.Threading.Tasks.Task<string> GetUserRoleIdOnApplicationAsync(int UserId, int ApplicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/IsApplicationAccessGranted", ReplyAction="http://tempuri.org/ICAMService/IsApplicationAccessGrantedResponse")]
        bool IsApplicationAccessGranted(int UserID, int ApplicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/IsApplicationAccessGranted", ReplyAction="http://tempuri.org/ICAMService/IsApplicationAccessGrantedResponse")]
        System.Threading.Tasks.Task<bool> IsApplicationAccessGrantedAsync(int UserID, int ApplicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetSingleApplication", ReplyAction="http://tempuri.org/ICAMService/GetSingleApplicationResponse")]
        string GetSingleApplication(int ApplicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetSingleApplication", ReplyAction="http://tempuri.org/ICAMService/GetSingleApplicationResponse")]
        System.Threading.Tasks.Task<string> GetSingleApplicationAsync(int ApplicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetApplicationList", ReplyAction="http://tempuri.org/ICAMService/GetApplicationListResponse")]
        string GetApplicationList(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetApplicationList", ReplyAction="http://tempuri.org/ICAMService/GetApplicationListResponse")]
        System.Threading.Tasks.Task<string> GetApplicationListAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetAuthorizedApplicationList", ReplyAction="http://tempuri.org/ICAMService/GetAuthorizedApplicationListResponse")]
        string GetAuthorizedApplicationList(int UserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetAuthorizedApplicationList", ReplyAction="http://tempuri.org/ICAMService/GetAuthorizedApplicationListResponse")]
        System.Threading.Tasks.Task<string> GetAuthorizedApplicationListAsync(int UserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetApplicationOrganizationList", ReplyAction="http://tempuri.org/ICAMService/GetApplicationOrganizationListResponse")]
        string GetApplicationOrganizationList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetApplicationOrganizationList", ReplyAction="http://tempuri.org/ICAMService/GetApplicationOrganizationListResponse")]
        System.Threading.Tasks.Task<string> GetApplicationOrganizationListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetOrganizationName", ReplyAction="http://tempuri.org/ICAMService/GetOrganizationNameResponse")]
        string GetOrganizationName(int OrganizationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetOrganizationName", ReplyAction="http://tempuri.org/ICAMService/GetOrganizationNameResponse")]
        System.Threading.Tasks.Task<string> GetOrganizationNameAsync(int OrganizationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetListOfOrganizationByLevel", ReplyAction="http://tempuri.org/ICAMService/GetListOfOrganizationByLevelResponse")]
        string GetListOfOrganizationByLevel(int OrganizationLevel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetListOfOrganizationByLevel", ReplyAction="http://tempuri.org/ICAMService/GetListOfOrganizationByLevelResponse")]
        System.Threading.Tasks.Task<string> GetListOfOrganizationByLevelAsync(int OrganizationLevel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetSectorList", ReplyAction="http://tempuri.org/ICAMService/GetSectorListResponse")]
        string GetSectorList(int ApplicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetSectorList", ReplyAction="http://tempuri.org/ICAMService/GetSectorListResponse")]
        System.Threading.Tasks.Task<string> GetSectorListAsync(int ApplicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetSectorCode", ReplyAction="http://tempuri.org/ICAMService/GetSectorCodeResponse")]
        string GetSectorCode(int SectorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetSectorCode", ReplyAction="http://tempuri.org/ICAMService/GetSectorCodeResponse")]
        System.Threading.Tasks.Task<string> GetSectorCodeAsync(int SectorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetSectorId", ReplyAction="http://tempuri.org/ICAMService/GetSectorIdResponse")]
        int GetSectorId(string SectorCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetSectorId", ReplyAction="http://tempuri.org/ICAMService/GetSectorIdResponse")]
        System.Threading.Tasks.Task<int> GetSectorIdAsync(string SectorCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetSectorNameByCode", ReplyAction="http://tempuri.org/ICAMService/GetSectorNameByCodeResponse")]
        string GetSectorNameByCode(string SectorCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetSectorNameByCode", ReplyAction="http://tempuri.org/ICAMService/GetSectorNameByCodeResponse")]
        System.Threading.Tasks.Task<string> GetSectorNameByCodeAsync(string SectorCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetParentSector", ReplyAction="http://tempuri.org/ICAMService/GetParentSectorResponse")]
        string GetParentSector(string sectorCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetParentSector", ReplyAction="http://tempuri.org/ICAMService/GetParentSectorResponse")]
        System.Threading.Tasks.Task<string> GetParentSectorAsync(string sectorCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetSingleSystemMessage", ReplyAction="http://tempuri.org/ICAMService/GetSingleSystemMessageResponse")]
        string GetSingleSystemMessage(string MessageCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetSingleSystemMessage", ReplyAction="http://tempuri.org/ICAMService/GetSingleSystemMessageResponse")]
        System.Threading.Tasks.Task<string> GetSingleSystemMessageAsync(string MessageCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetSystemMessageList", ReplyAction="http://tempuri.org/ICAMService/GetSystemMessageListResponse")]
        string GetSystemMessageList(string codeKeyword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetSystemMessageList", ReplyAction="http://tempuri.org/ICAMService/GetSystemMessageListResponse")]
        System.Threading.Tasks.Task<string> GetSystemMessageListAsync(string codeKeyword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetUserSector", ReplyAction="http://tempuri.org/ICAMService/GetUserSectorResponse")]
        string GetUserSector(int UserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetUserSector", ReplyAction="http://tempuri.org/ICAMService/GetUserSectorResponse")]
        System.Threading.Tasks.Task<string> GetUserSectorAsync(int UserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/EntityCheckOnUserSector", ReplyAction="http://tempuri.org/ICAMService/EntityCheckOnUserSectorResponse")]
        bool EntityCheckOnUserSector(int UserId, string EntityCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/EntityCheckOnUserSector", ReplyAction="http://tempuri.org/ICAMService/EntityCheckOnUserSectorResponse")]
        System.Threading.Tasks.Task<bool> EntityCheckOnUserSectorAsync(int UserId, string EntityCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/EntityCheckOnUserSectorInactiveIncluded", ReplyAction="http://tempuri.org/ICAMService/EntityCheckOnUserSectorInactiveIncludedResponse")]
        bool EntityCheckOnUserSectorInactiveIncluded(int UserId, string EntityCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/EntityCheckOnUserSectorInactiveIncluded", ReplyAction="http://tempuri.org/ICAMService/EntityCheckOnUserSectorInactiveIncludedResponse")]
        System.Threading.Tasks.Task<bool> EntityCheckOnUserSectorInactiveIncludedAsync(int UserId, string EntityCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetSingleSystemParamGen", ReplyAction="http://tempuri.org/ICAMService/GetSingleSystemParamGenResponse")]
        string GetSingleSystemParamGen(string ParamGenCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetSingleSystemParamGen", ReplyAction="http://tempuri.org/ICAMService/GetSingleSystemParamGenResponse")]
        System.Threading.Tasks.Task<string> GetSingleSystemParamGenAsync(string ParamGenCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetRoleMenu", ReplyAction="http://tempuri.org/ICAMService/GetRoleMenuResponse")]
        string GetRoleMenu(int RoleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetRoleMenu", ReplyAction="http://tempuri.org/ICAMService/GetRoleMenuResponse")]
        System.Threading.Tasks.Task<string> GetRoleMenuAsync(int RoleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetRoleIdInRoleMenu", ReplyAction="http://tempuri.org/ICAMService/GetRoleIdInRoleMenuResponse")]
        string GetRoleIdInRoleMenu(int MenuId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetRoleIdInRoleMenu", ReplyAction="http://tempuri.org/ICAMService/GetRoleIdInRoleMenuResponse")]
        System.Threading.Tasks.Task<string> GetRoleIdInRoleMenuAsync(int MenuId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetMenuGrantAccess", ReplyAction="http://tempuri.org/ICAMService/GetMenuGrantAccessResponse")]
        string GetMenuGrantAccess(string menuUrl, int roleId, int appId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetMenuGrantAccess", ReplyAction="http://tempuri.org/ICAMService/GetMenuGrantAccessResponse")]
        System.Threading.Tasks.Task<string> GetMenuGrantAccessAsync(string menuUrl, int roleId, int appId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetSectorIdInApplicationSector", ReplyAction="http://tempuri.org/ICAMService/GetSectorIdInApplicationSectorResponse")]
        string GetSectorIdInApplicationSector(int ApplicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetSectorIdInApplicationSector", ReplyAction="http://tempuri.org/ICAMService/GetSectorIdInApplicationSectorResponse")]
        System.Threading.Tasks.Task<string> GetSectorIdInApplicationSectorAsync(int ApplicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetEntity", ReplyAction="http://tempuri.org/ICAMService/GetEntityResponse")]
        string GetEntity(int UserId, int ApplicationId, int RowsTaken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetEntity", ReplyAction="http://tempuri.org/ICAMService/GetEntityResponse")]
        System.Threading.Tasks.Task<string> GetEntityAsync(int UserId, int ApplicationId, int RowsTaken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GenerateMenuAuth", ReplyAction="http://tempuri.org/ICAMService/GenerateMenuAuthResponse")]
        string GenerateMenuAuth(int RoleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GenerateMenuAuth", ReplyAction="http://tempuri.org/ICAMService/GenerateMenuAuthResponse")]
        System.Threading.Tasks.Task<string> GenerateMenuAuthAsync(int RoleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/EntityCheckOnUserEntity", ReplyAction="http://tempuri.org/ICAMService/EntityCheckOnUserEntityResponse")]
        bool EntityCheckOnUserEntity(int UserId, string EntityCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/EntityCheckOnUserEntity", ReplyAction="http://tempuri.org/ICAMService/EntityCheckOnUserEntityResponse")]
        System.Threading.Tasks.Task<bool> EntityCheckOnUserEntityAsync(int UserId, string EntityCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetUserEntity", ReplyAction="http://tempuri.org/ICAMService/GetUserEntityResponse")]
        string GetUserEntity(int EntityId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetUserEntity", ReplyAction="http://tempuri.org/ICAMService/GetUserEntityResponse")]
        System.Threading.Tasks.Task<string> GetUserEntityAsync(int EntityId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetUserEntityByOrganization", ReplyAction="http://tempuri.org/ICAMService/GetUserEntityByOrganizationResponse")]
        string GetUserEntityByOrganization(int EntityId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetUserEntityByOrganization", ReplyAction="http://tempuri.org/ICAMService/GetUserEntityByOrganizationResponse")]
        System.Threading.Tasks.Task<string> GetUserEntityByOrganizationAsync(int EntityId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/EntityCheckOnOrganizationEntity", ReplyAction="http://tempuri.org/ICAMService/EntityCheckOnOrganizationEntityResponse")]
        bool EntityCheckOnOrganizationEntity(int OrganizationId, string EntityCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/EntityCheckOnOrganizationEntity", ReplyAction="http://tempuri.org/ICAMService/EntityCheckOnOrganizationEntityResponse")]
        System.Threading.Tasks.Task<bool> EntityCheckOnOrganizationEntityAsync(int OrganizationId, string EntityCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetListOfEnumerate", ReplyAction="http://tempuri.org/ICAMService/GetListOfEnumerateResponse")]
        string GetListOfEnumerate(string EnumerateParentCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetListOfEnumerate", ReplyAction="http://tempuri.org/ICAMService/GetListOfEnumerateResponse")]
        System.Threading.Tasks.Task<string> GetListOfEnumerateAsync(string EnumerateParentCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetSingleCustomLogUserActivity", ReplyAction="http://tempuri.org/ICAMService/GetSingleCustomLogUserActivityResponse")]
        string GetSingleCustomLogUserActivity(int UserId, int ApplicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetSingleCustomLogUserActivity", ReplyAction="http://tempuri.org/ICAMService/GetSingleCustomLogUserActivityResponse")]
        System.Threading.Tasks.Task<string> GetSingleCustomLogUserActivityAsync(int UserId, int ApplicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetUserAppRole", ReplyAction="http://tempuri.org/ICAMService/GetUserAppRoleResponse")]
        string GetUserAppRole(int UserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetUserAppRole", ReplyAction="http://tempuri.org/ICAMService/GetUserAppRoleResponse")]
        System.Threading.Tasks.Task<string> GetUserAppRoleAsync(int UserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetUserOrg", ReplyAction="http://tempuri.org/ICAMService/GetUserOrgResponse")]
        string GetUserOrg(int UserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetUserOrg", ReplyAction="http://tempuri.org/ICAMService/GetUserOrgResponse")]
        System.Threading.Tasks.Task<string> GetUserOrgAsync(int UserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetOrganizationbyUserId", ReplyAction="http://tempuri.org/ICAMService/GetOrganizationbyUserIdResponse")]
        string GetOrganizationbyUserId(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetOrganizationbyUserId", ReplyAction="http://tempuri.org/ICAMService/GetOrganizationbyUserIdResponse")]
        System.Threading.Tasks.Task<string> GetOrganizationbyUserIdAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetListOfDati1", ReplyAction="http://tempuri.org/ICAMService/GetListOfDati1Response")]
        string GetListOfDati1(System.DateTime EffectiveDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetListOfDati1", ReplyAction="http://tempuri.org/ICAMService/GetListOfDati1Response")]
        System.Threading.Tasks.Task<string> GetListOfDati1Async(System.DateTime EffectiveDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetSingleDati1", ReplyAction="http://tempuri.org/ICAMService/GetSingleDati1Response")]
        string GetSingleDati1(string LocationCode, System.DateTime EffectiveDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetSingleDati1", ReplyAction="http://tempuri.org/ICAMService/GetSingleDati1Response")]
        System.Threading.Tasks.Task<string> GetSingleDati1Async(string LocationCode, System.DateTime EffectiveDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetListOfDati2", ReplyAction="http://tempuri.org/ICAMService/GetListOfDati2Response")]
        string GetListOfDati2(System.DateTime EffectiveDate, string ParentLocationCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetListOfDati2", ReplyAction="http://tempuri.org/ICAMService/GetListOfDati2Response")]
        System.Threading.Tasks.Task<string> GetListOfDati2Async(System.DateTime EffectiveDate, string ParentLocationCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetSingleDati2", ReplyAction="http://tempuri.org/ICAMService/GetSingleDati2Response")]
        string GetSingleDati2(string LocationCode, System.DateTime EffectiveDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetSingleDati2", ReplyAction="http://tempuri.org/ICAMService/GetSingleDati2Response")]
        System.Threading.Tasks.Task<string> GetSingleDati2Async(string LocationCode, System.DateTime EffectiveDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetLocationNameByCode", ReplyAction="http://tempuri.org/ICAMService/GetLocationNameByCodeResponse")]
        string GetLocationNameByCode(string LocationCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetLocationNameByCode", ReplyAction="http://tempuri.org/ICAMService/GetLocationNameByCodeResponse")]
        System.Threading.Tasks.Task<string> GetLocationNameByCodeAsync(string LocationCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetNewMessageCount", ReplyAction="http://tempuri.org/ICAMService/GetNewMessageCountResponse")]
        int GetNewMessageCount(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetNewMessageCount", ReplyAction="http://tempuri.org/ICAMService/GetNewMessageCountResponse")]
        System.Threading.Tasks.Task<int> GetNewMessageCountAsync(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetTopMessage", ReplyAction="http://tempuri.org/ICAMService/GetTopMessageResponse")]
        string GetTopMessage(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetTopMessage", ReplyAction="http://tempuri.org/ICAMService/GetTopMessageResponse")]
        System.Threading.Tasks.Task<string> GetTopMessageAsync(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetMessage", ReplyAction="http://tempuri.org/ICAMService/GetMessageResponse")]
        string GetMessage(string uName, string keyword, int pIndex, int RowsTaken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetMessage", ReplyAction="http://tempuri.org/ICAMService/GetMessageResponse")]
        System.Threading.Tasks.Task<string> GetMessageAsync(string uName, string keyword, int pIndex, int RowsTaken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetSentItems", ReplyAction="http://tempuri.org/ICAMService/GetSentItemsResponse")]
        string GetSentItems(string uName, string keyword, int pIndex, int RowsTaken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetSentItems", ReplyAction="http://tempuri.org/ICAMService/GetSentItemsResponse")]
        System.Threading.Tasks.Task<string> GetSentItemsAsync(string uName, string keyword, int pIndex, int RowsTaken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetSingleMessage", ReplyAction="http://tempuri.org/ICAMService/GetSingleMessageResponse")]
        string GetSingleMessage(int messageId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetSingleMessage", ReplyAction="http://tempuri.org/ICAMService/GetSingleMessageResponse")]
        System.Threading.Tasks.Task<string> GetSingleMessageAsync(int messageId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/UpdateReadStatusMessage", ReplyAction="http://tempuri.org/ICAMService/UpdateReadStatusMessageResponse")]
        bool UpdateReadStatusMessage(int messageId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/UpdateReadStatusMessage", ReplyAction="http://tempuri.org/ICAMService/UpdateReadStatusMessageResponse")]
        System.Threading.Tasks.Task<bool> UpdateReadStatusMessageAsync(int messageId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/CreateMessage", ReplyAction="http://tempuri.org/ICAMService/CreateMessageResponse")]
        int CreateMessage(string xmlUserMessage);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/CreateMessage", ReplyAction="http://tempuri.org/ICAMService/CreateMessageResponse")]
        System.Threading.Tasks.Task<int> CreateMessageAsync(string xmlUserMessage);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/DeleteInbox", ReplyAction="http://tempuri.org/ICAMService/DeleteInboxResponse")]
        bool DeleteInbox(int msgId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/DeleteInbox", ReplyAction="http://tempuri.org/ICAMService/DeleteInboxResponse")]
        System.Threading.Tasks.Task<bool> DeleteInboxAsync(int msgId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/DeleteSentItem", ReplyAction="http://tempuri.org/ICAMService/DeleteSentItemResponse")]
        bool DeleteSentItem(int msgId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/DeleteSentItem", ReplyAction="http://tempuri.org/ICAMService/DeleteSentItemResponse")]
        System.Threading.Tasks.Task<bool> DeleteSentItemAsync(int msgId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetMessageAttachment", ReplyAction="http://tempuri.org/ICAMService/GetMessageAttachmentResponse")]
        string GetMessageAttachment(int msgId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetMessageAttachment", ReplyAction="http://tempuri.org/ICAMService/GetMessageAttachmentResponse")]
        System.Threading.Tasks.Task<string> GetMessageAttachmentAsync(int msgId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/UpdateMessageAttachment", ReplyAction="http://tempuri.org/ICAMService/UpdateMessageAttachmentResponse")]
        bool UpdateMessageAttachment(string fileBase64String, int[] messageId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/UpdateMessageAttachment", ReplyAction="http://tempuri.org/ICAMService/UpdateMessageAttachmentResponse")]
        System.Threading.Tasks.Task<bool> UpdateMessageAttachmentAsync(string fileBase64String, int[] messageId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetTopAnnouncement", ReplyAction="http://tempuri.org/ICAMService/GetTopAnnouncementResponse")]
        string GetTopAnnouncement(int appId, string grantedFor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetTopAnnouncement", ReplyAction="http://tempuri.org/ICAMService/GetTopAnnouncementResponse")]
        System.Threading.Tasks.Task<string> GetTopAnnouncementAsync(int appId, string grantedFor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetTopAnnouncementByAppId", ReplyAction="http://tempuri.org/ICAMService/GetTopAnnouncementByAppIdResponse")]
        string GetTopAnnouncementByAppId(int appId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetTopAnnouncementByAppId", ReplyAction="http://tempuri.org/ICAMService/GetTopAnnouncementByAppIdResponse")]
        System.Threading.Tasks.Task<string> GetTopAnnouncementByAppIdAsync(int appId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetTopAnnouncementForChannelId", ReplyAction="http://tempuri.org/ICAMService/GetTopAnnouncementForChannelIdResponse")]
        string GetTopAnnouncementForChannelId(int appId, int channelId, string grantedFor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetTopAnnouncementForChannelId", ReplyAction="http://tempuri.org/ICAMService/GetTopAnnouncementForChannelIdResponse")]
        System.Threading.Tasks.Task<string> GetTopAnnouncementForChannelIdAsync(int appId, int channelId, string grantedFor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetTopAnnouncementForChannelIdByAppId", ReplyAction="http://tempuri.org/ICAMService/GetTopAnnouncementForChannelIdByAppIdResponse")]
        string GetTopAnnouncementForChannelIdByAppId(int appId, int channelId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetTopAnnouncementForChannelIdByAppId", ReplyAction="http://tempuri.org/ICAMService/GetTopAnnouncementForChannelIdByAppIdResponse")]
        System.Threading.Tasks.Task<string> GetTopAnnouncementForChannelIdByAppIdAsync(int appId, int channelId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetSingleAnnouncement", ReplyAction="http://tempuri.org/ICAMService/GetSingleAnnouncementResponse")]
        string GetSingleAnnouncement(int announcementId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetSingleAnnouncement", ReplyAction="http://tempuri.org/ICAMService/GetSingleAnnouncementResponse")]
        System.Threading.Tasks.Task<string> GetSingleAnnouncementAsync(int announcementId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetAllAnnouncement", ReplyAction="http://tempuri.org/ICAMService/GetAllAnnouncementResponse")]
        string GetAllAnnouncement(string search, int appId, string grantedFor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetAllAnnouncement", ReplyAction="http://tempuri.org/ICAMService/GetAllAnnouncementResponse")]
        System.Threading.Tasks.Task<string> GetAllAnnouncementAsync(string search, int appId, string grantedFor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetAllAnnouncementByAppId", ReplyAction="http://tempuri.org/ICAMService/GetAllAnnouncementByAppIdResponse")]
        string GetAllAnnouncementByAppId(string search, int appId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetAllAnnouncementByAppId", ReplyAction="http://tempuri.org/ICAMService/GetAllAnnouncementByAppIdResponse")]
        System.Threading.Tasks.Task<string> GetAllAnnouncementByAppIdAsync(string search, int appId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetAllAnnouncementForChannelId", ReplyAction="http://tempuri.org/ICAMService/GetAllAnnouncementForChannelIdResponse")]
        string GetAllAnnouncementForChannelId(string search, int appId, int channelId, string grantedFor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetAllAnnouncementForChannelId", ReplyAction="http://tempuri.org/ICAMService/GetAllAnnouncementForChannelIdResponse")]
        System.Threading.Tasks.Task<string> GetAllAnnouncementForChannelIdAsync(string search, int appId, int channelId, string grantedFor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetAllAnnouncementForChannelIdByAppId", ReplyAction="http://tempuri.org/ICAMService/GetAllAnnouncementForChannelIdByAppIdResponse")]
        string GetAllAnnouncementForChannelIdByAppId(string search, int appId, int channelId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetAllAnnouncementForChannelIdByAppId", ReplyAction="http://tempuri.org/ICAMService/GetAllAnnouncementForChannelIdByAppIdResponse")]
        System.Threading.Tasks.Task<string> GetAllAnnouncementForChannelIdByAppIdAsync(string search, int appId, int channelId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetAnotherAnnouncement", ReplyAction="http://tempuri.org/ICAMService/GetAnotherAnnouncementResponse")]
        string GetAnotherAnnouncement(int exceptId, int appId, string grantedFor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetAnotherAnnouncement", ReplyAction="http://tempuri.org/ICAMService/GetAnotherAnnouncementResponse")]
        System.Threading.Tasks.Task<string> GetAnotherAnnouncementAsync(int exceptId, int appId, string grantedFor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetAnotherAnnouncementByAppId", ReplyAction="http://tempuri.org/ICAMService/GetAnotherAnnouncementByAppIdResponse")]
        string GetAnotherAnnouncementByAppId(int exceptId, int appId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetAnotherAnnouncementByAppId", ReplyAction="http://tempuri.org/ICAMService/GetAnotherAnnouncementByAppIdResponse")]
        System.Threading.Tasks.Task<string> GetAnotherAnnouncementByAppIdAsync(int exceptId, int appId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetAnotherAnnouncementForChannelId", ReplyAction="http://tempuri.org/ICAMService/GetAnotherAnnouncementForChannelIdResponse")]
        string GetAnotherAnnouncementForChannelId(int exceptId, int appId, int channelId, string grantedFor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetAnotherAnnouncementForChannelId", ReplyAction="http://tempuri.org/ICAMService/GetAnotherAnnouncementForChannelIdResponse")]
        System.Threading.Tasks.Task<string> GetAnotherAnnouncementForChannelIdAsync(int exceptId, int appId, int channelId, string grantedFor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetAnotherAnnouncementForChannelIdByAppId", ReplyAction="http://tempuri.org/ICAMService/GetAnotherAnnouncementForChannelIdByAppIdResponse")]
        string GetAnotherAnnouncementForChannelIdByAppId(int exceptId, int appId, int channelId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetAnotherAnnouncementForChannelIdByAppId", ReplyAction="http://tempuri.org/ICAMService/GetAnotherAnnouncementForChannelIdByAppIdResponse")]
        System.Threading.Tasks.Task<string> GetAnotherAnnouncementForChannelIdByAppIdAsync(int exceptId, int appId, int channelId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetAnnouncementAttachment", ReplyAction="http://tempuri.org/ICAMService/GetAnnouncementAttachmentResponse")]
        string GetAnnouncementAttachment(int announcementId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetAnnouncementAttachment", ReplyAction="http://tempuri.org/ICAMService/GetAnnouncementAttachmentResponse")]
        System.Threading.Tasks.Task<string> GetAnnouncementAttachmentAsync(int announcementId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetTopLevelEconomicSector", ReplyAction="http://tempuri.org/ICAMService/GetTopLevelEconomicSectorResponse")]
        string GetTopLevelEconomicSector();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetTopLevelEconomicSector", ReplyAction="http://tempuri.org/ICAMService/GetTopLevelEconomicSectorResponse")]
        System.Threading.Tasks.Task<string> GetTopLevelEconomicSectorAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetEconomicSector", ReplyAction="http://tempuri.org/ICAMService/GetEconomicSectorResponse")]
        string GetEconomicSector(string parentCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetEconomicSector", ReplyAction="http://tempuri.org/ICAMService/GetEconomicSectorResponse")]
        System.Threading.Tasks.Task<string> GetEconomicSectorAsync(string parentCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetWilayahKerjaOJK", ReplyAction="http://tempuri.org/ICAMService/GetWilayahKerjaOJKResponse")]
        string GetWilayahKerjaOJK(int organizationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetWilayahKerjaOJK", ReplyAction="http://tempuri.org/ICAMService/GetWilayahKerjaOJKResponse")]
        System.Threading.Tasks.Task<string> GetWilayahKerjaOJKAsync(int organizationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetOrganizationHasWK", ReplyAction="http://tempuri.org/ICAMService/GetOrganizationHasWKResponse")]
        string GetOrganizationHasWK();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetOrganizationHasWK", ReplyAction="http://tempuri.org/ICAMService/GetOrganizationHasWKResponse")]
        System.Threading.Tasks.Task<string> GetOrganizationHasWKAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetWilayahKerjaOJKbyEntity", ReplyAction="http://tempuri.org/ICAMService/GetWilayahKerjaOJKbyEntityResponse")]
        string GetWilayahKerjaOJKbyEntity(int entityId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetWilayahKerjaOJKbyEntity", ReplyAction="http://tempuri.org/ICAMService/GetWilayahKerjaOJKbyEntityResponse")]
        System.Threading.Tasks.Task<string> GetWilayahKerjaOJKbyEntityAsync(int entityId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetUserUnderEntityInAllBPRKS", ReplyAction="http://tempuri.org/ICAMService/GetUserUnderEntityInAllBPRKSResponse")]
        string GetUserUnderEntityInAllBPRKS(string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetUserUnderEntityInAllBPRKS", ReplyAction="http://tempuri.org/ICAMService/GetUserUnderEntityInAllBPRKSResponse")]
        System.Threading.Tasks.Task<string> GetUserUnderEntityInAllBPRKSAsync(string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetUserUnderEntityInAllBUS", ReplyAction="http://tempuri.org/ICAMService/GetUserUnderEntityInAllBUSResponse")]
        string GetUserUnderEntityInAllBUS(string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetUserUnderEntityInAllBUS", ReplyAction="http://tempuri.org/ICAMService/GetUserUnderEntityInAllBUSResponse")]
        System.Threading.Tasks.Task<string> GetUserUnderEntityInAllBUSAsync(string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetUserUnderEntitySector", ReplyAction="http://tempuri.org/ICAMService/GetUserUnderEntitySectorResponse")]
        string GetUserUnderEntitySector(string token, string[] sector);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetUserUnderEntitySector", ReplyAction="http://tempuri.org/ICAMService/GetUserUnderEntitySectorResponse")]
        System.Threading.Tasks.Task<string> GetUserUnderEntitySectorAsync(string token, string[] sector);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetWorkingDays", ReplyAction="http://tempuri.org/ICAMService/GetWorkingDaysResponse")]
        int GetWorkingDays(System.DateTime pStartDate, System.DateTime pEndDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetWorkingDays", ReplyAction="http://tempuri.org/ICAMService/GetWorkingDaysResponse")]
        System.Threading.Tasks.Task<int> GetWorkingDaysAsync(System.DateTime pStartDate, System.DateTime pEndDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/IsHoliday", ReplyAction="http://tempuri.org/ICAMService/IsHolidayResponse")]
        bool IsHoliday(System.DateTime pDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/IsHoliday", ReplyAction="http://tempuri.org/ICAMService/IsHolidayResponse")]
        System.Threading.Tasks.Task<bool> IsHolidayAsync(System.DateTime pDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetHolidays", ReplyAction="http://tempuri.org/ICAMService/GetHolidaysResponse")]
        string GetHolidays(System.DateTime pStartDate, System.DateTime pEndDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAMService/GetHolidays", ReplyAction="http://tempuri.org/ICAMService/GetHolidaysResponse")]
        System.Threading.Tasks.Task<string> GetHolidaysAsync(System.DateTime pStartDate, System.DateTime pEndDate);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public interface ICAMServiceChannel : CAMService.ICAMService, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public partial class CAMServiceClient : System.ServiceModel.ClientBase<CAMService.ICAMService>, CAMService.ICAMService
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public CAMServiceClient() : 
                base(CAMServiceClient.GetDefaultBinding(), CAMServiceClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_ICAMService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CAMServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(CAMServiceClient.GetBindingForEndpoint(endpointConfiguration), CAMServiceClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CAMServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(CAMServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CAMServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(CAMServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CAMServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public string GetWorkingDaysBulk(string xmlParamRequest)
        {
            return base.Channel.GetWorkingDaysBulk(xmlParamRequest);
        }
        
        public System.Threading.Tasks.Task<string> GetWorkingDaysBulkAsync(string xmlParamRequest)
        {
            return base.Channel.GetWorkingDaysBulkAsync(xmlParamRequest);
        }
        
        public string getStatusCodeInEntityStatus(int EntityId)
        {
            return base.Channel.getStatusCodeInEntityStatus(EntityId);
        }
        
        public System.Threading.Tasks.Task<string> getStatusCodeInEntityStatusAsync(int EntityId)
        {
            return base.Channel.getStatusCodeInEntityStatusAsync(EntityId);
        }
        
        public string getParentStatusCodeInEntityStatus(string StatusCode)
        {
            return base.Channel.getParentStatusCodeInEntityStatus(StatusCode);
        }
        
        public System.Threading.Tasks.Task<string> getParentStatusCodeInEntityStatusAsync(string StatusCode)
        {
            return base.Channel.getParentStatusCodeInEntityStatusAsync(StatusCode);
        }
        
        public string getDevisaStatusCodeInEntityDevisaStatus(int EntityId)
        {
            return base.Channel.getDevisaStatusCodeInEntityDevisaStatus(EntityId);
        }
        
        public System.Threading.Tasks.Task<string> getDevisaStatusCodeInEntityDevisaStatusAsync(int EntityId)
        {
            return base.Channel.getDevisaStatusCodeInEntityDevisaStatusAsync(EntityId);
        }
        
        public string GetOfficeNetworkList(string EntityCode, System.DateTime EffectiveStartDate, System.DateTime EffectiveEndDate)
        {
            return base.Channel.GetOfficeNetworkList(EntityCode, EffectiveStartDate, EffectiveEndDate);
        }
        
        public System.Threading.Tasks.Task<string> GetOfficeNetworkListAsync(string EntityCode, System.DateTime EffectiveStartDate, System.DateTime EffectiveEndDate)
        {
            return base.Channel.GetOfficeNetworkListAsync(EntityCode, EffectiveStartDate, EffectiveEndDate);
        }
        
        public string GetPositionDescription(int PositionId)
        {
            return base.Channel.GetPositionDescription(PositionId);
        }
        
        public System.Threading.Tasks.Task<string> GetPositionDescriptionAsync(int PositionId)
        {
            return base.Channel.GetPositionDescriptionAsync(PositionId);
        }
        
        public string GetParentPosition(int positionId)
        {
            return base.Channel.GetParentPosition(positionId);
        }
        
        public System.Threading.Tasks.Task<string> GetParentPositionAsync(int positionId)
        {
            return base.Channel.GetParentPositionAsync(positionId);
        }
        
        public int GetPositionLevelByUserId(int userId)
        {
            return base.Channel.GetPositionLevelByUserId(userId);
        }
        
        public System.Threading.Tasks.Task<int> GetPositionLevelByUserIdAsync(int userId)
        {
            return base.Channel.GetPositionLevelByUserIdAsync(userId);
        }
        
        public int GetPositionLevelByPositionId(int PositionId)
        {
            return base.Channel.GetPositionLevelByPositionId(PositionId);
        }
        
        public System.Threading.Tasks.Task<int> GetPositionLevelByPositionIdAsync(int PositionId)
        {
            return base.Channel.GetPositionLevelByPositionIdAsync(PositionId);
        }
        
        public string GetListOfPositionByLevel(int minPositionLevel, int maxPositionLevel)
        {
            return base.Channel.GetListOfPositionByLevel(minPositionLevel, maxPositionLevel);
        }
        
        public System.Threading.Tasks.Task<string> GetListOfPositionByLevelAsync(int minPositionLevel, int maxPositionLevel)
        {
            return base.Channel.GetListOfPositionByLevelAsync(minPositionLevel, maxPositionLevel);
        }
        
        public string GetMergerConsolidationList()
        {
            return base.Channel.GetMergerConsolidationList();
        }
        
        public System.Threading.Tasks.Task<string> GetMergerConsolidationListAsync()
        {
            return base.Channel.GetMergerConsolidationListAsync();
        }
        
        public string GetSourceMergerConsolidationList(int EntityId)
        {
            return base.Channel.GetSourceMergerConsolidationList(EntityId);
        }
        
        public System.Threading.Tasks.Task<string> GetSourceMergerConsolidationListAsync(int EntityId)
        {
            return base.Channel.GetSourceMergerConsolidationListAsync(EntityId);
        }
        
        public string GetRegisteredEntity(int UserId, int ApplicationId, string SectorCode, string Keyword, int Index, int RowsTaken)
        {
            return base.Channel.GetRegisteredEntity(UserId, ApplicationId, SectorCode, Keyword, Index, RowsTaken);
        }
        
        public System.Threading.Tasks.Task<string> GetRegisteredEntityAsync(int UserId, int ApplicationId, string SectorCode, string Keyword, int Index, int RowsTaken)
        {
            return base.Channel.GetRegisteredEntityAsync(UserId, ApplicationId, SectorCode, Keyword, Index, RowsTaken);
        }
        
        public string GetRegisteredEntityInactiveIncluded(int UserId, int ApplicationId, string SectorCode, string Keyword, int Index, int pRowsTaken)
        {
            return base.Channel.GetRegisteredEntityInactiveIncluded(UserId, ApplicationId, SectorCode, Keyword, Index, pRowsTaken);
        }
        
        public System.Threading.Tasks.Task<string> GetRegisteredEntityInactiveIncludedAsync(int UserId, int ApplicationId, string SectorCode, string Keyword, int Index, int pRowsTaken)
        {
            return base.Channel.GetRegisteredEntityInactiveIncludedAsync(UserId, ApplicationId, SectorCode, Keyword, Index, pRowsTaken);
        }
        
        public string GetEntityList(int ApplicationId, string SectorCode, string Keyword, int Page, int pRowsTaken)
        {
            return base.Channel.GetEntityList(ApplicationId, SectorCode, Keyword, Page, pRowsTaken);
        }
        
        public System.Threading.Tasks.Task<string> GetEntityListAsync(int ApplicationId, string SectorCode, string Keyword, int Page, int pRowsTaken)
        {
            return base.Channel.GetEntityListAsync(ApplicationId, SectorCode, Keyword, Page, pRowsTaken);
        }
        
        public string GetSingleApplicationEntity(string EntityCode)
        {
            return base.Channel.GetSingleApplicationEntity(EntityCode);
        }
        
        public System.Threading.Tasks.Task<string> GetSingleApplicationEntityAsync(string EntityCode)
        {
            return base.Channel.GetSingleApplicationEntityAsync(EntityCode);
        }
        
        public string GetSingleApplicationEntityWithUus(string EntityCode, bool isUUS)
        {
            return base.Channel.GetSingleApplicationEntityWithUus(EntityCode, isUUS);
        }
        
        public System.Threading.Tasks.Task<string> GetSingleApplicationEntityWithUusAsync(string EntityCode, bool isUUS)
        {
            return base.Channel.GetSingleApplicationEntityWithUusAsync(EntityCode, isUUS);
        }
        
        public string GetSingleApplicationEntityByNaturalCode(string pNaturalEntityCode)
        {
            return base.Channel.GetSingleApplicationEntityByNaturalCode(pNaturalEntityCode);
        }
        
        public System.Threading.Tasks.Task<string> GetSingleApplicationEntityByNaturalCodeAsync(string pNaturalEntityCode)
        {
            return base.Channel.GetSingleApplicationEntityByNaturalCodeAsync(pNaturalEntityCode);
        }
        
        public string GetSingleApplicationEntityByEntityId(int entityId)
        {
            return base.Channel.GetSingleApplicationEntityByEntityId(entityId);
        }
        
        public System.Threading.Tasks.Task<string> GetSingleApplicationEntityByEntityIdAsync(int entityId)
        {
            return base.Channel.GetSingleApplicationEntityByEntityIdAsync(entityId);
        }
        
        public string GetSingleApplicationEntityInactiveIncluded(int entityId)
        {
            return base.Channel.GetSingleApplicationEntityInactiveIncluded(entityId);
        }
        
        public System.Threading.Tasks.Task<string> GetSingleApplicationEntityInactiveIncludedAsync(int entityId)
        {
            return base.Channel.GetSingleApplicationEntityInactiveIncludedAsync(entityId);
        }
        
        public string GetSingleApplicationEntityInactiveIncludedByEntityCode(string EntityCode)
        {
            return base.Channel.GetSingleApplicationEntityInactiveIncludedByEntityCode(EntityCode);
        }
        
        public System.Threading.Tasks.Task<string> GetSingleApplicationEntityInactiveIncludedByEntityCodeAsync(string EntityCode)
        {
            return base.Channel.GetSingleApplicationEntityInactiveIncludedByEntityCodeAsync(EntityCode);
        }
        
        public string GetEntityType(string pEntityCode)
        {
            return base.Channel.GetEntityType(pEntityCode);
        }
        
        public System.Threading.Tasks.Task<string> GetEntityTypeAsync(string pEntityCode)
        {
            return base.Channel.GetEntityTypeAsync(pEntityCode);
        }
        
        public string GetSupervisoryUnit(string EntityCode)
        {
            return base.Channel.GetSupervisoryUnit(EntityCode);
        }
        
        public System.Threading.Tasks.Task<string> GetSupervisoryUnitAsync(string EntityCode)
        {
            return base.Channel.GetSupervisoryUnitAsync(EntityCode);
        }
        
        public int GetSupervisoryOrganizationId(string entityCode)
        {
            return base.Channel.GetSupervisoryOrganizationId(entityCode);
        }
        
        public System.Threading.Tasks.Task<int> GetSupervisoryOrganizationIdAsync(string entityCode)
        {
            return base.Channel.GetSupervisoryOrganizationIdAsync(entityCode);
        }
        
        public string GetSupervisoryOrganization(string entityCode)
        {
            return base.Channel.GetSupervisoryOrganization(entityCode);
        }
        
        public System.Threading.Tasks.Task<string> GetSupervisoryOrganizationAsync(string entityCode)
        {
            return base.Channel.GetSupervisoryOrganizationAsync(entityCode);
        }
        
        public bool UpdateCAMEntity(int EntityId, string EntityName, string NPWP, string Email, string Website, string UpdatedBy)
        {
            return base.Channel.UpdateCAMEntity(EntityId, EntityName, NPWP, Email, Website, UpdatedBy);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateCAMEntityAsync(int EntityId, string EntityName, string NPWP, string Email, string Website, string UpdatedBy)
        {
            return base.Channel.UpdateCAMEntityAsync(EntityId, EntityName, NPWP, Email, Website, UpdatedBy);
        }
        
        public bool UpdateCAMEntityDetails(int EntityId, string Address, string RegionCode, string CityCode, string ZipCode, string Phone, string Fax, string UpdatedBy)
        {
            return base.Channel.UpdateCAMEntityDetails(EntityId, Address, RegionCode, CityCode, ZipCode, Phone, Fax, UpdatedBy);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateCAMEntityDetailsAsync(int EntityId, string Address, string RegionCode, string CityCode, string ZipCode, string Phone, string Fax, string UpdatedBy)
        {
            return base.Channel.UpdateCAMEntityDetailsAsync(EntityId, Address, RegionCode, CityCode, ZipCode, Phone, Fax, UpdatedBy);
        }
        
        public bool UpdateCAMOfficeNetwork(int OfficeNetworkId, string OfficeName, System.DateTime EffectiveStartDate, System.Nullable<System.DateTime> EffectiveEndDate, string UpdatedBy)
        {
            return base.Channel.UpdateCAMOfficeNetwork(OfficeNetworkId, OfficeName, EffectiveStartDate, EffectiveEndDate, UpdatedBy);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateCAMOfficeNetworkAsync(int OfficeNetworkId, string OfficeName, System.DateTime EffectiveStartDate, System.Nullable<System.DateTime> EffectiveEndDate, string UpdatedBy)
        {
            return base.Channel.UpdateCAMOfficeNetworkAsync(OfficeNetworkId, OfficeName, EffectiveStartDate, EffectiveEndDate, UpdatedBy);
        }
        
        public bool UpdateEntityEffectiveDate(int EntityId, System.Nullable<System.DateTime> EntityEffectiveEndDate, string UpdatedBy)
        {
            return base.Channel.UpdateEntityEffectiveDate(EntityId, EntityEffectiveEndDate, UpdatedBy);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateEntityEffectiveDateAsync(int EntityId, System.Nullable<System.DateTime> EntityEffectiveEndDate, string UpdatedBy)
        {
            return base.Channel.UpdateEntityEffectiveDateAsync(EntityId, EntityEffectiveEndDate, UpdatedBy);
        }
        
        public string GetEntityName(int EntityId)
        {
            return base.Channel.GetEntityName(EntityId);
        }
        
        public System.Threading.Tasks.Task<string> GetEntityNameAsync(int EntityId)
        {
            return base.Channel.GetEntityNameAsync(EntityId);
        }
        
        public int GetEntityIdByNaturalEntityCode(string NaturalEntityCode)
        {
            return base.Channel.GetEntityIdByNaturalEntityCode(NaturalEntityCode);
        }
        
        public System.Threading.Tasks.Task<int> GetEntityIdByNaturalEntityCodeAsync(string NaturalEntityCode)
        {
            return base.Channel.GetEntityIdByNaturalEntityCodeAsync(NaturalEntityCode);
        }
        
        public int GetCountNotif(int UserId, int ApplicationId)
        {
            return base.Channel.GetCountNotif(UserId, ApplicationId);
        }
        
        public System.Threading.Tasks.Task<int> GetCountNotifAsync(int UserId, int ApplicationId)
        {
            return base.Channel.GetCountNotifAsync(UserId, ApplicationId);
        }
        
        public string GetNotif(int UserId, int ApplicationId, int RowsTaken)
        {
            return base.Channel.GetNotif(UserId, ApplicationId, RowsTaken);
        }
        
        public System.Threading.Tasks.Task<string> GetNotifAsync(int UserId, int ApplicationId, int RowsTaken)
        {
            return base.Channel.GetNotifAsync(UserId, ApplicationId, RowsTaken);
        }
        
        public string GetMenus(int UserId, int RoleId, int ApplicationId)
        {
            return base.Channel.GetMenus(UserId, RoleId, ApplicationId);
        }
        
        public System.Threading.Tasks.Task<string> GetMenusAsync(int UserId, int RoleId, int ApplicationId)
        {
            return base.Channel.GetMenusAsync(UserId, RoleId, ApplicationId);
        }
        
        public string GetMenuHierarchyBottomUpByUrl(int UserId, int ApplicationId, string Url)
        {
            return base.Channel.GetMenuHierarchyBottomUpByUrl(UserId, ApplicationId, Url);
        }
        
        public System.Threading.Tasks.Task<string> GetMenuHierarchyBottomUpByUrlAsync(int UserId, int ApplicationId, string Url)
        {
            return base.Channel.GetMenuHierarchyBottomUpByUrlAsync(UserId, ApplicationId, Url);
        }
        
        public string GetMenuByApplicationId(int ApplicationId)
        {
            return base.Channel.GetMenuByApplicationId(ApplicationId);
        }
        
        public System.Threading.Tasks.Task<string> GetMenuByApplicationIdAsync(int ApplicationId)
        {
            return base.Channel.GetMenuByApplicationIdAsync(ApplicationId);
        }
        
        public string GetChildrenFromMenu(int MenuId)
        {
            return base.Channel.GetChildrenFromMenu(MenuId);
        }
        
        public System.Threading.Tasks.Task<string> GetChildrenFromMenuAsync(int MenuId)
        {
            return base.Channel.GetChildrenFromMenuAsync(MenuId);
        }
        
        public string GetSingleAksesMenu(string Url, int ApplicationId)
        {
            return base.Channel.GetSingleAksesMenu(Url, ApplicationId);
        }
        
        public System.Threading.Tasks.Task<string> GetSingleAksesMenuAsync(string Url, int ApplicationId)
        {
            return base.Channel.GetSingleAksesMenuAsync(Url, ApplicationId);
        }
        
        public string GetSingleMenu(string MenuCode, int ApplicationId)
        {
            return base.Channel.GetSingleMenu(MenuCode, ApplicationId);
        }
        
        public System.Threading.Tasks.Task<string> GetSingleMenuAsync(string MenuCode, int ApplicationId)
        {
            return base.Channel.GetSingleMenuAsync(MenuCode, ApplicationId);
        }
        
        public string SearchCurrentActiveRoleByUserName(string UserName, int ApplicationId)
        {
            return base.Channel.SearchCurrentActiveRoleByUserName(UserName, ApplicationId);
        }
        
        public System.Threading.Tasks.Task<string> SearchCurrentActiveRoleByUserNameAsync(string UserName, int ApplicationId)
        {
            return base.Channel.SearchCurrentActiveRoleByUserNameAsync(UserName, ApplicationId);
        }
        
        public string GetSingleAksesRole(int RoleId, int ApplicationId)
        {
            return base.Channel.GetSingleAksesRole(RoleId, ApplicationId);
        }
        
        public System.Threading.Tasks.Task<string> GetSingleAksesRoleAsync(int RoleId, int ApplicationId)
        {
            return base.Channel.GetSingleAksesRoleAsync(RoleId, ApplicationId);
        }
        
        public string GetAksesRoleChildren(int RoleId, int ApplicationId)
        {
            return base.Channel.GetAksesRoleChildren(RoleId, ApplicationId);
        }
        
        public System.Threading.Tasks.Task<string> GetAksesRoleChildrenAsync(int RoleId, int ApplicationId)
        {
            return base.Channel.GetAksesRoleChildrenAsync(RoleId, ApplicationId);
        }
        
        public string GetApplicationRole(int ApplicationId)
        {
            return base.Channel.GetApplicationRole(ApplicationId);
        }
        
        public System.Threading.Tasks.Task<string> GetApplicationRoleAsync(int ApplicationId)
        {
            return base.Channel.GetApplicationRoleAsync(ApplicationId);
        }
        
        public string GetRoleChildren(int pParentRoleId, int pApplicationId)
        {
            return base.Channel.GetRoleChildren(pParentRoleId, pApplicationId);
        }
        
        public System.Threading.Tasks.Task<string> GetRoleChildrenAsync(int pParentRoleId, int pApplicationId)
        {
            return base.Channel.GetRoleChildrenAsync(pParentRoleId, pApplicationId);
        }
        
        public string GetUserRoleOnApplication(int UserId, int ApplicationId)
        {
            return base.Channel.GetUserRoleOnApplication(UserId, ApplicationId);
        }
        
        public System.Threading.Tasks.Task<string> GetUserRoleOnApplicationAsync(int UserId, int ApplicationId)
        {
            return base.Channel.GetUserRoleOnApplicationAsync(UserId, ApplicationId);
        }
        
        public bool AllEntitiesAccess(int RoleId)
        {
            return base.Channel.AllEntitiesAccess(RoleId);
        }
        
        public System.Threading.Tasks.Task<bool> AllEntitiesAccessAsync(int RoleId)
        {
            return base.Channel.AllEntitiesAccessAsync(RoleId);
        }
        
        public bool DeleteUserExt(string xmlAksesUser, string uName, int appId, int pRoleId)
        {
            return base.Channel.DeleteUserExt(xmlAksesUser, uName, appId, pRoleId);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteUserExtAsync(string xmlAksesUser, string uName, int appId, int pRoleId)
        {
            return base.Channel.DeleteUserExtAsync(xmlAksesUser, uName, appId, pRoleId);
        }
        
        public int SearchUserIdByName(string Username)
        {
            return base.Channel.SearchUserIdByName(Username);
        }
        
        public System.Threading.Tasks.Task<int> SearchUserIdByNameAsync(string Username)
        {
            return base.Channel.SearchUserIdByNameAsync(Username);
        }
        
        public string GetSingleAksesUser1(int UserId)
        {
            return base.Channel.GetSingleAksesUser1(UserId);
        }
        
        public System.Threading.Tasks.Task<string> GetSingleAksesUser1Async(int UserId)
        {
            return base.Channel.GetSingleAksesUser1Async(UserId);
        }
        
        public string GetSingleAksesUser2(string Username, string Password)
        {
            return base.Channel.GetSingleAksesUser2(Username, Password);
        }
        
        public System.Threading.Tasks.Task<string> GetSingleAksesUser2Async(string Username, string Password)
        {
            return base.Channel.GetSingleAksesUser2Async(Username, Password);
        }
        
        public string GetIntUserList(string IdNumber, string NamaPengguna, int OrganizationId, int ActiveFlag)
        {
            return base.Channel.GetIntUserList(IdNumber, NamaPengguna, OrganizationId, ActiveFlag);
        }
        
        public System.Threading.Tasks.Task<string> GetIntUserListAsync(string IdNumber, string NamaPengguna, int OrganizationId, int ActiveFlag)
        {
            return base.Channel.GetIntUserListAsync(IdNumber, NamaPengguna, OrganizationId, ActiveFlag);
        }
        
        public string GetExtUserList(string IdNumber, string NamaPengguna, string EntityName, int ActiveFlag)
        {
            return base.Channel.GetExtUserList(IdNumber, NamaPengguna, EntityName, ActiveFlag);
        }
        
        public System.Threading.Tasks.Task<string> GetExtUserListAsync(string IdNumber, string NamaPengguna, string EntityName, int ActiveFlag)
        {
            return base.Channel.GetExtUserListAsync(IdNumber, NamaPengguna, EntityName, ActiveFlag);
        }
        
        public bool IsAuthenticated(string Username, string Password, int ApplicationId)
        {
            return base.Channel.IsAuthenticated(Username, Password, ApplicationId);
        }
        
        public System.Threading.Tasks.Task<bool> IsAuthenticatedAsync(string Username, string Password, int ApplicationId)
        {
            return base.Channel.IsAuthenticatedAsync(Username, Password, ApplicationId);
        }
        
        public string Activation(string EncPassword, string Bogus, string Sugob)
        {
            return base.Channel.Activation(EncPassword, Bogus, Sugob);
        }
        
        public System.Threading.Tasks.Task<string> ActivationAsync(string EncPassword, string Bogus, string Sugob)
        {
            return base.Channel.ActivationAsync(EncPassword, Bogus, Sugob);
        }
        
        public bool ActivationUserExt(string xmlAksesUser, int ApplicationId)
        {
            return base.Channel.ActivationUserExt(xmlAksesUser, ApplicationId);
        }
        
        public System.Threading.Tasks.Task<bool> ActivationUserExtAsync(string xmlAksesUser, int ApplicationId)
        {
            return base.Channel.ActivationUserExtAsync(xmlAksesUser, ApplicationId);
        }
        
        public string ChangePassword(string oldPassword, string newPassword, int userId)
        {
            return base.Channel.ChangePassword(oldPassword, newPassword, userId);
        }
        
        public System.Threading.Tasks.Task<string> ChangePasswordAsync(string oldPassword, string newPassword, int userId)
        {
            return base.Channel.ChangePasswordAsync(oldPassword, newPassword, userId);
        }
        
        public string RequestResetPassword(string resetMenuUrl, string emailAddr)
        {
            return base.Channel.RequestResetPassword(resetMenuUrl, emailAddr);
        }
        
        public System.Threading.Tasks.Task<string> RequestResetPasswordAsync(string resetMenuUrl, string emailAddr)
        {
            return base.Channel.RequestResetPasswordAsync(resetMenuUrl, emailAddr);
        }
        
        public string ResetPassword(string encNewPassword, string bogus, string sugob)
        {
            return base.Channel.ResetPassword(encNewPassword, bogus, sugob);
        }
        
        public System.Threading.Tasks.Task<string> ResetPasswordAsync(string encNewPassword, string bogus, string sugob)
        {
            return base.Channel.ResetPasswordAsync(encNewPassword, bogus, sugob);
        }
        
        public string AddUserExt(string xmlAksesUser, string uName, int appId, int roleId, int entityId)
        {
            return base.Channel.AddUserExt(xmlAksesUser, uName, appId, roleId, entityId);
        }
        
        public System.Threading.Tasks.Task<string> AddUserExtAsync(string xmlAksesUser, string uName, int appId, int roleId, int entityId)
        {
            return base.Channel.AddUserExtAsync(xmlAksesUser, uName, appId, roleId, entityId);
        }
        
        public bool AddUserApplication(string pEmail, string uName, int appId, int roleId)
        {
            return base.Channel.AddUserApplication(pEmail, uName, appId, roleId);
        }
        
        public System.Threading.Tasks.Task<bool> AddUserApplicationAsync(string pEmail, string uName, int appId, int roleId)
        {
            return base.Channel.AddUserApplicationAsync(pEmail, uName, appId, roleId);
        }
        
        public string GetROUnderUserId(int pAppId, string pEntityCode, string pRORoleCode, int pUserId)
        {
            return base.Channel.GetROUnderUserId(pAppId, pEntityCode, pRORoleCode, pUserId);
        }
        
        public System.Threading.Tasks.Task<string> GetROUnderUserIdAsync(int pAppId, string pEntityCode, string pRORoleCode, int pUserId)
        {
            return base.Channel.GetROUnderUserIdAsync(pAppId, pEntityCode, pRORoleCode, pUserId);
        }
        
        public string GetROUnderUserIdByEntityId(int pAppId, int EntityId, string pRORoleCode, int pUserId)
        {
            return base.Channel.GetROUnderUserIdByEntityId(pAppId, EntityId, pRORoleCode, pUserId);
        }
        
        public System.Threading.Tasks.Task<string> GetROUnderUserIdByEntityIdAsync(int pAppId, int EntityId, string pRORoleCode, int pUserId)
        {
            return base.Channel.GetROUnderUserIdByEntityIdAsync(pAppId, EntityId, pRORoleCode, pUserId);
        }
        
        public bool updateUser(string xmlAksesUser)
        {
            return base.Channel.updateUser(xmlAksesUser);
        }
        
        public System.Threading.Tasks.Task<bool> updateUserAsync(string xmlAksesUser)
        {
            return base.Channel.updateUserAsync(xmlAksesUser);
        }
        
        public string GetSingleAksesUserApplication(int UserId, int ApplicationId, int RoleId)
        {
            return base.Channel.GetSingleAksesUserApplication(UserId, ApplicationId, RoleId);
        }
        
        public System.Threading.Tasks.Task<string> GetSingleAksesUserApplicationAsync(int UserId, int ApplicationId, int RoleId)
        {
            return base.Channel.GetSingleAksesUserApplicationAsync(UserId, ApplicationId, RoleId);
        }
        
        public string GetUserIdInUserApplication(int ApplicationId)
        {
            return base.Channel.GetUserIdInUserApplication(ApplicationId);
        }
        
        public System.Threading.Tasks.Task<string> GetUserIdInUserApplicationAsync(int ApplicationId)
        {
            return base.Channel.GetUserIdInUserApplicationAsync(ApplicationId);
        }
        
        public string GetUserRoleIdOnApplication(int UserId, int ApplicationId)
        {
            return base.Channel.GetUserRoleIdOnApplication(UserId, ApplicationId);
        }
        
        public System.Threading.Tasks.Task<string> GetUserRoleIdOnApplicationAsync(int UserId, int ApplicationId)
        {
            return base.Channel.GetUserRoleIdOnApplicationAsync(UserId, ApplicationId);
        }
        
        public bool IsApplicationAccessGranted(int UserID, int ApplicationId)
        {
            return base.Channel.IsApplicationAccessGranted(UserID, ApplicationId);
        }
        
        public System.Threading.Tasks.Task<bool> IsApplicationAccessGrantedAsync(int UserID, int ApplicationId)
        {
            return base.Channel.IsApplicationAccessGrantedAsync(UserID, ApplicationId);
        }
        
        public string GetSingleApplication(int ApplicationId)
        {
            return base.Channel.GetSingleApplication(ApplicationId);
        }
        
        public System.Threading.Tasks.Task<string> GetSingleApplicationAsync(int ApplicationId)
        {
            return base.Channel.GetSingleApplicationAsync(ApplicationId);
        }
        
        public string GetApplicationList(int userId)
        {
            return base.Channel.GetApplicationList(userId);
        }
        
        public System.Threading.Tasks.Task<string> GetApplicationListAsync(int userId)
        {
            return base.Channel.GetApplicationListAsync(userId);
        }
        
        public string GetAuthorizedApplicationList(int UserId)
        {
            return base.Channel.GetAuthorizedApplicationList(UserId);
        }
        
        public System.Threading.Tasks.Task<string> GetAuthorizedApplicationListAsync(int UserId)
        {
            return base.Channel.GetAuthorizedApplicationListAsync(UserId);
        }
        
        public string GetApplicationOrganizationList()
        {
            return base.Channel.GetApplicationOrganizationList();
        }
        
        public System.Threading.Tasks.Task<string> GetApplicationOrganizationListAsync()
        {
            return base.Channel.GetApplicationOrganizationListAsync();
        }
        
        public string GetOrganizationName(int OrganizationId)
        {
            return base.Channel.GetOrganizationName(OrganizationId);
        }
        
        public System.Threading.Tasks.Task<string> GetOrganizationNameAsync(int OrganizationId)
        {
            return base.Channel.GetOrganizationNameAsync(OrganizationId);
        }
        
        public string GetListOfOrganizationByLevel(int OrganizationLevel)
        {
            return base.Channel.GetListOfOrganizationByLevel(OrganizationLevel);
        }
        
        public System.Threading.Tasks.Task<string> GetListOfOrganizationByLevelAsync(int OrganizationLevel)
        {
            return base.Channel.GetListOfOrganizationByLevelAsync(OrganizationLevel);
        }
        
        public string GetSectorList(int ApplicationId)
        {
            return base.Channel.GetSectorList(ApplicationId);
        }
        
        public System.Threading.Tasks.Task<string> GetSectorListAsync(int ApplicationId)
        {
            return base.Channel.GetSectorListAsync(ApplicationId);
        }
        
        public string GetSectorCode(int SectorId)
        {
            return base.Channel.GetSectorCode(SectorId);
        }
        
        public System.Threading.Tasks.Task<string> GetSectorCodeAsync(int SectorId)
        {
            return base.Channel.GetSectorCodeAsync(SectorId);
        }
        
        public int GetSectorId(string SectorCode)
        {
            return base.Channel.GetSectorId(SectorCode);
        }
        
        public System.Threading.Tasks.Task<int> GetSectorIdAsync(string SectorCode)
        {
            return base.Channel.GetSectorIdAsync(SectorCode);
        }
        
        public string GetSectorNameByCode(string SectorCode)
        {
            return base.Channel.GetSectorNameByCode(SectorCode);
        }
        
        public System.Threading.Tasks.Task<string> GetSectorNameByCodeAsync(string SectorCode)
        {
            return base.Channel.GetSectorNameByCodeAsync(SectorCode);
        }
        
        public string GetParentSector(string sectorCode)
        {
            return base.Channel.GetParentSector(sectorCode);
        }
        
        public System.Threading.Tasks.Task<string> GetParentSectorAsync(string sectorCode)
        {
            return base.Channel.GetParentSectorAsync(sectorCode);
        }
        
        public string GetSingleSystemMessage(string MessageCode)
        {
            return base.Channel.GetSingleSystemMessage(MessageCode);
        }
        
        public System.Threading.Tasks.Task<string> GetSingleSystemMessageAsync(string MessageCode)
        {
            return base.Channel.GetSingleSystemMessageAsync(MessageCode);
        }
        
        public string GetSystemMessageList(string codeKeyword)
        {
            return base.Channel.GetSystemMessageList(codeKeyword);
        }
        
        public System.Threading.Tasks.Task<string> GetSystemMessageListAsync(string codeKeyword)
        {
            return base.Channel.GetSystemMessageListAsync(codeKeyword);
        }
        
        public string GetUserSector(int UserId)
        {
            return base.Channel.GetUserSector(UserId);
        }
        
        public System.Threading.Tasks.Task<string> GetUserSectorAsync(int UserId)
        {
            return base.Channel.GetUserSectorAsync(UserId);
        }
        
        public bool EntityCheckOnUserSector(int UserId, string EntityCode)
        {
            return base.Channel.EntityCheckOnUserSector(UserId, EntityCode);
        }
        
        public System.Threading.Tasks.Task<bool> EntityCheckOnUserSectorAsync(int UserId, string EntityCode)
        {
            return base.Channel.EntityCheckOnUserSectorAsync(UserId, EntityCode);
        }
        
        public bool EntityCheckOnUserSectorInactiveIncluded(int UserId, string EntityCode)
        {
            return base.Channel.EntityCheckOnUserSectorInactiveIncluded(UserId, EntityCode);
        }
        
        public System.Threading.Tasks.Task<bool> EntityCheckOnUserSectorInactiveIncludedAsync(int UserId, string EntityCode)
        {
            return base.Channel.EntityCheckOnUserSectorInactiveIncludedAsync(UserId, EntityCode);
        }
        
        public string GetSingleSystemParamGen(string ParamGenCode)
        {
            return base.Channel.GetSingleSystemParamGen(ParamGenCode);
        }
        
        public System.Threading.Tasks.Task<string> GetSingleSystemParamGenAsync(string ParamGenCode)
        {
            return base.Channel.GetSingleSystemParamGenAsync(ParamGenCode);
        }
        
        public string GetRoleMenu(int RoleId)
        {
            return base.Channel.GetRoleMenu(RoleId);
        }
        
        public System.Threading.Tasks.Task<string> GetRoleMenuAsync(int RoleId)
        {
            return base.Channel.GetRoleMenuAsync(RoleId);
        }
        
        public string GetRoleIdInRoleMenu(int MenuId)
        {
            return base.Channel.GetRoleIdInRoleMenu(MenuId);
        }
        
        public System.Threading.Tasks.Task<string> GetRoleIdInRoleMenuAsync(int MenuId)
        {
            return base.Channel.GetRoleIdInRoleMenuAsync(MenuId);
        }
        
        public string GetMenuGrantAccess(string menuUrl, int roleId, int appId)
        {
            return base.Channel.GetMenuGrantAccess(menuUrl, roleId, appId);
        }
        
        public System.Threading.Tasks.Task<string> GetMenuGrantAccessAsync(string menuUrl, int roleId, int appId)
        {
            return base.Channel.GetMenuGrantAccessAsync(menuUrl, roleId, appId);
        }
        
        public string GetSectorIdInApplicationSector(int ApplicationId)
        {
            return base.Channel.GetSectorIdInApplicationSector(ApplicationId);
        }
        
        public System.Threading.Tasks.Task<string> GetSectorIdInApplicationSectorAsync(int ApplicationId)
        {
            return base.Channel.GetSectorIdInApplicationSectorAsync(ApplicationId);
        }
        
        public string GetEntity(int UserId, int ApplicationId, int RowsTaken)
        {
            return base.Channel.GetEntity(UserId, ApplicationId, RowsTaken);
        }
        
        public System.Threading.Tasks.Task<string> GetEntityAsync(int UserId, int ApplicationId, int RowsTaken)
        {
            return base.Channel.GetEntityAsync(UserId, ApplicationId, RowsTaken);
        }
        
        public string GenerateMenuAuth(int RoleId)
        {
            return base.Channel.GenerateMenuAuth(RoleId);
        }
        
        public System.Threading.Tasks.Task<string> GenerateMenuAuthAsync(int RoleId)
        {
            return base.Channel.GenerateMenuAuthAsync(RoleId);
        }
        
        public bool EntityCheckOnUserEntity(int UserId, string EntityCode)
        {
            return base.Channel.EntityCheckOnUserEntity(UserId, EntityCode);
        }
        
        public System.Threading.Tasks.Task<bool> EntityCheckOnUserEntityAsync(int UserId, string EntityCode)
        {
            return base.Channel.EntityCheckOnUserEntityAsync(UserId, EntityCode);
        }
        
        public string GetUserEntity(int EntityId)
        {
            return base.Channel.GetUserEntity(EntityId);
        }
        
        public System.Threading.Tasks.Task<string> GetUserEntityAsync(int EntityId)
        {
            return base.Channel.GetUserEntityAsync(EntityId);
        }
        
        public string GetUserEntityByOrganization(int EntityId)
        {
            return base.Channel.GetUserEntityByOrganization(EntityId);
        }
        
        public System.Threading.Tasks.Task<string> GetUserEntityByOrganizationAsync(int EntityId)
        {
            return base.Channel.GetUserEntityByOrganizationAsync(EntityId);
        }
        
        public bool EntityCheckOnOrganizationEntity(int OrganizationId, string EntityCode)
        {
            return base.Channel.EntityCheckOnOrganizationEntity(OrganizationId, EntityCode);
        }
        
        public System.Threading.Tasks.Task<bool> EntityCheckOnOrganizationEntityAsync(int OrganizationId, string EntityCode)
        {
            return base.Channel.EntityCheckOnOrganizationEntityAsync(OrganizationId, EntityCode);
        }
        
        public string GetListOfEnumerate(string EnumerateParentCode)
        {
            return base.Channel.GetListOfEnumerate(EnumerateParentCode);
        }
        
        public System.Threading.Tasks.Task<string> GetListOfEnumerateAsync(string EnumerateParentCode)
        {
            return base.Channel.GetListOfEnumerateAsync(EnumerateParentCode);
        }
        
        public string GetSingleCustomLogUserActivity(int UserId, int ApplicationId)
        {
            return base.Channel.GetSingleCustomLogUserActivity(UserId, ApplicationId);
        }
        
        public System.Threading.Tasks.Task<string> GetSingleCustomLogUserActivityAsync(int UserId, int ApplicationId)
        {
            return base.Channel.GetSingleCustomLogUserActivityAsync(UserId, ApplicationId);
        }
        
        public string GetUserAppRole(int UserId)
        {
            return base.Channel.GetUserAppRole(UserId);
        }
        
        public System.Threading.Tasks.Task<string> GetUserAppRoleAsync(int UserId)
        {
            return base.Channel.GetUserAppRoleAsync(UserId);
        }
        
        public string GetUserOrg(int UserId)
        {
            return base.Channel.GetUserOrg(UserId);
        }
        
        public System.Threading.Tasks.Task<string> GetUserOrgAsync(int UserId)
        {
            return base.Channel.GetUserOrgAsync(UserId);
        }
        
        public string GetOrganizationbyUserId(int userId)
        {
            return base.Channel.GetOrganizationbyUserId(userId);
        }
        
        public System.Threading.Tasks.Task<string> GetOrganizationbyUserIdAsync(int userId)
        {
            return base.Channel.GetOrganizationbyUserIdAsync(userId);
        }
        
        public string GetListOfDati1(System.DateTime EffectiveDate)
        {
            return base.Channel.GetListOfDati1(EffectiveDate);
        }
        
        public System.Threading.Tasks.Task<string> GetListOfDati1Async(System.DateTime EffectiveDate)
        {
            return base.Channel.GetListOfDati1Async(EffectiveDate);
        }
        
        public string GetSingleDati1(string LocationCode, System.DateTime EffectiveDate)
        {
            return base.Channel.GetSingleDati1(LocationCode, EffectiveDate);
        }
        
        public System.Threading.Tasks.Task<string> GetSingleDati1Async(string LocationCode, System.DateTime EffectiveDate)
        {
            return base.Channel.GetSingleDati1Async(LocationCode, EffectiveDate);
        }
        
        public string GetListOfDati2(System.DateTime EffectiveDate, string ParentLocationCode)
        {
            return base.Channel.GetListOfDati2(EffectiveDate, ParentLocationCode);
        }
        
        public System.Threading.Tasks.Task<string> GetListOfDati2Async(System.DateTime EffectiveDate, string ParentLocationCode)
        {
            return base.Channel.GetListOfDati2Async(EffectiveDate, ParentLocationCode);
        }
        
        public string GetSingleDati2(string LocationCode, System.DateTime EffectiveDate)
        {
            return base.Channel.GetSingleDati2(LocationCode, EffectiveDate);
        }
        
        public System.Threading.Tasks.Task<string> GetSingleDati2Async(string LocationCode, System.DateTime EffectiveDate)
        {
            return base.Channel.GetSingleDati2Async(LocationCode, EffectiveDate);
        }
        
        public string GetLocationNameByCode(string LocationCode)
        {
            return base.Channel.GetLocationNameByCode(LocationCode);
        }
        
        public System.Threading.Tasks.Task<string> GetLocationNameByCodeAsync(string LocationCode)
        {
            return base.Channel.GetLocationNameByCodeAsync(LocationCode);
        }
        
        public int GetNewMessageCount(string userName)
        {
            return base.Channel.GetNewMessageCount(userName);
        }
        
        public System.Threading.Tasks.Task<int> GetNewMessageCountAsync(string userName)
        {
            return base.Channel.GetNewMessageCountAsync(userName);
        }
        
        public string GetTopMessage(string userName)
        {
            return base.Channel.GetTopMessage(userName);
        }
        
        public System.Threading.Tasks.Task<string> GetTopMessageAsync(string userName)
        {
            return base.Channel.GetTopMessageAsync(userName);
        }
        
        public string GetMessage(string uName, string keyword, int pIndex, int RowsTaken)
        {
            return base.Channel.GetMessage(uName, keyword, pIndex, RowsTaken);
        }
        
        public System.Threading.Tasks.Task<string> GetMessageAsync(string uName, string keyword, int pIndex, int RowsTaken)
        {
            return base.Channel.GetMessageAsync(uName, keyword, pIndex, RowsTaken);
        }
        
        public string GetSentItems(string uName, string keyword, int pIndex, int RowsTaken)
        {
            return base.Channel.GetSentItems(uName, keyword, pIndex, RowsTaken);
        }
        
        public System.Threading.Tasks.Task<string> GetSentItemsAsync(string uName, string keyword, int pIndex, int RowsTaken)
        {
            return base.Channel.GetSentItemsAsync(uName, keyword, pIndex, RowsTaken);
        }
        
        public string GetSingleMessage(int messageId)
        {
            return base.Channel.GetSingleMessage(messageId);
        }
        
        public System.Threading.Tasks.Task<string> GetSingleMessageAsync(int messageId)
        {
            return base.Channel.GetSingleMessageAsync(messageId);
        }
        
        public bool UpdateReadStatusMessage(int messageId)
        {
            return base.Channel.UpdateReadStatusMessage(messageId);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateReadStatusMessageAsync(int messageId)
        {
            return base.Channel.UpdateReadStatusMessageAsync(messageId);
        }
        
        public int CreateMessage(string xmlUserMessage)
        {
            return base.Channel.CreateMessage(xmlUserMessage);
        }
        
        public System.Threading.Tasks.Task<int> CreateMessageAsync(string xmlUserMessage)
        {
            return base.Channel.CreateMessageAsync(xmlUserMessage);
        }
        
        public bool DeleteInbox(int msgId)
        {
            return base.Channel.DeleteInbox(msgId);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteInboxAsync(int msgId)
        {
            return base.Channel.DeleteInboxAsync(msgId);
        }
        
        public bool DeleteSentItem(int msgId)
        {
            return base.Channel.DeleteSentItem(msgId);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteSentItemAsync(int msgId)
        {
            return base.Channel.DeleteSentItemAsync(msgId);
        }
        
        public string GetMessageAttachment(int msgId)
        {
            return base.Channel.GetMessageAttachment(msgId);
        }
        
        public System.Threading.Tasks.Task<string> GetMessageAttachmentAsync(int msgId)
        {
            return base.Channel.GetMessageAttachmentAsync(msgId);
        }
        
        public bool UpdateMessageAttachment(string fileBase64String, int[] messageId)
        {
            return base.Channel.UpdateMessageAttachment(fileBase64String, messageId);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateMessageAttachmentAsync(string fileBase64String, int[] messageId)
        {
            return base.Channel.UpdateMessageAttachmentAsync(fileBase64String, messageId);
        }
        
        public string GetTopAnnouncement(int appId, string grantedFor)
        {
            return base.Channel.GetTopAnnouncement(appId, grantedFor);
        }
        
        public System.Threading.Tasks.Task<string> GetTopAnnouncementAsync(int appId, string grantedFor)
        {
            return base.Channel.GetTopAnnouncementAsync(appId, grantedFor);
        }
        
        public string GetTopAnnouncementByAppId(int appId)
        {
            return base.Channel.GetTopAnnouncementByAppId(appId);
        }
        
        public System.Threading.Tasks.Task<string> GetTopAnnouncementByAppIdAsync(int appId)
        {
            return base.Channel.GetTopAnnouncementByAppIdAsync(appId);
        }
        
        public string GetTopAnnouncementForChannelId(int appId, int channelId, string grantedFor)
        {
            return base.Channel.GetTopAnnouncementForChannelId(appId, channelId, grantedFor);
        }
        
        public System.Threading.Tasks.Task<string> GetTopAnnouncementForChannelIdAsync(int appId, int channelId, string grantedFor)
        {
            return base.Channel.GetTopAnnouncementForChannelIdAsync(appId, channelId, grantedFor);
        }
        
        public string GetTopAnnouncementForChannelIdByAppId(int appId, int channelId)
        {
            return base.Channel.GetTopAnnouncementForChannelIdByAppId(appId, channelId);
        }
        
        public System.Threading.Tasks.Task<string> GetTopAnnouncementForChannelIdByAppIdAsync(int appId, int channelId)
        {
            return base.Channel.GetTopAnnouncementForChannelIdByAppIdAsync(appId, channelId);
        }
        
        public string GetSingleAnnouncement(int announcementId)
        {
            return base.Channel.GetSingleAnnouncement(announcementId);
        }
        
        public System.Threading.Tasks.Task<string> GetSingleAnnouncementAsync(int announcementId)
        {
            return base.Channel.GetSingleAnnouncementAsync(announcementId);
        }
        
        public string GetAllAnnouncement(string search, int appId, string grantedFor)
        {
            return base.Channel.GetAllAnnouncement(search, appId, grantedFor);
        }
        
        public System.Threading.Tasks.Task<string> GetAllAnnouncementAsync(string search, int appId, string grantedFor)
        {
            return base.Channel.GetAllAnnouncementAsync(search, appId, grantedFor);
        }
        
        public string GetAllAnnouncementByAppId(string search, int appId)
        {
            return base.Channel.GetAllAnnouncementByAppId(search, appId);
        }
        
        public System.Threading.Tasks.Task<string> GetAllAnnouncementByAppIdAsync(string search, int appId)
        {
            return base.Channel.GetAllAnnouncementByAppIdAsync(search, appId);
        }
        
        public string GetAllAnnouncementForChannelId(string search, int appId, int channelId, string grantedFor)
        {
            return base.Channel.GetAllAnnouncementForChannelId(search, appId, channelId, grantedFor);
        }
        
        public System.Threading.Tasks.Task<string> GetAllAnnouncementForChannelIdAsync(string search, int appId, int channelId, string grantedFor)
        {
            return base.Channel.GetAllAnnouncementForChannelIdAsync(search, appId, channelId, grantedFor);
        }
        
        public string GetAllAnnouncementForChannelIdByAppId(string search, int appId, int channelId)
        {
            return base.Channel.GetAllAnnouncementForChannelIdByAppId(search, appId, channelId);
        }
        
        public System.Threading.Tasks.Task<string> GetAllAnnouncementForChannelIdByAppIdAsync(string search, int appId, int channelId)
        {
            return base.Channel.GetAllAnnouncementForChannelIdByAppIdAsync(search, appId, channelId);
        }
        
        public string GetAnotherAnnouncement(int exceptId, int appId, string grantedFor)
        {
            return base.Channel.GetAnotherAnnouncement(exceptId, appId, grantedFor);
        }
        
        public System.Threading.Tasks.Task<string> GetAnotherAnnouncementAsync(int exceptId, int appId, string grantedFor)
        {
            return base.Channel.GetAnotherAnnouncementAsync(exceptId, appId, grantedFor);
        }
        
        public string GetAnotherAnnouncementByAppId(int exceptId, int appId)
        {
            return base.Channel.GetAnotherAnnouncementByAppId(exceptId, appId);
        }
        
        public System.Threading.Tasks.Task<string> GetAnotherAnnouncementByAppIdAsync(int exceptId, int appId)
        {
            return base.Channel.GetAnotherAnnouncementByAppIdAsync(exceptId, appId);
        }
        
        public string GetAnotherAnnouncementForChannelId(int exceptId, int appId, int channelId, string grantedFor)
        {
            return base.Channel.GetAnotherAnnouncementForChannelId(exceptId, appId, channelId, grantedFor);
        }
        
        public System.Threading.Tasks.Task<string> GetAnotherAnnouncementForChannelIdAsync(int exceptId, int appId, int channelId, string grantedFor)
        {
            return base.Channel.GetAnotherAnnouncementForChannelIdAsync(exceptId, appId, channelId, grantedFor);
        }
        
        public string GetAnotherAnnouncementForChannelIdByAppId(int exceptId, int appId, int channelId)
        {
            return base.Channel.GetAnotherAnnouncementForChannelIdByAppId(exceptId, appId, channelId);
        }
        
        public System.Threading.Tasks.Task<string> GetAnotherAnnouncementForChannelIdByAppIdAsync(int exceptId, int appId, int channelId)
        {
            return base.Channel.GetAnotherAnnouncementForChannelIdByAppIdAsync(exceptId, appId, channelId);
        }
        
        public string GetAnnouncementAttachment(int announcementId)
        {
            return base.Channel.GetAnnouncementAttachment(announcementId);
        }
        
        public System.Threading.Tasks.Task<string> GetAnnouncementAttachmentAsync(int announcementId)
        {
            return base.Channel.GetAnnouncementAttachmentAsync(announcementId);
        }
        
        public string GetTopLevelEconomicSector()
        {
            return base.Channel.GetTopLevelEconomicSector();
        }
        
        public System.Threading.Tasks.Task<string> GetTopLevelEconomicSectorAsync()
        {
            return base.Channel.GetTopLevelEconomicSectorAsync();
        }
        
        public string GetEconomicSector(string parentCode)
        {
            return base.Channel.GetEconomicSector(parentCode);
        }
        
        public System.Threading.Tasks.Task<string> GetEconomicSectorAsync(string parentCode)
        {
            return base.Channel.GetEconomicSectorAsync(parentCode);
        }
        
        public string GetWilayahKerjaOJK(int organizationId)
        {
            return base.Channel.GetWilayahKerjaOJK(organizationId);
        }
        
        public System.Threading.Tasks.Task<string> GetWilayahKerjaOJKAsync(int organizationId)
        {
            return base.Channel.GetWilayahKerjaOJKAsync(organizationId);
        }
        
        public string GetOrganizationHasWK()
        {
            return base.Channel.GetOrganizationHasWK();
        }
        
        public System.Threading.Tasks.Task<string> GetOrganizationHasWKAsync()
        {
            return base.Channel.GetOrganizationHasWKAsync();
        }
        
        public string GetWilayahKerjaOJKbyEntity(int entityId)
        {
            return base.Channel.GetWilayahKerjaOJKbyEntity(entityId);
        }
        
        public System.Threading.Tasks.Task<string> GetWilayahKerjaOJKbyEntityAsync(int entityId)
        {
            return base.Channel.GetWilayahKerjaOJKbyEntityAsync(entityId);
        }
        
        public string GetUserUnderEntityInAllBPRKS(string token)
        {
            return base.Channel.GetUserUnderEntityInAllBPRKS(token);
        }
        
        public System.Threading.Tasks.Task<string> GetUserUnderEntityInAllBPRKSAsync(string token)
        {
            return base.Channel.GetUserUnderEntityInAllBPRKSAsync(token);
        }
        
        public string GetUserUnderEntityInAllBUS(string token)
        {
            return base.Channel.GetUserUnderEntityInAllBUS(token);
        }
        
        public System.Threading.Tasks.Task<string> GetUserUnderEntityInAllBUSAsync(string token)
        {
            return base.Channel.GetUserUnderEntityInAllBUSAsync(token);
        }
        
        public string GetUserUnderEntitySector(string token, string[] sector)
        {
            return base.Channel.GetUserUnderEntitySector(token, sector);
        }
        
        public System.Threading.Tasks.Task<string> GetUserUnderEntitySectorAsync(string token, string[] sector)
        {
            return base.Channel.GetUserUnderEntitySectorAsync(token, sector);
        }
        
        public int GetWorkingDays(System.DateTime pStartDate, System.DateTime pEndDate)
        {
            return base.Channel.GetWorkingDays(pStartDate, pEndDate);
        }
        
        public System.Threading.Tasks.Task<int> GetWorkingDaysAsync(System.DateTime pStartDate, System.DateTime pEndDate)
        {
            return base.Channel.GetWorkingDaysAsync(pStartDate, pEndDate);
        }
        
        public bool IsHoliday(System.DateTime pDate)
        {
            return base.Channel.IsHoliday(pDate);
        }
        
        public System.Threading.Tasks.Task<bool> IsHolidayAsync(System.DateTime pDate)
        {
            return base.Channel.IsHolidayAsync(pDate);
        }
        
        public string GetHolidays(System.DateTime pStartDate, System.DateTime pEndDate)
        {
            return base.Channel.GetHolidays(pStartDate, pEndDate);
        }
        
        public System.Threading.Tasks.Task<string> GetHolidaysAsync(System.DateTime pStartDate, System.DateTime pEndDate)
        {
            return base.Channel.GetHolidaysAsync(pStartDate, pEndDate);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_ICAMService))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_ICAMService))
            {
                return new System.ServiceModel.EndpointAddress("http://10.210.240.18:8888/CAMService.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return CAMServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_ICAMService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return CAMServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_ICAMService);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_ICAMService,
        }
    }
}
