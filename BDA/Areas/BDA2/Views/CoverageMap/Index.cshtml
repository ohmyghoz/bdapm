@using DevExtreme.AspNet.Mvc
@{
    Layout = "~/Views/Shared/_LayoutMainMetronic.cshtml";
    var maxItems = db.GetSetting("LimitFilterLJK");
    bool isExport = ViewBag.Export;
    string reportId = ViewBag.id;
    bool isHive = ViewBag.Hive;
    var p = (string[])TempData.Peek("periode");
}

@inject BDA.DataModel.DataEntities db

<style>
    .city {
        font-weight: 500;
    }
</style>
<script>
    window.jsPDF = window.jspdf.jsPDF;
    applyPlugin(window.jsPDF);
</script>

<script type="text/javascript">
    function ExportToExcel() {
        $.ajax({
            type: "POST",
            url: "@Url.Action("LogExportIndex", "CoverageMap", new {reportId = reportId})",
            success: function (response) {
                if (response.result == "Success") {
                    var grid = $("#grid1").dxDataGrid("instance");
                    grid.option("onExporting", function (e) {
                        e.fileName = "CM_@(reportId)_" + new Date().toISOString().slice(0, 10);
                    });
                    grid.option("onFileSaving", function (e) { });
                    grid.exportToExcel();
                }
            }
        });
    }

    function ExportToPdf2() {
        var dataGrid = $("#grid1").dxDataGrid("instance");
        dataGrid.option("onExporting", function (e) { });
        dataGrid.option("onFileSaving", function (e) {
            var fd = new FormData();
            fd.append("file", e.data);
            $.ajax({
                type: "POST",
                url: "@Url.Action("ExportPDF", "CoverageMap", new {reportId = reportId})",
                data: fd,
                processData: false,
                contentType: false
            }).done(function (data) {
                window.location = "@Url.Action("File", "CoverageMap", new {reportId = reportId})"
            });
            e.cancel = true;
        });

        dataGrid.exportToExcel();
    }
    function Antrian() {
        $("#grid1").dxDataGrid("instance").refresh().then(function () {
            $.ajax({
			type: "POST",
			url: "@Url.Action("Antrian", "CoverageMap", new { reportId = reportId })",
			contentType: "application/x-www-form-urlencoded;charset=UTF-8",
            dataType: "json",
            success: function (response) {
                swal({ type: 'success', title: 'Success', text: response });
            },
            error: function (response) {
                swal({ type: 'error', title: 'Failed', text: response });
            }
		    });
        });

    }
    var resetLJK;
    var resetKota;

    $(function () {
        $("#Periode").dxValidator({
            validationGroup: "Filter",
            validationRules: [{ type: "required", message: "[Periode] harus dipilih" }]
        })

    });

    function onSelectionChanged(e) {
        if (e.addedItems.length > 0) {
            e.component.field().val("");
        }
    }

    function onJenisLJKChanged(e) {
        resetLJK = true;
        $("#Members").dxTagBox("instance").getDataSource().reload();
        $("#Members").dxTagBox("reset");
        resetLJK = false;
    }
    function onProvChanged(e) {
        resetLJK = true;
        $("#Kot").dxTagBox("instance").getDataSource().reload();
        $("#Kot").dxTagBox("reset");
        resetKota = false;
    }

    function onButtonFilterClicked(e) {
        const res = e.validationGroup.validate();
        if (res.status === "valid") {
            let memberTypes = $("#MemberTypes").dxTagBox("instance").option("value");
            let members = $("#Members").dxTagBox("instance").option("value");
            let cak = $("#Cak").dxTagBox("instance").option("value");
            let prov = $("#Prov").dxTagBox("instance").option("value");
            let kota = $("#Kot").dxTagBox("instance").option("value");
            let periode = $("#Periode").dxTagBox("instance").option("value");
            $("#grid1").dxDataGrid("instance").refresh();
            const tr = $("#treemap").dxTreeMap("instance");
            $.ajax({
                type: "GET",
                url: "@Url.Action("GetGridData", "CoverageMap")",
                contentType: "application/x-www-form-urlencoded;charset=UTF-8",
                dataType: "json",
                data: {
                    memberTypes: JSON.stringify(memberTypes),
                    members: JSON.stringify(members),
                    cak: JSON.stringify(cak),
                    prov: JSON.stringify(prov),
                    kota: JSON.stringify(kota),
                    periode: JSON.stringify(periode),
                    isChart: true
                },
                success: function (response) {
                    tr.option("dataSource", response.data);
                }
            });

            //$("#treemap").remove();
            //$("#treemap").dxTreeMap("instance").refresh();
        }
    }

    function onGridBeforeSend(method, ajaxOptions) {
        let memberTypes = $("#MemberTypes").dxTagBox("instance").option("value");
        let members = $("#Members").dxTagBox("instance").option("value");
        let cak = $("#Cak").dxTagBox("instance").option("value");
        let prov = $("#Prov").dxTagBox("instance").option("value");
        let kota = $("#Kot").dxTagBox("instance").option("value");
        let periode = $("#Periode").dxTagBox("instance").option("value");
        ajaxOptions.data.memberTypes = JSON.stringify(memberTypes);
        ajaxOptions.data.members = JSON.stringify(members);
        ajaxOptions.data.cak = JSON.stringify(cak);
        ajaxOptions.data.prov = JSON.stringify(prov);
        ajaxOptions.data.kota = JSON.stringify(kota);
        ajaxOptions.data.periode = JSON.stringify(periode);
        ajaxOptions.data.reportId = '@reportId';
    }

    function onLJKOpened(e) {
        e.component.content().find('.dx-list-select-all').hide();
    }

    const maxItems = @maxItems;

    function onLJKChanged(e) {
        if (e.value.length > maxItems) {
            const newValue = e.value.slice(0, maxItems);
            e.component.option("value", newValue);
            //tooltip.show();
        }
    }
</script>

<style type="text/css">
    .mandatory {
        color: red;
    }
</style>

@using (Html.BeginForm())
{
@Html.AntiForgeryToken()

<div class="card card-default">
    @*filter*@
    <div class="row filter-panel" style="padding-top:0px;">
        <div class="card-body">
            <div class="row">
                <div class="col-lg-4 form-group">
                    <label>Periode Pelaporan<span class="mandatory">*</span></label>
                    @(Html.DevExtreme().TagBox()
                            .ID("Periode")
                            .DataSource(d => d.Mvc()
                                .Controller("Ref")
                                .LoadAction("GetPeriode")
                                .Key("value"))
                            .ValueExpr("value")
                            .DisplayExpr("text")
                            .ShowSelectionControls(true)
                            .MaxDisplayedTags(3)
                            .SearchEnabled(true)
                            .ShowClearButton(true)
                            .OnSelectionChanged("onSelectionChanged")
                            .Width("100%")
                            //.Value(p)
                            )

                </div>
                <div class="col-lg-4 form-group">
                    <label>Jenis LJK</label>
                    @(Html.DevExtreme().TagBox()
                            .ID("MemberTypes")
                            .DataSource(d => d.Mvc()
                                .Controller("Ref")
                                .LoadAction("GetMemberTypes")
                                .Key("kode_jenis_ljk"))
                            .DataSourceOptions(d => d.Paginate(true).PageSize(10))
                            .ValueExpr("kode_jenis_ljk")
                            .DisplayExpr("Display")
                            .ShowSelectionControls(true)
                            .MaxDisplayedTags(3)
                            .SearchEnabled(true)
                            .ShowClearButton(true)
                            .OnSelectionChanged("onSelectionChanged")
                            .OnValueChanged("onJenisLJKChanged")
                            .Width("100%"))
                </div>

                <div class="col-lg-4 form-group">
                    <label>Kode LJK</label>
                    @(Html.DevExtreme().TagBox()
                            .ID("Members")
                            .DataSource(d => d.Mvc()
                                .Controller("Ref")
                                .LoadAction("GetMembers")
                                .LoadParams(new { memberTypes = new JS("function() { return $(\"#MemberTypes\").dxTagBox(\"instance\").option(\"value\"); }"), reset = new JS("function() { return resetLJK; }") })
                                //.Key("kode_ljk")
                                .Key("CompositeKey")
                            )
                            .DataSourceOptions(d => d.Paginate(true).PageSize(10))
                            //.ValueExpr("kode_ljk")
                            .ValueExpr("CompositeKey")
                            .DisplayExpr("Display")
                            .ShowSelectionControls(true)
                            .MaxDisplayedTags(3)
                            .SearchEnabled(true)
                            .ShowClearButton(true)
                            .OnSelectionChanged("onSelectionChanged")
                            .OnOpened("onLJKOpened")
                            .OnValueChanged("onLJKChanged")
                            .Width("100%"))
                </div>

                <div class="col-lg-4 form-group">
                    <label>Cakupan</label>
                    @(Html.DevExtreme().TagBox()
                            .ID("Cak")
                            .DataSource(new[] {
                                new { display = "Agunan", value = "Agunan" },
                                new { display = "Debitur Individu", value = "Debitur Individu" },
                                new { display = "Debitur Badan Usaha", value = "Debitur Badan Usaha" },
                                new { display = "Fasilitas Pinjaman", value = "Fasilitas Pinjaman" },
                                new { display = "LJK", value = "LJK" }
                            })
                            .DataSourceOptions(d => d.Paginate(true).PageSize(10))
                            .ValueExpr("value")
                            .DisplayExpr("display")
                            .ShowSelectionControls(true)
                            .MaxDisplayedTags(3)
                            .SearchEnabled(true)
                            .ShowClearButton(true)
                            .OnSelectionChanged("onSelectionChanged")
                            .Width("100%"))
                </div>
                <div class="col-lg-4 form-group">
                    <label>Provinsi</label>
                    @(Html.DevExtreme().TagBox()
                            .ID("Prov")
                            .DataSource(d => d.Mvc()
                                .Controller("Ref")
                                .LoadAction("GetProvinsi")
                                .Key("kode")
                            )
                            //.DataSourceOptions(d => d.Paginate(true).PageSize(10))
                            .ValueExpr("kode")
                            .DisplayExpr("text")
                            .ShowSelectionControls(true)
                            .MaxDisplayedTags(3)
                            .SearchEnabled(true)
                            .ShowClearButton(true)
                            .OnValueChanged("onProvChanged")
                            .Width("100%"))
                </div>
                <div class="col-lg-4 form-group">
                    <label>Kota/Kabupaten</label>
                    @(Html.DevExtreme().TagBox()
                            .ID("Kot")
                            .DataSource(d => d.Mvc()
                                .Controller("Ref")
                                .LoadAction("GetKota")
                                .LoadParams(new { prov = new JS("function() { return $(\"#Prov\").dxTagBox(\"instance\").option(\"value\"); }"), reset = new JS("function() { return resetKota; }") })
                                .Key("kode")
                            )
                            //.DataSourceOptions(d => d.Paginate(true).PageSize(10))
                            .ValueExpr("kode")
                            .DisplayExpr("text")
                            .ShowSelectionControls(true)
                            .MaxDisplayedTags(3)
                            .SearchEnabled(true)
                            .ShowClearButton(true)
                            .Width("100%"))
                </div>
            </div>

            <div class="float-left">
                @(Html.DevExtreme().Button()
                        .ID("Filter")
                        .Type(ButtonType.Default)
                        .Text("Tampilkan")
                        .OnClick("onButtonFilterClicked")
                        .ValidationGroup("Filter"))
            </div>

            <div class="float-right">
                @if (ViewBag.Export)
                {
                    <a class="btn btn-light-primary font-weight-bolder btn-sm mr-2" href="javascript:Antrian();"><span class="image fa fa-file-invoice"></span> Antrian (CSV)</a>
                    <a class="btn btn-light-primary font-weight-bolder btn-sm mr-2" href="javascript:ExportToExcel();"><span class="image fa fa-file-excel"></span> Export Excel</a>
                    <a class="btn btn-light-primary font-weight-bolder btn-sm mr-2" href="javascript:ExportToPdf2();"><span class="image fa fa-file-pdf"></span> Export PDF</a>
                }
            </div>
        </div>
    </div>

    @*grid*@
    <div class="gridview-div">
        @BDA.Helper.BDADXExt.CMDataGrid((Html.DevExtreme().DataGrid()
            .ID("grid1")
            .DataSource(d => d.Mvc()
                .Controller("CoverageMap")
                .LoadAction("GetGridData")
    
                .OnBeforeSend("onGridBeforeSend"))
            .RemoteOperations(true)
            .Width("100%")
            .AllowColumnResizing(true)
            .Scrolling(s => s.ShowScrollbar(ShowScrollbarMode.Always))
            .FilterRow(f => f.Visible(true))
            .ShowBorders(false)
            .Selection(c => c.Mode(SelectionMode.Single))
            .Paging(p =>
            {
                p.PageSize(15);
                p.Enabled(true);
            })
            .Pager(p =>
            {
                p.Visible(true);
                p.ShowInfo(true);
            })
        ), db, reportId, isHive)
    </div>
    @*chart*@
    <div class="gridview-div">
        @(Html.DevExtreme().TreeMap()
                .ID("treemap")
                .DataSource(d => d.Mvc()
                    .Controller("CoverageMap")
                    .LoadAction("GetGridData")
                    .LoadParams(new { isChart = true })
                    .OnBeforeSend("onGridBeforeSend"))
                //.Title("The Most Populated Cities by Continents")
                .IdField("id")
                .Export(e=>e.Enabled(true))
                .HoverEnabled(true)
                .OnExporting(@<text>
                    function(e) {
                        e.fileName = "Treemap_CM_" + new Date().toISOString().slice(0, 10);
                        $.ajax({
                            type: "POST",
                            url: "@Url.Action("LogExportIndex", "CoverageMap", new { reportId = reportId })",
                            success: function (response) {
                                if (response.result == "Success") {

                                }
                            }
                        });
                    }
                </text>)
                .ParentField("parent_id")
                .Tooltip(t => t
                    .Enabled(true)
                    .CustomizeTooltip(@<text>
                        function(arg) {
                            var data = arg.node.data,
                                result = null;

                            if (arg.node.isLeaf()) {
                                @*result =  data.name + " - " + arg.valueText.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");*@
                                return {text: data.name};
                            }
                            return {
                                text: result
                            };
                        }
                    </text>)
                    )

                .Size(s => s.Height(800))
                 )
    </div>

</div>
}