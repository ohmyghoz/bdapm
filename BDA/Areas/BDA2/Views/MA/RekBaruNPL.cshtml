@using DevExtreme.AspNet.Mvc
@{
    Layout = "~/Views/Shared/_LayoutMainMetronic.cshtml";
    var maxItems = db.GetSetting("LimitFilterLJK");
    bool isExport = ViewBag.Export;
    string reportId = ViewBag.id;
    bool isHive = ViewBag.Hive;
    var p = (string)TempData.Peek("periode");
}

@inject BDA.DataModel.DataEntities db


<script>
    window.jsPDF = window.jspdf.jsPDF;
    applyPlugin(window.jsPDF);
</script>

<script type="text/javascript">

    function ExportToExcel() {
        $.ajax({
            type: "POST",
            url: "@Url.Action("LogExportIndex", "MA", new {reportId = reportId})",
            success: function (response) {
                if (response.result == "Success") {
                    var grid = $("#grid1").dxDataGrid("instance");
                    grid.option("onExporting", function (e) {
                        e.fileName = "MA_@(reportId)_" + new Date().toISOString().slice(0, 10);
                    });
                    grid.option("onFileSaving", function (e) { });
                    grid.exportToExcel();
                }
            }
        });
    }
    function ExportToPdf() {
        $.ajax({
            type: "POST",
            url: "@Url.Action("LogExportIndex", "MA", new {reportId = reportId})",
            success: function (response) {
                if (response.result == "Success") {
                    const doc = new jsPDF({
                        orientation: "landscape",
                        unit: "cm",
                        format: [21, 60]
                    });
                    var dataGrid = $("#grid1").dxDataGrid("instance");
                    var fileName = "MA_@(reportId)_" + new Date().toISOString().slice(0, 10) + ".pdf";
                    doc.setFontSize("6")
                    //var keys = $("#grid1").dxDataGrid("getSelectedRowsData")
                    //console.log(keys)
                    DevExpress.pdfExporter.exportDataGrid({
                        jsPDFDocument: doc,
                        component: dataGrid,
                        keepColumnWidths: true
                        //selectedRowsOnly: true
                    }).then(function () {
                        doc.save(fileName);
                    });
                }
            }
        });
    }

    function ExportToPdf2() {
        var dataGrid = $("#grid1").dxDataGrid("instance");
        dataGrid.option("onExporting", function (e) { });
        dataGrid.option("onFileSaving", function (e) {
            var fd = new FormData();
            fd.append("file", e.data);
            $.ajax({
                type: "POST",
                url: "@Url.Action("ExportPDF", "MA", new {reportId = reportId})",
                data: fd,
                processData: false,
                contentType: false
            }).done(function (data) {
                window.location = "@Url.Action("File", "MA", new {reportId = reportId})"
            });
            e.cancel = true;
        });

        dataGrid.exportToExcel();
    }
    function Antrian() {
        $.ajax({
			type: "POST",
			url: "@Url.Action("Antrian", "MA", new { reportId = reportId })",
			contentType: "application/x-www-form-urlencoded;charset=UTF-8",
            dataType: "json",
            success: function (response) {
                swal({ type: 'success', title: 'Success', text: response });
            },
            error: function (response) {
                swal({ type: 'error', title: 'Failed', text: response });
            }
		});
    }
    var resetLJK;

    $(function () {
        $("#Periode").dxValidator({
            validationGroup: "Filter",
            validationRules: [{ type: "required", message: "[Periode] harus dipilih" }]
        })

    });

    function onSelectionChanged(e) {
        if (e.addedItems.length > 0) {
            e.component.field().val("");
        }
    }

    function onJenisLJKChanged(e) {
        resetLJK = true;
        $("#Members").dxSelectBox("instance").getDataSource().reload();
        $("#Members").dxSelectBox("reset");
        resetLJK = false;
    }

    function onButtonFilterClicked(e) {
        const res = e.validationGroup.validate();
        if (res.status === "valid") {
            $("#grid1").dxDataGrid("instance").refresh();
            $("#pie-chart").dxPieChart("instance").refresh();
            $("#bar-chart").dxChart("instance").refresh();
        }
    }

    function onGridBeforeSend(method, ajaxOptions) {
        let memberTypes = $("#MemberTypes").dxSelectBox("instance").option("value");
        let members = $("#Members").dxSelectBox("instance").option("value");
        let JenisPinjamans = $("#JenisPinjamans").dxTagBox("instance").option("value");
        let NPLs = $("#NPLs").dxTagBox("instance").option("value");
        let periode = $("#Periode").dxSelectBox("instance").option("value");
        ajaxOptions.data.memberTypes = memberTypes;
        ajaxOptions.data.members = members;
        ajaxOptions.data.jenisPinjamans = JSON.stringify(JenisPinjamans);
        ajaxOptions.data.npls = JSON.stringify(NPLs);
        ajaxOptions.data.periode = periode;
        ajaxOptions.data.reportId = '@reportId';
    }

    function onLJKOpened(e) {
        e.component.content().find('.dx-list-select-all').hide();
    }

    const maxItems = @maxItems;

    function onLJKChanged(e) {
        if (e.value.length > maxItems) {
            const newValue = e.value.slice(0, maxItems);
            e.component.option("value", newValue);
            //tooltip.show();
        }
    }

</script>

<style type="text/css">
    .mandatory {
        color: red;
    }
</style>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="card card-default">
        @*filter*@
        <div class="row filter-panel" style="padding-top:0px;">
            <div class="card-body">
                <div class="row">
                    <div class="col-lg-4 form-group">
                        <label>Periode Pelaporan<span class="mandatory">*</span></label>
                        @(Html.DevExtreme().SelectBox()
                            .ID("Periode")
                            .DataSource(d => d.Mvc()
                                .Controller("Ref")
                                .LoadAction("GetPeriode")
                                .Key("value"))
                            .ValueExpr("value")
                            .DisplayExpr("text")
                            .SearchEnabled(true)
                            .Width("100%")
                            .Value(p)
                            )
                    </div>
                    <div class="col-lg-4 form-group">
                        <label>Jenis LJK</label>
                        @(Html.DevExtreme().SelectBox()
                            .ID("MemberTypes")
                            .DataSource(d => d.Mvc()
                                .Controller("Ref")
                                .LoadAction("GetMemberTypes")
                                .Key("kode_jenis_ljk"))
                            //.DataSourceOptions(d => d.Paginate(true).PageSize(10))
                            .ValueExpr("kode_jenis_ljk")
                            .DisplayExpr("Display")
                            .SearchEnabled(true)
                            .ShowClearButton(true)
                            .OnValueChanged("onJenisLJKChanged")
                            .Width("100%"))
                    </div>
                    <div class="col-lg-4 form-group">
                        <label>LJK</label>
                        @(Html.DevExtreme().SelectBox()
                            .ID("Members")
                            .DataSource(d => d.Mvc()
                                .Controller("Ref")
                                .LoadAction("GetMembers")
                                .LoadParams(new { memberTypes = new JS("function() { return $(\"#MemberTypes\").dxSelectBox(\"instance\").option(\"value\"); }"), reset = new JS("function() { return resetLJK; }") })
                                //.Key("kode_ljk")
                                .Key("CompositeKey")
                            )
                            .DataSourceOptions(d => d.Paginate(true).PageSize(10))
                            //.ValueExpr("kode_ljk")
                            .ValueExpr("CompositeKey")
                            .DisplayExpr("Display")
                            .SearchEnabled(true)
                            .ShowClearButton(true)
                            .Width("100%"))
                    </div>
                    <div class="col-lg-4 form-group">
                        <label>Jenis Penggunaan</label>
                        @(Html.DevExtreme().TagBox()
                            .ID("JenisPinjamans")
                            .DataSource(d => d.Mvc()
                                .Controller("Ref")
                                .LoadAction("GetJenisPinjamans")                                
                                .Key("kode")
                            )
                            @*.DataSourceOptions(d => d.Paginate(true).PageSize(10)) *@                           
                            .ValueExpr("kode")
                            .DisplayExpr("text")
                            .ShowSelectionControls(true)
                            .MaxDisplayedTags(3)
                            .SearchEnabled(true)
                            .ShowClearButton(true)
                            .OnSelectionChanged("onSelectionChanged")
                            .Width("100%"))
                    </div>     
                     <div class="col-lg-4 form-group">
                        <label>NPL</label>
                        @(Html.DevExtreme().TagBox()
                            .ID("NPLs")
                            .DataSource(d => d.Mvc()
                                .Controller("Ref")
                                .LoadAction("GetNPLs")                                
                                .Key("kode")
                            )
                            .DataSourceOptions(d => d.Paginate(true).PageSize(10))                            
                            .ValueExpr("kode")
                            .DisplayExpr("text")
                            .ShowSelectionControls(true)
                            .MaxDisplayedTags(3)
                            .SearchEnabled(true)
                            .ShowClearButton(true)                           
                            .Width("100%"))
                    </div> 
                </div>

                <div class="float-left">
                    @(Html.DevExtreme().Button()
                        .ID("Filter")
                        .Type(ButtonType.Default)
                        .Text("Tampilkan")
                        .OnClick("onButtonFilterClicked")
                        .ValidationGroup("Filter"))
                </div>

                <div class="float-right">
                    @if (ViewBag.Export)
                    {
                        <a class="btn btn-light-primary font-weight-bolder btn-sm mr-2" href="javascript:Antrian();"><span class="image fa fa-file-invoice"></span> Antrian (CSV)</a>
                        <a class="btn btn-light-primary font-weight-bolder btn-sm mr-2" href="javascript:ExportToExcel();"><span class="image fa fa-file-excel"></span> Export Excel</a>
                        <a class="btn btn-light-primary font-weight-bolder btn-sm mr-2" href="javascript:ExportToPdf2();"><span class="image fa fa-file-pdf"></span> Export PDF</a>
                    }
                </div>
            </div>
        </div>

        @*grid*@
        <div class="gridview-div">
            @BDA.Helper.BDADXExt.MADataGrid((Html.DevExtreme().DataGrid()
                .ID("grid1")
                .DataSource(d => d.Mvc()
                    .Controller("MA")
                    .LoadAction("GetGridDataMA_RekBaruNPL")
                    .OnBeforeSend("onGridBeforeSend"))
                .RemoteOperations(true)
                .Width("100%")
                .AllowColumnResizing(true)
                .Scrolling(s => s.ShowScrollbar(ShowScrollbarMode.Always))
                .FilterRow(f => f.Visible(true))
                .ShowBorders(false)

                ///.Selection(c => c.Mode(SelectionMode.Single))
                .Paging(p =>
                {
                    p.PageSize(15);
                    p.Enabled(true);
                })
                .Pager(p =>
                {
                    p.Visible(true);
                    p.ShowInfo(true);
                })
            ),db,reportId, isHive)
        </div>    
        
          @*chart*@
        <div class="row">
            

            <div class="col-lg-6">
                @(Html.DevExtreme().Chart()
                    .ID("bar-chart")
                    .DataSource(d => d.Mvc()
                        .Controller("MA")
                        .LoadAction("GetGridDataMA_RekBaruNPL")
                        .LoadParams(new {isChart = true})
                        .OnBeforeSend("onGridBeforeSend"))
                    .Palette(VizPalette.Bright)
                    .Margin(m => m.Top(20).Bottom(20).Right(20).Left(20))
                    .Title("Berdasarkan NPL")
                    .LoadingIndicator(l => l.Enabled(true))
                    .Legend(l => l.Visible(false))
                    .CommonSeriesSettings(s => s
                        .ArgumentField("dm_npl")
                        .ValueField("cnt")
                        .IgnoreEmptyPoints(true)
                        .Type(SeriesType.Bar))
                    .SeriesTemplate(t => t.NameField("dm_npl"))
                    .Tooltip(t => t
                        .Enabled(true)
                        .CustomizeTooltip(@<text>
                                            function(arg) {
                                                if (arg.value > 1000000) {
                                                    return {
                                                        text: Math.round(arg.value/1000000).toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",") + " Juta"
                                                    }
                                                } else {
                                                    return {
                                                        text: arg.valueText.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",")
                                                    }
                                                }
                                            }
                                        </text>)
                    )
                    .ValueAxis(a => a
                        .Add()
                        .Label(l => l.CustomizeText(@<text>
                                            function() {
                                                if (this.value > 1000000) {
                                                        return Math.round(this.value/1000000).toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",") + " Juta";
                                                } else {
                                                    return this.valueText.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                                                }
                                            }
                                        </text>))
                    )
                    .ArgumentAxis(a => a
                        .AllowDecimals(false)
                    )
                    .Export(e => e.Enabled(isExport))
                    .OnExporting(@<text>
                                        function(e) {
                                            e.fileName = "BarChart_MA_" + new Date().toISOString().slice(0, 10);
                                            $.ajax({
                                                type: "POST",
                                                url: "@Url.Action("LogExportIndex", "MA", new { reportId = reportId })",
                                                success: function (response) {
                                                    if (response.result == "Success") {

                                                    }
                                                }
                                            });
                                        }
                                    </text>))
            </div>
            <div class="col-lg-6">
                @(Html.DevExtreme().PieChart()
                    .ID("pie-chart")
                    .DataSource(d => d.Mvc()
                        .Controller("MA")
                        .LoadAction("GetGridDataMA_RekBaruNPL")
                        .LoadParams(new {isChart = true})
                        .OnBeforeSend("onGridBeforeSend"))
                    .ResolveLabelOverlapping(ShiftLabelOverlap.Shift)
                    .Margin(m => m.Top(20).Bottom(20).Right(20).Left(20))
                    //.Size(s => s.Height(400).Width(400))
                    .Title("Berdasarkan NPL")
                    .LoadingIndicator(l => l.Enabled(true))
                    .Legend(l => l.Visible(false))
                    .Series(s => s
                        .Add()
                        .ArgumentField("dm_npl")
                        .ValueField("cnt")
                        .Label(l => l
                            .Visible(true)
                            .Connector(c => c.Visible(true))
                            .CustomizeText(@<text>
                                function(arg) {
                                    return arg.argumentText;
                                }
                            </text>)
                        )
                    )
                    .Tooltip(t => t
                        .Enabled(true)
                        .CustomizeTooltip(@<text>
                            function(arg) {
                                return {
                                    text: arg.value.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",") + " (" + arg.percentText + ")"
                                }
                            }
                        </text>)
                    )
                    .Export(e => e.Enabled(isExport))
                    .OnExporting(@<text>
                        function(e) {
                            e.fileName = "PieChart_MA_" + new Date().toISOString().slice(0, 10);
                            $.ajax({
                                type: "POST",
                                url: "@Url.Action("LogExportIndex", "MA", new { reportId = reportId })",
                                success: function (response) {
                                    if (response.result == "Success") {

                                    }
                                }
                            });
                        }
                    </text>))
            </div>
        </div>
    </div>
}