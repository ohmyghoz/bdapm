@model BDA.DataModel.osida_master
@{
    Layout = "~/Views/Shared/_LayoutMainMetronic.cshtml";
    var maxItems = db.GetSetting("LimitFilterLJK");
    bool isExport = ViewBag.Export;
    bool isHive = ViewBag.Hive;
    var p = TempData.Peek("periodeValue").ToString();
    var mt = (string)TempData.Peek("memberTypeValue");
    var m = (string)TempData.Peek("memberValue");
}

@inject BDA.DataModel.DataEntities db



<script>
    window.jsPDF = window.jspdf.jsPDF;
    applyPlugin(window.jsPDF);
</script>

<script type="text/javascript">
    function ExportToExcel() {
        $.ajax({
            type: "POST",
            url: "@Url.Action("LogExportIndex", "OSIDA", new {reportId = Model.kode})",
            success: function (response) {
                if (response.result == "Success") {
                    var grid = $("#grid1").dxDataGrid("instance");
                    grid.option("onExporting", function (e) {
                        e.fileName = "OSIDA_@(Model.kode)_" + new Date().toISOString().slice(0, 10);
                    });
                    grid.option("onFileSaving", function (e) { });
                    grid.exportToExcel();
                }
            }
        });
    }

    function ExportToPdf() {
        $.ajax({
            type: "POST",
            url: "@Url.Action("LogExportIndex", "OSIDA", new {reportId = Model.kode})",
            success: function (response) {
                if (response.result == "Success") {
                    const doc = new jsPDF({
                        orientation: "landscape",
                        unit: "cm",
                        format: [21, 60]
                    });
                    var dataGrid = $("#grid1").dxDataGrid("instance");
                    var fileName = "OSIDA_@(Model.kode)_" + new Date().toISOString().slice(0, 10) + ".pdf";
                    doc.setFontSize("6")
                    //var keys = $("#grid1").dxDataGrid("getSelectedRowsData")
                    //console.log(keys)
                    DevExpress.pdfExporter.exportDataGrid({
                        jsPDFDocument: doc,
                        component: dataGrid,
                        keepColumnWidths: true
                        //selectedRowsOnly: true
                    }).then(function () {
                        doc.save(fileName);
                    });
                }
            }
        });
    }

    function ExportToPdf2() {
        var dataGrid = $("#grid1").dxDataGrid("instance");
        dataGrid.option("onExporting", function (e) { });
        dataGrid.option("onFileSaving", function (e) {
            var fd = new FormData();
            fd.append("file", e.data);
            $.ajax({
                type: "POST",
                url: "@Url.Action("ExportPDF", "OSIDA", new {reportId = Model.kode})",
                data: fd,
                processData: false,
                contentType: false
            }).done(function (data) {
                window.location = "@Url.Action("File", "OSIDA", new {reportId = Model.kode})"
            });
            e.cancel = true;
        });

        dataGrid.exportToExcel();
    }
    function Antrian() {
        $.ajax({
			type: "POST",
			url: "@Url.Action("Antrian", "OSIDA", new { reportId = Model.kode })",
			contentType: "application/x-www-form-urlencoded;charset=UTF-8",
            dataType: "json",
            success: function (response) {
                swal({ type: 'success', title: 'Success', text: response });
            },
            error: function (response) {
                swal({ type: 'error', title: 'Failed', text: response });
            }
		});
    }
    var resetLJK;

    $(function () {
        $("#Periode").dxValidator({
            validationGroup: "Filter",
            validationRules: [{ type: "required", message: "[Periode] harus dipilih" }]
        })

    });

    function onSelectionChanged(e) {
        if (e.addedItems.length > 0) {
            e.component.field().val("");
        }
    }
    function CFE(filterValue, selectedFilterOperation) {
        if (selectedFilterOperation === "=") {
            var filterExpression = [
                [this.dataField, ">=", filterValue - 0.5],
                "and", [this.dataField, "<=", filterValue + 0.5]
            ];
            return filterExpression;
        }
        return [this.dataField, selectedFilterOperation || '=', filterValue];
    }
    function onJenisLJKChanged(e) {
        resetLJK = true;
        $("#Members").dxSelectBox("instance").getDataSource().reload();
        $("#Members").dxSelectBox("reset");
        resetLJK = false;
    }

    function onButtonFilterClicked(e) {
        const res = e.validationGroup.validate();
        if (res.status === "valid") {
            $("#grid1").dxDataGrid("instance").refresh();
            //$("#bar-chart").dxChart("instance").refresh();
        }
    }

    function onGridBeforeSend(method, ajaxOptions) {
        let memberTypes = $("#MemberTypes").dxSelectBox("instance").option("value");
        let members = $("#Members").dxSelectBox("instance").option("value");
        let periode = $("#Periode").dxSelectBox("instance").option("value");
        ajaxOptions.data.memberTypes = memberTypes;
        ajaxOptions.data.members = members;
        ajaxOptions.data.periode = periode;
        ajaxOptions.data.reportId = '@Model.kode';
    }

    function onLJKOpened(e) {
        e.component.content().find('.dx-list-select-all').hide();
    }

    const maxItems = @maxItems;

    function onLJKChanged(e) {
        if (e.value.length > maxItems) {
            const newValue = e.value.slice(0, maxItems);
            e.component.option("value", newValue);
            //tooltip.show();
        }
    }

    function onContentReady(e) {
        if (e.component.totalCount() == 0) {
            $("#divSkenario").show();
            $("#divOutputEmpty").show();
            $("#divOutput").hide();
            $("#divTindakLanjut").hide();

        } else {
            $("#divSkenario").show();
            $("#divOutputEmpty").hide();
            $("#divOutput").show();
            $("#divTindakLanjut").show();
        }

    }
    function Detail(e) {
        var keys = $("#grid1").dxDataGrid("getSelectedRowKeys");
        if (keys.length >= 1) {
            window.open("@Url.Action("Detail", "OSIDA")/" + keys[0].toString());
        } else {
            swal({ type: 'error', title: 'Oops...', text: 'Silahkan Pilih Baris Telebih Dahulu' });
        }
    }
</script>

<style type="text/css">
    .mandatory {
        color: red;
    }
</style>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="card card-default">
        @*filter*@
        <div class="row filter-panel" style="padding-top:0px;">
            <div class="card-body">
                <div class="row">
                    <div class="col-lg-4 form-group">
                        <label>Periode Pelaporan<span class="mandatory">*</span></label>
                        @(Html.DevExtreme().SelectBox()
                            .ID("Periode")
                            .DataSource(d => d.Mvc()
                                .Controller("Ref")
                                .LoadAction("GetPeriode")
                                .Key("value"))
                            .ValueExpr("value")
                            .DisplayExpr("text")
                            .SearchEnabled(true)
                            .Width("100%")
                            .Value(p)
                            .ReadOnly(true)
                            )

                    </div>
                    <div class="col-lg-4 form-group">
                        <label>Jenis LJK</label>
                        @(Html.DevExtreme().SelectBox()
                            .ID("MemberTypes")
                            .DataSource(d => d.Mvc()
                                .Controller("Ref")
                                .LoadAction("GetMemberTypes")
                                .Key("kode_jenis_ljk"))
                            //.DataSourceOptions(d => d.Paginate(true).PageSize(10))
                            .ValueExpr("kode_jenis_ljk")
                            .DisplayExpr("Display")
                            //.ShowSelectionControls(true)
                            //.MaxDisplayedTags(3)
                            .SearchEnabled(true)
                            .ShowClearButton(true)
                            //.OnSelectionChanged("onSelectionChanged")
                            .OnValueChanged("onJenisLJKChanged")
                            .Value(mt)
                            .ReadOnly(true)
                            .Width("100%"))
                    </div>

                    <div class="col-lg-4 form-group">
                        <label>LJK</label>
                        @(Html.DevExtreme().SelectBox()
                            .ID("Members")
                            .DataSource(d => d.Mvc()
                                .Controller("Ref")
                                .LoadAction("GetMembers")
                                .LoadParams(new { memberTypes = new JS("function() { return $(\"#MemberTypes\").dxSelectBox(\"instance\").option(\"value\"); }"), reset = new JS("function() { return resetLJK; }") })
                                //.Key("kode_ljk")
                                .Key("CompositeKey")
                            )
                            .DataSourceOptions(d => d.Paginate(true).PageSize(10))
                            //.ValueExpr("kode_ljk")
                            .ValueExpr("CompositeKey")
                            .DisplayExpr("Display")
                            //.ShowSelectionControls(true)
                            //.MaxDisplayedTags(3)
                            .SearchEnabled(true)
                            .ShowClearButton(true)
                            //.OnSelectionChanged("onSelectionChanged")
                            //.OnOpened("onLJKOpened")
                            //.OnValueChanged("onLJKChanged")
                            .Value(m)
                            .ReadOnly(true)
                            .Width("100%"))
                    </div>
                    <div class="col-lg-12" id="divSkenario" style="display:none">
                        <div style="font-weight:bold">SKENARIO PENGUJIAN</div>
                        <div>@Html.Raw(Model.skenario)</div>
                    </div>
                    <div class="col-lg-12" id="divOutput" style="display:none">
                        <div style="font-weight:bold">KETERANGAN OUTPUT</div>
                        <div>@Html.Raw(Model.output)</div>
                    </div>
                    <div class="col-lg-12" id="divOutputEmpty" style="display:none">
                        <div style="font-weight:bold">KETERANGAN OUTPUT</div>
                        <div>@Html.Raw(Model.output_empty)</div>
                    </div>
                    <div class="col-lg-12" id="divTindakLanjut" style="display:none">
                        <div style="font-weight:bold">KETERANGAN USULAN TINDAK LANJUT</div>
                        <div>@Html.Raw(Model.tindaklanjut)</div>
                    </div>
                </div>

                @*<div class="float-left">
                        @(Html.DevExtreme().Button()
                            .ID("Filter")
                            .Type(ButtonType.Default)
                            .Text("Tampilkan")
                            .OnClick("onButtonFilterClicked")
                            .ValidationGroup("Filter"))
                    </div>*@

            <div class="float-right">

                @if (ViewBag.Export)
                {
                    <a class="btn btn-light-primary font-weight-bolder btn-sm mr-2" href="javascript:Antrian();"><span class="image fa fa-file-invoice"></span> Antrian (CSV)</a>
                    <a class="btn btn-light-primary font-weight-bolder btn-sm mr-2" href="javascript:ExportToExcel();"><span class="image fa fa-file-excel"></span> Export Excel</a>
                    <a class="btn btn-light-primary font-weight-bolder btn-sm mr-2" href="javascript:ExportToPdf2();"><span class="image fa fa-file-pdf"></span> Export PDF</a>
                }
            </div>
            </div>
        </div>

        @*grid*@
        <div class="gridview-div">
            @BDA.Helper.BDADXExt.OSIDADataGrid((Html.DevExtreme().DataGrid()
                .ID("grid1")
                .DataSource(d => d.Mvc()
                    .Controller("OSIDA")
                    .LoadAction("GetGridDataDetail"))
                .RemoteOperations(true)
                .Width("100%")
                .AllowColumnResizing(true)
                .ColumnChooser(c => c.Enabled(true))
                .ColumnFixing(c => c.Enabled(true))
                .Scrolling(s => s.ShowScrollbar(ShowScrollbarMode.Always))
                .FilterRow(f => f.Visible(true))
                .OnContentReady("onContentReady")
                .ShowBorders(false)

                ///.Selection(c => c.Mode(SelectionMode.Single))
                .Paging(p =>
                {
                    p.PageSize(15);
                    p.Enabled(true);
                })
                .Pager(p =>
                {
                    p.Visible(true);
                    p.ShowInfo(true);
                })
            ), db, Model,isHive)
        </div>
    </div>
}