@model BDA.DataModel.osida_master
@{
    Layout = "~/Views/Shared/_LayoutMainMetronic.cshtml";
    var maxItems = db.GetSetting("LimitFilterLJK");
    var maxExport = db.GetSetting("LimitExportExcelPDF");
    bool isExport = ViewBag.Export;
    bool isHive = ViewBag.Hive;
    var p = (string[])TempData.Peek("periodeValue");
    var mt = (string[])TempData.Peek("memberTypeValue");
    var m = (string[])TempData.Peek("memberValue");
    var kc = (string[])TempData.Peek("kcValue");
}

@inject BDA.DataModel.DataEntities db



<script>
    window.jsPDF = window.jspdf.jsPDF;
    applyPlugin(window.jsPDF);
</script>

<script type="text/javascript">
    @*function ExportToExcel() {
        $.ajax({
            type: "POST",
            url: "@Url.Action("LogExportIndex", "OSIDA2023", new {reportId = Model.kode})",
            success: function (response) {
                if (response.result == "Success") {
                    var grid = $("#grid1").dxDataGrid("instance");
                    grid.option("onExporting", function (e) {
                        e.fileName = "OSIDA_@(Model.kode)_" + new Date().toISOString().slice(0, 10);
                    });
                    grid.option("onFileSaving", function (e) { });
                    grid.exportToExcel();
                }
            }
        });
    }*@
    function ExportToCSV() {
        var grid = $("#grid1").dxDataGrid("instance");
        $.ajax({
            type: "POST",
            url: "@Url.Action("LogExportIndex", "OSIDA2023", new {reportId = Model.kode})",
            success: function (response) {
                if (response.result == "Success") {
                    var workbook = new ExcelJS.Workbook();
                    var worksheet = workbook.addWorksheet('Main sheet');
                    
                    DevExpress.excelExporter.exportDataGrid({
                        component: $("#grid1").dxDataGrid("instance"),
                        worksheet: worksheet,
                        autoFilterEnabled: true
                    }).then(function () {
                        workbook.csv.writeBuffer().then(function (buffer) {
                            saveAs(new Blob([buffer], { type: "application/octet-stream" }), "OSIDA_@(Model.kode)_" + new Date().toISOString().slice(0, 10) + ".csv");
                        });
                    });
                    grid.cancel = true;
                }
            }
        });
    }
     function ExportToExcel() {
        $.ajax({
            type: "POST",
            url: "@Url.Action("LogExportIndex", "OSIDA2023", new {reportId = Model.kode})",
            success: function (response) {
                if (response.result == "Success") {
                    var workbook = new ExcelJS.Workbook();
                    var worksheet = workbook.addWorksheet('Main sheet');
                    
                    DevExpress.excelExporter.exportDataGrid({
                        component: $("#grid1").dxDataGrid("instance"),
                        worksheet: worksheet,
                        customizeCell: function (options) {
                            var { gridCell, excelCell } = options;

                            if (gridCell.rowType === 'data') {
                                if (options.gridCell.column.dataType === 'number') {
                                    excelCell.numFmt = '#,##0.00';
                                }
                            }
                        }
                    }).then(function () {
                        workbook.xlsx.writeBuffer().then(function (buffer) {
                            saveAs(new Blob([buffer], { type: "application/octet-stream" }), "OSIDA_@(Model.kode)_" + new Date().toISOString().slice(0, 10) + ".xlsx");
                        });
                    });
                }
            }
        });
    }
    function ExportToPdf() {
        $.ajax({
            type: "POST",
            url: "@Url.Action("LogExportIndex", "OSIDA2023", new {reportId = Model.kode})",
            success: function (response) {
                if (response.result == "Success") {
                    const doc = new jsPDF({
                        orientation: "landscape",
                        unit: "cm",
                        format: [21, 60]
                    });
                    var dataGrid = $("#grid1").dxDataGrid("instance");
                    var fileName = "OSIDA_@(Model.kode)_" + new Date().toISOString().slice(0, 10) + ".pdf";
                    doc.setFontSize("6")
                    //var keys = $("#grid1").dxDataGrid("getSelectedRowsData")
                    //console.log(keys)
                    DevExpress.pdfExporter.exportDataGrid({
                        jsPDFDocument: doc,
                        component: dataGrid,
                        keepColumnWidths: true
                        //selectedRowsOnly: true
                    }).then(function () {
                        doc.save(fileName);
                    });
                }
            }
        });
    }

    function ExportToPdf2() {
        var dataGrid = $("#grid1").dxDataGrid("instance");
        dataGrid.option("onExporting", function (e) { });
        dataGrid.option("onFileSaving", function (e) {
            var fd = new FormData();
            fd.append("file", e.data);
            $.ajax({
                type: "POST",
                url: "@Url.Action("ExportPDF", "OSIDA2023", new {reportId = Model.kode})",
                data: fd,
                processData: false,
                contentType: false
            }).done(function (data) {
                window.location = "@Url.Action("File", "OSIDA2023", new {reportId = Model.kode})"
            });
            e.cancel = true;
        });

        dataGrid.exportToExcel();
    }
    function Antrian() {
        $("#grid1").dxDataGrid("instance").refresh().then(function () {
            $.ajax({
			type: "POST",
			url: "@Url.Action("AntrianDetail", "OSIDA2023", new { reportId = Model.kode })",
			contentType: "application/x-www-form-urlencoded;charset=UTF-8",
            dataType: "json",
            success: function (response) {
                swal({ type: 'success', title: 'Success', text: response });
            },
            error: function (response) {
                swal({ type: 'error', title: 'Failed', text: response });
            }
		    });
        });
    }
    var resetLJK;
    var resetKC;
    $(function () {
        $("#Periode").dxValidator({
            validationGroup: "Filter",
            validationRules: [{ type: "required", message: "[Periode] harus dipilih" }]
        })

    });

    function onSelectionChanged(e) {
        if (e.addedItems.length > 0) {
            e.component.field().val("");
        }
    }
    function CFE(filterValue, selectedFilterOperation) {
        if (selectedFilterOperation === "=") {
            var filterExpression = [
                [this.dataField, ">=", filterValue - 0.5],
                "and", [this.dataField, "<=", filterValue + 0.5]
            ];
            return filterExpression;
        }
        return [this.dataField, selectedFilterOperation || '=', filterValue];
    }
    function onJenisLJKChanged(e) {
        resetLJK = true;
        $("#Members").dxTagBox("instance").getDataSource().reload();
        $("#Members").dxTagBox("reset");
        resetLJK = false;
    }

    function onButtonFilterClicked(e) {
        const res = e.validationGroup.validate();
        if (res.status === "valid") {
            $("#grid1").dxDataGrid("instance").refresh();
            //$("#bar-chart").dxChart("instance").refresh();
        }
    }

    function onGridBeforeSend(method, ajaxOptions) {
        let memberTypes = $("#MemberTypes").dxSelectBox("instance").option("value");
        let members = $("#Members").dxSelectBox("instance").option("value");
        let periode = $("#Periode").dxSelectBox("instance").option("value");
        ajaxOptions.data.memberTypes = memberTypes;
        ajaxOptions.data.members = members;
        ajaxOptions.data.periode = periode;
        ajaxOptions.data.reportId = '@Model.kode';
    }

    const maxItems = @maxItems;
    function onLJKOpened(e) {
        e.component.content().find('.dx-list-select-all').hide();
    }

    function onLJKChanged(e) {
        if (e.value.length > maxItems) {
            const newValue = e.value.slice(0, maxItems);
            e.component.option("value", newValue);
            //tooltip.show();
        }

        resetKC = true;
        $("#KantorCabangs").dxTagBox("instance").getDataSource().reload();
        $("#KantorCabangs").dxTagBox("reset");
        resetKC = false;
    }

    function onKCChanged(e) {
        if (e.value.length > maxItems) {
            const newValue = e.value.slice(0, maxItems);
            e.component.option("value", newValue);
            //tooltip.show();
        }
    }
    function onOpened(e) {
        $('.dx-list-select-all').hide()
    }

</script>

<style type="text/css">
    .mandatory {
        color: red;
    }
</style>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="card card-default">
        @*filter*@
        <div class="row filter-panel" style="padding-top:0px;">
            <div class="card-body">
                <div class="row">
                    <div class="col-lg-4 form-group">
                        <label>Periode<span class="mandatory">*</span></label>
                        @(Html.DevExtreme().TagBox()
                            .ID("Periode")
                            .DataSource(d => d.Mvc()
                                .Controller("Ref")
                                .Area("BDA2")
                                .LoadAction("GetPeriode")
                                .Key("value"))
                            .ValueExpr("value")
                            .DisplayExpr("text")
                            .ShowSelectionControls(true)
                            .MaxDisplayedTags(3)
                            .SearchEnabled(true)
                            .ShowClearButton(true)
                            .OnSelectionChanged("onSelectionChanged")
                            .Width("100%")
                            .ReadOnly(true)
                            .Value(p)
                            )
                    </div>
                    <div class="col-lg-4 form-group">
                        <label>Jenis LJK</label>
                        @(Html.DevExtreme().TagBox()
                            .ID("MemberTypes")
                            .DataSource(d => d.Mvc()
                                .Controller("Ref")
                                .Area("BDA2")
                                .LoadAction("GetMemberTypes")
                                .Key("kode_jenis_ljk"))
                            //.DataSourceOptions(d => d.Paginate(true).PageSize(10))
                            .ValueExpr("kode_jenis_ljk")
                            .DisplayExpr("Display")
                            .ShowSelectionControls(true)
                            .MaxDisplayedTags(3)
                            .SearchEnabled(true)
                            .ShowClearButton(true)
                            .OnSelectionChanged("onSelectionChanged")
                            .OnValueChanged("onJenisLJKChanged")
                            .ReadOnly(true)
                            .Value(mt)
                            .Width("100%"))
                    </div>
                    <div class="col-lg-4 form-group">
                        <label>Kode LJK</label>
                        @(Html.DevExtreme().TagBox()
                            .ID("Members")
                            .DataSource(d => d.Mvc()
                                .Controller("Ref")
                                .Area("BDA2")
                                .LoadAction("GetMembers")
                                .LoadParams(new { memberTypes = new JS("function() { return $(\"#MemberTypes\").dxTagBox(\"instance\").option(\"value\"); }"), reset = new JS("function() { return resetLJK; }") })
                                //.Key("kode_ljk")
                                .Key("CompositeKey")
                            )
                            .DataSourceOptions(d => d.Paginate(true).PageSize(10))
                            //.ValueExpr("kode_ljk")
                            .ValueExpr("CompositeKey")
                            .DisplayExpr("Display")
                            .ShowSelectionControls(true)
                            .MaxDisplayedTags(3)
                            .SearchEnabled(true)
                            .ShowClearButton(true)
                            .OnSelectionChanged("onSelectionChanged")
                            .OnOpened("onLJKOpened")
                            .OnValueChanged("onLJKChanged")
                            .ReadOnly(true)
                            .Value(m)
                            .Width("100%"))
                    </div>
                    @if (Model.kode != "osida_potensi_konversi_kur_deb_noneligible_det" && Model.kode != "osida_pemberian_kur_deb_noneligible_det" && Model.kode != "osida_pengurus_pemilik_kredit_bermasalah_det_bu" && Model.kode != "osida_pengurus_pemilik_kredit_bermasalah_det_pengurus")
                    {
                        <div class="col-lg-4 form-group">
                            <label>Kantor Cabang</label>
                            @(Html.DevExtreme().TagBox()
                                    .ID("KantorCabangs")
                                    .DataSource(d => d.Mvc()
                                        .Controller("Ref")
                                        .Area("BDA2")
                                        .LoadAction("GetKantorCabangs")
                                        .LoadParams(new { memberTypes = new JS("function() { return $(\"#MemberTypes\").dxTagBox(\"instance\").option(\"value\"); }"), members = new JS("function() { return $(\"#Members\").dxTagBox(\"instance\").option(\"value\"); }"), reset = new JS("function() { return resetKC; }") })
                                        .Key("kode")
                                    )
                                    .DataSourceOptions(d => d.Paginate(true).PageSize(10))
                                    .ValueExpr("kode")
                                    .DisplayExpr("text")
                                    .ShowSelectionControls(true)
                                    .MaxDisplayedTags(3)
                                    .SearchEnabled(true)
                                    .ShowClearButton(true)
                                    .OnSelectionChanged("onSelectionChanged")
                                    .OnOpened("onOpened")
                                    .OnContentReady("onOpened")
                                    .OnValueChanged("onKCChanged")
                                    .ReadOnly(true)
                                    .Value(kc)
                                    .Width("100%"))
                        </div>
                    }

                    <div class="col-lg-12" id="divSkenario" style="display:block">
                        <div style="font-weight:bold">SKENARIO PENGUJIAN</div>
                        <div>@Html.Raw(Model.skenario)</div>
                    </div>
                    <div class="col-lg-12" id="divOutput" style="display:block">
                        <div style="font-weight:bold">KETERANGAN OUTPUT</div>
                        <div>@Html.Raw(Model.output)</div>
                    </div>
                    <div class="col-lg-12" id="divOutputEmpty" style="display:none">
                        <div style="font-weight:bold">KETERANGAN OUTPUT</div>
                        <div>@Html.Raw(Model.output_empty)</div>
                    </div>
                    <div class="col-lg-12" id="divTindakLanjut" style="display:block">
                        <div style="font-weight:bold">KETERANGAN USULAN TINDAK LANJUT</div>
                        <div>@Html.Raw(Model.tindaklanjut)</div>
                    </div>
                </div>

                <div class="float-right">

                    @if (ViewBag.Export)
                    {
                        <a class="btn btn-light-primary font-weight-bolder btn-sm mr-2" href="javascript:Antrian();"><span class="image fa fa-file-invoice"></span> Antrian (CSV)</a>
                        <a class="btn btn-light-primary font-weight-bolder btn-sm mr-2" href="javascript:ExportToExcel();" title="Export Excel maksimal @maxExport data"><span class="image fa fa-file-excel"></span> Export Excel</a>
                        <a class="btn btn-light-primary font-weight-bolder btn-sm mr-2" href="javascript:ExportToPdf2();" title="Export PDF maksimal @maxExport data"><span class="image fa fa-file-pdf"></span> Export PDF</a>
                        <a class="btn btn-light-primary font-weight-bolder btn-sm mr-2" href="javascript:ExportToCSV();"><span class="image fa fa-file-archive"></span> Export CSV</a>
                    }
                </div>
            </div>
        </div>

        @*grid*@
        <div class="gridview-div">
            @BDA.Helper.BDADXExt.OSIDA2023DataGrid((Html.DevExtreme().DataGrid()
                .ID("grid1")
                .DataSource(d => d.Mvc()
                    .Controller("OSIDA2023")
                    .LoadAction("GetGridDataDetail"))
                .RemoteOperations(true)
                .Width("100%")
                .AllowColumnResizing(true)
                .ColumnChooser(c => c.Enabled(true))
                .ColumnFixing(c => c.Enabled(true))
                .Scrolling(s => s.ShowScrollbar(ShowScrollbarMode.Always))
                .FilterRow(f => f.Visible(true))
                //.OnContentReady("onContentReady")
                .ShowBorders(false)

                ///.Selection(c => c.Mode(SelectionMode.Single))
                .Paging(p =>
                {
                    p.PageSize(15);
                    p.Enabled(true);
                })
                .Pager(p =>
                {
                    p.Visible(true);
                    p.ShowInfo(true);
                })
            ), db, Model, isHive)
        </div>
    </div>
}