@{
    Layout = "~/Views/Shared/_LayoutMainMetronic.cshtml";
    bool isHive = ViewBag.Hive;

}

@inject BDA.DataModel.DataEntities db


<link rel="stylesheet" href="~/css/w3.css">
<script>
    window.jsPDF = window.jspdf.jsPDF;
    applyPlugin(window.jsPDF);
</script>

<script type="text/javascript">
    function ExportToExcel() {
        $.ajax({
            type: "POST",
            url: "@Url.Action("LogExportIndex", "Monitoring")",
            success: function (response) {
                if (response.result == "Success") {
                    var grid = $("#grid1").dxDataGrid("instance");
                    grid.option("onExporting", function (e) {
                        e.fileName = "Monitoring_" + new Date().toISOString().slice(0, 10);
                    });
                    grid.option("onFileSaving", function (e) { });
                    grid.exportToExcel();
                }
            }
        });
    }


    function ExportToPdf2() {
        var dataGrid = $("#grid1").dxDataGrid("instance");
        dataGrid.option("onExporting", function (e) { });
        dataGrid.option("onFileSaving", function (e) {
            var fd = new FormData();
            fd.append("file", e.data);
            $.ajax({
                type: "POST",
                url: "@Url.Action("ExportPDF", "Monitoring")",
                data: fd,
                processData: false,
                contentType: false
            }).done(function (data) {
                window.location = "@Url.Action("File", "Monitoring")"
            });
            e.cancel = true;
        });

        dataGrid.exportToExcel();
    }
    function Antrian() {
        $.ajax({
			type: "POST",
			url: "@Url.Action("Antrian", "Monitoring")",
            contentType: "application/x-www-form-urlencoded;charset=UTF-8",

            dataType: "json",
            success: function (response) {
                swal({ type: 'success', title: 'Success', text: response });
            },
            error: function (response) {
                swal({ type: 'error', title: 'Failed', text: response });
            }
		});
    }
    var resetLJK;

    $(function () {
        $("#Periode").dxValidator({
            validationGroup: "Filter",
            validationRules: [{ type: "required", message: "[Periode] harus dipilih" }]
        })
    });


    function onButtonFilterClicked(e) {
        const res = e.validationGroup.validate();
        if (res.status === "valid") {
            let periode = $("#Periode").dxSelectBox("instance").option("value");
            $("#grid1").dxDataGrid("instance").refresh();
            $("#bar-chart1").dxChart("instance").refresh();
            $("#bar-chart2").dxChart("instance").refresh();
            const myArray = periode.toString().split(",");
            $("#scheduler").dxScheduler("instance").option("currentDate", new Date(myArray[0]));
            $("#scheduler").dxScheduler("instance").getDataSource().reload();
            $.ajax({
			    type: "POST",
			    url: "@Url.Action("ValueLabel", "Monitoring")",
                contentType: "application/x-www-form-urlencoded;charset=UTF-8",
                data: { periode: periode },
                dataType: "json",
                success: function (response) {
                    document.getElementById('ltb').innerHTML = response.ltba;
                    document.getElementById('lta').innerHTML = response.ltaa;
                },
                error: function (response) {
                    swal({ type: 'error', title: 'Failed', text: response });
                }
		    });
        }
    }

    function onGridBeforeSend(method, ajaxOptions) {
        let periode = $("#Periode").dxSelectBox("instance").option("value");
        ajaxOptions.data.periode = periode;
    }
    function onSelectionChanged(e) {
        if (e.addedItems.length > 0) {
            e.component.field().val("");
        }
    }
    function colorAppoint(e) {
        if (e.appointment.cat == 'File Tersedia') {
            e.appointmentElement[0].style.backgroundColor = '#21d61e';
        }
        if (e.appointment.cat == 'File Tidak Tersedia') {
            e.appointmentElement[0].style.backgroundColor = '#e81a4d';
        }
        if (e.appointment.cat == 'File Diterima') {
            e.appointmentElement[0].style.backgroundColor = '#f2a81d';
        }
    }
    function customizeLabel() {
        return "Rp. " + this.valueText;
    }
</script>

<style type="text/css">
    .mandatory {
        color: red;
    }
</style>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="card card-default">
        @*filter*@
        <div class="row filter-panel" style="padding-top:0px;">
            <div class="card-body">
                <div class="row">
                    <div class="col-lg-4 form-group">
                        <label>Periode<span class="mandatory">*</span></label>
                        @*@(Html.DevExtreme().TagBox()
                            .ID("Periode")
                            .DataSource(d => d.Mvc()
                                .Controller("Ref")
                                .Area("BDA2")
                                .LoadAction("GetPeriode")
                                .Key("value"))
                            .ValueExpr("value")
                            .DisplayExpr("text")
                            .ShowSelectionControls(true)
                            .MaxDisplayedTags(3)
                            .SearchEnabled(true)
                            .ShowClearButton(true)
                            .OnSelectionChanged("onSelectionChanged")
                            .Width("100%")
                            )*@
                        @(Html.DevExtreme().SelectBox()
                            .ID("Periode")
                            .DataSource(d => d.Mvc()
                                .Controller("Ref")
                                .Area("BDA2")
                                .LoadAction("GetPeriode")
                                .Key("value"))
                            .ValueExpr("value")
                            .DisplayExpr("text")
                            .SearchEnabled(true)
                            .Width("100%")
                            )
                    </div>
                </div>

                <div class="float-left">
                    @(Html.DevExtreme().Button()
                        .ID("Filter")
                        .Type(ButtonType.Default)
                        .Text("Tampilkan")
                        .OnClick("onButtonFilterClicked")
                        .ValidationGroup("Filter"))
                </div>

                <div class="float-right">
                    @if (ViewBag.Export)
                    {
                        @*<a class="btn btn-light-primary font-weight-bolder btn-sm mr-2" href="javascript:Antrian();"><span class="image fa fa-file-invoice"></span> Antrian (CSV)</a>*@
                        <a class="btn btn-light-primary font-weight-bolder btn-sm mr-2" href="javascript:ExportToExcel();"><span class="image fa fa-file-excel"></span> Export Excel</a>
                        <a class="btn btn-light-primary font-weight-bolder btn-sm mr-2" href="javascript:ExportToPdf2();"><span class="image fa fa-file-pdf"></span> Export PDF</a>
                    }
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6">
                @(Html.DevExtreme().Scheduler()
                    .ID("scheduler")
                    .DataSource(d => d.Mvc()
                        .Controller("Monitoring")
                        .LoadAction("GetScheduleData")
                        .OnBeforeSend("onGridBeforeSend"))
                    .TimeZone("America/Los_Angeles")
                    .Views(new[] {
                        SchedulerViewType.Month
                    })
                    .Editing(editing =>
                    {
                        editing.AllowAdding(false);
                        editing.AllowDeleting(false);
                        editing.AllowUpdating(false);
                        editing.AllowResizing(false);
                        editing.AllowDragging(false);
                    })
                    .CurrentView(SchedulerViewType.Month)
                    .CurrentDate(DateTime.Now)
                    .StartDayHour(9)
                    .Height(300)
                    .TextExpr("cat")
                    .ShowAllDayPanel(false)
                    .StartDateExpr("tgl")
                    .EndDateExpr("tgl")
                //.Groups(new[] { "cat" })
                    .Resources(res =>
                    {
                        res.Add()
                        .FieldExpr("col")
                        .AllowMultiple(false)
                        .UseColorAsDefault(true)
                        //.Label("Color")
                        .ColorExpr("color")
                        .ValueExpr("id")
                        .DataSource(new[] {
                            new { id = "1", text = "File Tersedia", color = "#19f711" },
                            new { id = "2", text = "File Tidak Tersedia", color = "#f73711" },
                            new { id = "3", text = "File Diterima", color = "#293df2" }
                        });
                    })
                //.AllDayExpr("AllDay")
                )
                <div class=" row">
                    <div class="col-lg-4">
                        <span style="height:25px;width:25px;border-radius:50%;display:inline-block;background-color:#19f711;margin-top:5px;"></span>
                        File Tersedia
                    </div>
                    <div class="col-lg-4">
                        <span style="height:25px;width:25px;border-radius:50%;display:inline-block;background-color:#f73711;margin-top:5px;"></span>
                        File Tidak Tersedia
                    </div>
                    <div class="col-lg-4">
                        <span style="height:25px;width:25px;border-radius:50%;display:inline-block;background-color:#293df2;margin-top:5px;"></span>
                        File Diterima
                    </div>
                </div>
            </div>
            <div class="col-lg-6">
                <div class="row">
                    <div class="col-md-3 form-group"> &nbsp;</div>
                    <div class="col-md-6 form-group">
                        <div class="w3-card-2" style="width:100%">
                            <header class="w3-container w3-red">
                                <p style="text-align:center">
                                    Debitur yang Memiliki Kewajiban
                                </p>
                            </header>
                        </div>
                    </div>
                    <div class="col-md-3 form-group">&nbsp;</div>
                    <div class="col-md-6 form-group">
                        <div class="w3-card-2">
                            <header class="w3-container w3-red">
                                <p style="text-align:center">Total Baki Debet (F01)</p>
                            </header>
                            <div class="w3-container" style="text-align:center">
                                <label id="ltb"></label>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6 form-group">
                        <div class="w3-card-2">
                            <header class="w3-container w3-red">
                                <p style="text-align:center">Total Account (F01)</p>
                            </header>
                            <div class="w3-container" style="text-align:center">
                                <label id="lta"></label>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="row">

                </div>

            </div>
        </div>
        <div class="row">
            <div class="col-lg-12">
                @(Html.DevExtreme().Chart()
                    .ID("bar-chart1")
                    .DataSource(d => d.Mvc()
                        .Controller("Monitoring")
                        .LoadAction("GetChartData")
                        .LoadParams(new {tipeChart="TA"})
                        .OnBeforeSend("onGridBeforeSend"))
                    .Palette(VizPalette.Bright)
                    .Margin(m => m.Top(20).Bottom(20).Right(20).Left(20))
                    .Title("Total Account (Fasilitas)")
                    .LoadingIndicator(l => l.Enabled(true))
                    .Legend(l => l.Visible(false))
                    .Legend(l => l
                        .VerticalAlignment(VerticalEdge.Top)
                        .HorizontalAlignment(HorizontalAlignment.Right)
                    )
                    
                    .CommonSeriesSettings(s => s
                        .ArgumentField("segmentasi")
                        .ValueField("total_account")
                        .IgnoreEmptyPoints(true)
                        .Type(SeriesType.Bar)
                        .Label(l => l
                            .Visible(true)
                            .Format(f => f
                                .Type(Format.FixedPoint)
                                .Precision(0)
                            )
                        )
                        )
                    .SeriesTemplate(t => t.NameField("segmentasi"))
                    .Tooltip(t => t
                        .Enabled(true)
                        .CustomizeTooltip(@<text>
                                function(arg) {
                                        return {
                                            text: arg.valueText.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",")
                                        }
                                    }
                            </text>)
                    )
                    .ValueAxis(a => a
                        .Add()
                        .Label(l => l.CustomizeText(@<text>
                            function() {
                                    return this.valueText.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                                }
                        </text>))
                    )
                    .ArgumentAxis(a => a
                        .Label(l => l
                            .RotationAngle(30)
                            .OverlappingBehavior(OverlappingBehavior.Rotate)
                            .CustomizeText(@<text>
                                    function() {
                                                if (this.valueText.toString().length > 20) {
                                                    return  this.valueText.toString().substring(0, 19) + "...";
                                            }
                                            else {
                                                    return this.valueText.toString();
                                            }
                                        }
                                </text>)
                            )
                    )
                    .Export(e => e.Enabled(true))
                    .OnExporting(@<text>
                            function(e) {
                                e.fileName = "BarChart_TA_" + new Date().toISOString().slice(0, 10);
                                $.ajax({
                                    type: "POST",
                                    url: "@Url.Action("LogExportIndex", "Monitoring")",
                                    success: function (response) {
                                        if (response.result == "Success") {

                                        }
                                    }
                                });
                            }
                        </text>))
            </div>
            <div class="col-lg-12">
                @(Html.DevExtreme().Chart()
                    .ID("bar-chart2")
                    .DataSource(d => d.Mvc()
                        .Controller("Monitoring")
                        .LoadAction("GetChartData")
                        .LoadParams(new {tipeChart = "TB" })
                        .OnBeforeSend("onGridBeforeSend"))
                    .Palette(VizPalette.Bright)
                    .Margin(m => m.Top(20).Bottom(20).Right(20).Left(20))
                    .Title("Total Baki Debet")
                    .LoadingIndicator(l => l.Enabled(true))
                    .Legend(l => l.Visible(false))
                    .Legend(l => l
                        .VerticalAlignment(VerticalEdge.Top)
                        .HorizontalAlignment(HorizontalAlignment.Right)
                    )
                    .CommonSeriesSettings(s => s
                        .ArgumentField("segmentasi")
                        .ValueField("baki_debet")
                        .IgnoreEmptyPoints(true)
                        .Type(SeriesType.Bar)
                        .Label(l => l
                            .Visible(true)
                            .CustomizeText("customizeLabel")
                            .Format(f => f
                                .Type(Format.FixedPoint)
                                .Precision(0)

                            )

                        )
                    )
                    .SeriesTemplate(t => t.NameField("segmentasi"))
                    .Tooltip(t => t
                        .Enabled(true)
                        .CustomizeTooltip(@<text>
                                function(arg) {
                                        return {
                                            text:"Rp. " + arg.valueText.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",")
                                        }
                                    }
                            </text>)
                    )
                    .ValueAxis(a => a
                        .Add()
                        .Label(l => l.CustomizeText(@<text>
                            function() {
                                    return this.valueText.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                                }
                        </text>))
                    )
                    .ArgumentAxis(a => a
                        .Label(l => l
                            .RotationAngle(30)
                            .OverlappingBehavior(OverlappingBehavior.Rotate)
                            .CustomizeText(@<text>
                                    function() {
                                                if (this.valueText.toString().length > 20) {
                                                    return  this.valueText.toString().substring(0, 19) + "...";
                                            }
                                            else {
                                                    return  this.valueText.toString();
                                            }
                                        }
                                </text>)
                            )
                    )
                    .Export(e => e.Enabled(true))
                    .OnExporting(@<text>
                            function(e) {
                                e.fileName = "BarChart_TA_" + new Date().toISOString().slice(0, 10);
                                $.ajax({
                                    type: "POST",
                                    url: "@Url.Action("LogExportIndex", "Monitoring")",
                                    success: function (response) {
                                        if (response.result == "Success") {

                                        }
                                    }
                                });
                            }
                        </text>))
            </div>
        </div>
        @*grid*@
        <div class="gridview-div">
            @BDA.Helper.BDADXExt.MonitoringDataGrid((Html.DevExtreme().DataGrid()
                .ID("grid1")
                .DataSource(d => d.Mvc()
                    .Controller("Monitoring")
                    .LoadAction("GetGridData")

                    .OnBeforeSend("onGridBeforeSend"))
                .RemoteOperations(true)
                .Width("100%")
                .AllowColumnResizing(true)
                .ColumnChooser(c => c.Enabled(true))
                .ColumnFixing(c => c.Enabled(true))
                .Scrolling(s => s.ShowScrollbar(ShowScrollbarMode.Always))
                .FilterRow(f => f.Visible(true))
                //.OnContentReady("onContentReady")
                .ShowBorders(false)

                ///.Selection(c => c.Mode(SelectionMode.Single))
                .Paging(p =>
                {
                    p.PageSize(15);
                    p.Enabled(true);

                })
                .Pager(p =>
                {
                    p.Visible(true);
                    p.ShowInfo(true);
                })
            ), db, isHive)
        </div>
    </div>
}