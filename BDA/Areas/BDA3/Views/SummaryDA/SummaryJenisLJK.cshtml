@using DevExtreme.AspNet.Mvc
@{
    Layout = "~/Views/Shared/_LayoutMainMetronic.cshtml";
    var mdl = new BDA.Models.MenuDbModels(db, Microsoft.AspNetCore.Http.Extensions.UriHelper.GetDisplayUrl(db.httpContext.Request).ToLower());
    var map = mdl.GetSiteDbMap();
    var currentNode = mdl.GetCurrentNode();
    var currentNodeBreadcrumb = mdl.GetCurrentNodeBreadcrumb();

    string title = null;
    if (currentNode != null) { title = currentNode.Title; }
    if (ViewBag.HeaderTitle != null) { title = ViewBag.HeaderTitle; }

    var maxItems = db.GetSetting("LimitFilterLJK");
    var maxExport = db.GetSetting("LimitExportExcelPDF");
    var thresholdNJOP = db.GetSetting("ThresholdNJOP");
    var thresholdPKPT = db.GetSetting("ThresholdPKPT");
    string id = "summary_dqm_per_jenis_ljk";
    ViewBag.id = id;
    bool isExport = ViewBag.Export;
}

@inject BDA.DataModel.DataEntities db

<script>
    window.jsPDF = window.jspdf.jsPDF;
    applyPlugin(window.jsPDF);
</script>

<script type="text/javascript">

    function ExportToPdf() {
        var pivotGrid = $("#grid1").dxPivotGrid("instance");
        pivotGrid.option("onFileSaving", function (e) {
            var fd = new FormData();
            fd.append("file", e.data);
            $.ajax({
                type: "POST",
                url: "@Url.Action("ExportPDF", "SummaryDA", new { id = id })",
                data: fd,
                processData: false,
                contentType: false
            }).done(function (data) {
                window.location = "@Url.Action("File", "SummaryDA", new { id = id })"
            });
            e.cancel = true;
        });

        pivotGrid.exportToExcel();
    }

    function ExportToExcel() {

        var menuName = "@(currentNode != null ? (currentNode.tooltip != null ? currentNode.Title + " (" + currentNode.tooltip + ")" : currentNode.Title) : "")";
        let bulanData = $("#Periode").dxTagBox("instance").option("selectedItems");
        let jenisLJK = $("#MemberTypes").dxTagBox("instance").option("selectedItems");
        let dq = $("#DQs").dxTagBox("instance").option("selectedItems");
        let bulanDataText = (bulanData.map(item => item.text)).join(", ");
        let jenisLJKText = (jenisLJK.map(item => item.Display)).join(", ");
        let dqText = (dq.map(item => item.text)).join(", ");

        $.ajax({
            type: "POST",
            url: "@Url.Action("LogExport", "SummaryDA", new { id = id })",
            success: function (response) {
                if (response.result == "Success") {
                    var workbook = new ExcelJS.Workbook();
                    var worksheet = workbook.addWorksheet('Main sheet');

                    DevExpress.excelExporter.exportPivotGrid({
                        component: $("#grid1").dxPivotGrid("instance"),
                        worksheet: worksheet,
                        topLeftCell: { row: 4, column: 1 },
                        exportRowFieldHeaders: true,
                        exportColumnFieldHeaders: false,
                        exportDataFieldHeaders: false,
                        exportFilterFieldHeaders: false,
                        customizeCell: function (options) {
                            var { pivotCell, excelCell } = options;

                            if (pivotCell.area === "data" && pivotCell.rowType === "D" && pivotCell.columnType === "D" || pivotCell.columnType === "GT") {
                                excelCell.numFmt = '#,##0';
                            }
                        }
                    }).then((cellRange) => {
                        let totalRows = (worksheet.rowCount - 4).toString();
                        const headerRow = worksheet.getRow(2);
                        headerRow.height = 130;
                        worksheet.mergeCells(2, 1, 2, 8);

                        headerRow.getCell(1).value = "Nama Menu: " + menuName + "\r \n" + "Bulan Data: " + bulanDataText + (jenisLJKText != null ? "\r \n" + "Jenis LJK: " + jenisLJKText : "") + (dqText != null ? "\r \n" + "Use Case: " + dqText : "" + "\r \n");

                        headerRow.getCell(1).font = { name: 'Calibri', size: 11 };
                        headerRow.getCell(1).alignment = { horizontal: 'Left', wrapText: true };

                        const headerTable = worksheet.getRow(4);
                        headerTable.height = 20;

                        headerTable.getCell(1).value = "Bulan Data                   Jenis LJK                                                        LJK"

                        headerTable.getCell(1).font = { name: 'Calibri', size: 11 };
                        headerTable.getCell(1).alignment = { horizontal: 'Left', wrapText: true };
                    }).then(function () {

                        workbook.xlsx.writeBuffer().then(function (buffer) {
                            saveAs(new Blob([buffer], { type: "application/octet-stream" }), "DA_@(id)_" + new Date().toISOString().slice(0, 10) + ".xlsx");
                        });
                    });
                }
            }
        });
    }

    function onSelectionChanged(e) {
        if (e.addedItems.length > 0) {
            e.component.field().val("");
        }
    }

    function gridOnBeforeSend(method, ajaxOptions) {
        let memberTypes = $("#MemberTypes").dxTagBox("instance").option("value");
        let periode = $("#Periode").dxTagBox("instance").option("value");
        let dqs = $("#DQs").dxTagBox("instance").option('value');
        ajaxOptions.data.memberTypes = JSON.stringify(memberTypes);
        ajaxOptions.data.periode = JSON.stringify(periode);
        ajaxOptions.data.dqs = JSON.stringify(dqs);
    }
</script>

<div class="card card-default">
    <div class="row filter-panel" style="padding-top:0px;">
        <div class="card-body">
            <div class="row">
                <div class="col-lg-4 form-group"> 
                    <label>Bulan Data</label>
                    @(Html.DevExtreme().TagBox()
                        .ID("Periode")
                        .DataSource(d => d.Mvc()
                            .Controller("Ref")
                            .Area("BDA2")
                            .LoadAction("GetPeriode")
                            .Key("value"))
                        .ValueExpr("value")
                        .DisplayExpr("text")
                        .ShowSelectionControls(true)
                        .MaxDisplayedTags(3)
                        .SearchEnabled(true)
                        .ShowClearButton(true)
                        .OnSelectionChanged("onSelectionChanged")
                        .Width("100%")
                        //.Value(p)
                        )
                </div>
                <div class="col-lg-4 form-group">
                    <label>Jenis LJK</label>
                    @(Html.DevExtreme().TagBox()
                        .ID("MemberTypes")
                        .DataSource(d => d.Mvc()
                            .Controller("Ref")
                            .Area("BDA2")
                            .LoadAction("GetMemberTypes")
                            .Key("kode_jenis_ljk"))
                        //.DataSourceOptions(d => d.Paginate(true).PageSize(10))
                        .ValueExpr("kode_jenis_ljk")
                        .DisplayExpr("Display")
                        .ShowSelectionControls(true)
                        .MaxDisplayedTags(3)
                        .SearchEnabled(true)
                        .ShowClearButton(true)
                        .OnSelectionChanged("onSelectionChanged")
                        .Width("100%"))
                </div>
                <div class="col-lg-4 form-group">
                    <label>Use Case</label>
                    @(Html.DevExtreme().TagBox()
                        .ID("DQs")
                        .DataSource(d => d.Mvc()
                            .Controller("Ref")
                            .Area("BDA2")
                            .LoadAction("GetDQs")
                            .Key("kode")
                        )
                        .DataSourceOptions(d => d.Paginate(true).PageSize(10))
                        .ValueExpr("kode")
                        .DisplayExpr("text")
                        .ShowSelectionControls(true)
                        .MaxDisplayedTags(3)
                        .SearchEnabled(true)
                        .ShowClearButton(true)
                        .OnSelectionChanged("onSelectionChanged")
                        .Width("100%"))
                </div>
                
            </div>

            <div class="float-left">
                @(Html.DevExtreme().Button().Type(ButtonType.Default).Text("Tampilkan").OnClick(@<text>
                    function () {
                    $("#grid1").dxPivotGrid("instance").getDataSource().reload();
                    }
                </text>))
                <div style="border-radius: 10px; background-color: transparent; padding: 3px; margin-top: 10px;">
                    <span style="color: red; font-weight: normal; font-size: 12px;">DA14 memiliki threshold Nilai Agunan Wajar (NJOP) ≤ @thresholdNJOP dan DA15 memiliki threshold Penghasilan Kotor Per Tahun ≤ @thresholdPKPT</span>
                </div>
            </div>

            <div class="float-right">
                @if (ViewBag.Export)
                {
                    <a class="btn btn-light-primary font-weight-bolder btn-sm mr-2" href="javascript:ExportToExcel();" title="Export Excel maksimal @maxExport data"><span class="image fa fa-file-excel"></span> Export Excel</a>
                    <a class="btn btn-light-primary font-weight-bolder btn-sm mr-2" href="javascript:ExportToPdf();" title="Export PDF maksimal @maxExport data"><span class="image fa fa-file-pdf"></span> Export PDF</a>
                }
            </div>
        </div>
    </div>

    <div class="pivotgrid-div">

        @Html.AntiForgeryToken()

        @(Html.DevExtreme().PivotGrid()
            .ID("grid1")
            .DataSource(d => d
            .Fields(fields =>
            {
                fields.Add()
                .Caption("Bulan Data")
                .DataField("Period")
                .Width(100)
                .DataType(PivotGridDataType.Date)
                .Expanded(true)
                .ShowTotals(false)
                .Area(PivotGridArea.Row)
                .Format("yyyy-MM-dd");

                fields.Add()
                .Caption("Jenis LJK")
                .Width(200)
                .DataField("JenisLJK")
                .Expanded(true)
                .ShowTotals(false)
                .Area(PivotGridArea.Row);

                fields.Add()
                .Caption("LJK")
                .Width(200)
                .DataField("NamaLJK")
                .ShowTotals(false)
                .Area(PivotGridArea.Row);

                fields.Add()
                .Caption("Usecase")
                .Width(75)
                .DataField("MenuName")
                .Expanded(true)
                .ShowTotals(false)
                .Area(PivotGridArea.Column);

                fields.Add()
                .Caption("Total Anomali")
                .DataField("Rows")
                .DataType(PivotGridDataType.Number)
                .ShowValues(true)
                .SummaryType(SummaryType.Sum)
                .Area(PivotGridArea.Data)
                .Format(",##0");
            })
            .Store(s => s.Mvc()
                .Controller("SummaryDA")
                .LoadAction("GetGridDataSummaryJenisLJK")
                .OnBeforeSend("gridOnBeforeSend")
                .Key("nama_ljk"))
            )
            .FieldPanel(p => p.ShowColumnFields(false)
                .ShowDataFields(false)
                .ShowFilterFields(false)
                .ShowRowFields(true)
                .AllowFieldDragging(false)
                .Visible(true)
            )
            .RowHeaderLayout(PivotGridRowHeadersLayout.Standard)
            .AllowSorting(true)
            .AllowExpandAll(true)
            .Scrolling(s => s.Mode(PivotGridScrollingMode.Standard))
            .Height(570)
            .ShowBorders(true)
            .ShowRowGrandTotals(false)
            .FieldChooser(fc => fc.Enabled(false))
            )

    </div>
</div>


