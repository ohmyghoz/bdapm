@using DevExtreme.AspNet.Mvc
@{
    Layout = "~/Views/Shared/_LayoutMainMetronic.cshtml";
    var maxItems = db.GetSetting("LimitFilterLJK");
    var maxExport = db.GetSetting("LimitExportExcelPDF");
    bool isExport = ViewBag.Export;
    string reportId = ViewBag.id;
    bool isHive = ViewBag.Hive;
    var bd = (string[])TempData.Peek("periode");
    string addinfo=null;
    var cekKet=(from q in db.Master_Keterangan
                where q.Stsrc=="A" && q.mk_kode==reportId
                select q.mk_keterangan);
    if (cekKet.Count() != 0)
    {
        addinfo = cekKet.FirstOrDefault();
    }
}

@inject BDA.DataModel.DataEntities db


<script>
    window.jsPDF = window.jspdf.jsPDF;
    applyPlugin(window.jsPDF);
</script>

<script type="text/javascript">
    function ExportToCSV() {
        var grid = $("#grid1").dxDataGrid("instance");
        $.ajax({
            type: "POST",
            url: "@Url.Action("LogExportIndex", "DA2023", new {reportId = reportId})",
            success: function (response) {
                if (response.result == "Success") {
                    var workbook = new ExcelJS.Workbook();
                    var worksheet = workbook.addWorksheet('Main sheet');
                    
                    DevExpress.excelExporter.exportDataGrid({
                        component: $("#grid1").dxDataGrid("instance"),
                        worksheet: worksheet,
                        autoFilterEnabled: true
                    }).then(function () {
                        workbook.csv.writeBuffer().then(function (buffer) {
                            saveAs(new Blob([buffer], { type: "application/octet-stream" }), "DA_@(reportId)_" + new Date().toISOString().slice(0, 10) + ".csv");
                        });
                    });
                    grid.cancel = true;
                }
            }
        });
    }
    function ExportToExcel() {
        $.ajax({
            type: "POST",
            url: "@Url.Action("LogExportIndex", "DA2023", new {reportId = reportId})",
            success: function (response) {
                if (response.result == "Success") {
                    var workbook = new ExcelJS.Workbook();
                    var worksheet = workbook.addWorksheet('Main sheet');
                    DevExpress.excelExporter.exportDataGrid({
                        component: $("#grid1").dxDataGrid("instance"),
                        worksheet: worksheet,
                        customizeCell: function (options) {
                            var { gridCell, excelCell } = options;

                            if (gridCell.rowType === 'data') {
                                if (options.gridCell.column.dataType === 'number') {
                                    excelCell.numFmt = '#,##0.00';
                                }
                            }
                        }
                    }).then(function () {
                        workbook.xlsx.writeBuffer().then(function (buffer) {
                            saveAs(new Blob([buffer], { type: "application/octet-stream" }), "DA_@(reportId)_" + new Date().toISOString().slice(0, 10) + ".xlsx");
                        });
                    });
                }
            }
        });
    }

    function CFE(filterValue, selectedFilterOperation) {
        if (selectedFilterOperation === "=") {
            var filterExpression = [
                [this.dataField, ">=", filterValue - 0.5],
                "and", [this.dataField, "<=", filterValue + 0.5]
            ];
            return filterExpression;
        }
        return [this.dataField, selectedFilterOperation || '=', filterValue];
    }

    function ExportToPdf() {
        $.ajax({
            type: "POST",
            url: "@Url.Action("LogExportIndex", "DA2023", new {reportId = reportId})",
            success: function (response) {
                if (response.result == "Success") {
                    const doc = new jsPDF({
                        orientation: "landscape",
                        unit: "cm",
                        format: [21, 60]
                    });
                    var dataGrid = $("#grid1").dxDataGrid("instance");
                    var fileName = "DA_@(reportId)_" + new Date().toISOString().slice(0, 10) + ".pdf";
                    doc.setFontSize("6")
                    //var keys = $("#grid1").dxDataGrid("getSelectedRowsData")
                    //console.log(keys)
                    DevExpress.pdfExporter.exportDataGrid({
                        jsPDFDocument: doc,
                        component: dataGrid,
                        keepColumnWidths: true
                        //selectedRowsOnly: true
                    }).then(function () {
                        doc.save(fileName);
                    });
                }
            }
        });
    }

    function ExportToPdf2() {
        var dataGrid = $("#grid1").dxDataGrid("instance");
        dataGrid.option("onExporting", function (e) { });
        dataGrid.option("onFileSaving", function (e) {
            var fd = new FormData();
            fd.append("file", e.data);
            $.ajax({
                type: "POST",
                url: "@Url.Action("ExportPDF", "DA2023", new {reportId = reportId})",
                data: fd,
                processData: false,
                contentType: false
            }).done(function (data) {
                window.location = "@Url.Action("File", "DA2023", new {reportId = reportId})"
            });
            e.cancel = true;
        });

        dataGrid.exportToExcel();
    }
    function Antrian() {
        $("#grid1").dxDataGrid("instance").refresh().then(function () {
            $.ajax({
			type: "POST",
			url: "@Url.Action("Antrian", "DA2023", new { reportId = reportId })",
			contentType: "application/x-www-form-urlencoded;charset=UTF-8",
            dataType: "json",
            success: function (response) {
                swal({ type: 'success', title: 'Success', text: response });
            },
            error: function (response) {
                swal({ type: 'error', title: 'Failed', text: response });
            }
		    });
        });
    }
    var resetLJK;
    var resetKC;

    $(document).ready(function () {
        $("#NilaiNJOP").dxNumberBox("instance").option("value", null);
    });

    $(function () {
        $("#Periode").dxValidator({
            validationGroup: "Filter",
            validationRules: [{ type: "required", message: "[Periode] harus dipilih" }]
        })

        $("#NilaiNJOP").dxValidator({
            validationGroup: "Filter",
            validationRules: [{ type: "required", message: "[Nilai NJOP] harus diisi" }]
        })
    });

    function onSelectionChanged(e) {
        if (e.addedItems.length > 0) {
            e.component.field().val("");
        }
    }

    function onJenisLJKChanged(e) {
        resetLJK = true;
        $("#Members").dxTagBox("instance").getDataSource().reload();
        $("#Members").dxTagBox("reset");
        resetLJK = false;

        resetKC = true;
        $("#KantorCabangs").dxTagBox("instance").getDataSource().reload();
        $("#KantorCabangs").dxTagBox("reset");
        resetKC = false;
    }

    function onButtonFilterClicked(e) {
        const res = e.validationGroup.validate();
        if (res.status === "valid") {
            $("#grid1").dxDataGrid("instance").refresh();
        }
    }

    //function ChangeNodata() {
    //    let periode = $("#Periode").dxTagBox("instance").option("value");
    //    if (periode == null) {
    //        $("#grid1").dxDataGrid("instance").option("noDataText", 'No Data');
    //    } else {
    //        $.ajax({
			 //   type: "POST",
			 //   url: "@Url.Action("CekNoData", "DA2023", new { reportId = reportId })",
			 //   contentType: "application/x-www-form-urlencoded;charset=UTF-8",
    //            dataType: "json",
    //            data: {
    //                periodes: JSON.stringify(periode)
    //            },
    //            success: function (response) {
    //                $("#grid1").dxDataGrid("instance").option("noDataText", response.result);
    //            },
    //            error: function (response) {
    //                swal({ type: 'error', title: 'Failed', text: response });
    //            }
		  //  });
    //    }
    //}

    function onGridBeforeSend(method, ajaxOptions) {
        let memberTypes = $("#MemberTypes").dxTagBox("instance").option("value");
        let members = $("#Members").dxTagBox("instance").option("value");
        let kantorCabangs = $("#KantorCabangs").dxTagBox("instance").option("value");
        let jenisDebiturs = $("#JenisDebiturs").dxTagBox("instance").option("value");
        let nilaiNJOP = $("#NilaiNJOP").dxNumberBox("instance").option("value");
        let periode = $("#Periode").dxTagBox("instance").option("value");
        ajaxOptions.data.memberTypes = JSON.stringify(memberTypes);
        ajaxOptions.data.members = JSON.stringify(members);
        ajaxOptions.data.kantorCabangs = JSON.stringify(kantorCabangs);
        ajaxOptions.data.jenisDebiturs = JSON.stringify(jenisDebiturs);
        ajaxOptions.data.nilaiNJOP = nilaiNJOP;
        ajaxOptions.data.periode = JSON.stringify(periode);
        ajaxOptions.data.reportId = '@reportId';
    }

    function onLJKOpened(e) {
        e.component.content().find('.dx-list-select-all').hide();
    }

    function onOpened(e) {
        $('.dx-list-select-all').hide()
    }

    function onOpened2(e) {
        $('.dx-list-select-all').show()
    }

    const maxItems = @maxItems;

    function onLJKChanged(e) {
        if (e.value.length > maxItems) {
            const newValue = e.value.slice(0, maxItems);
            e.component.option("value", newValue);
            //tooltip.show();
        }

        resetKC = true;
        $("#KantorCabangs").dxTagBox("instance").getDataSource().reload();
        $("#KantorCabangs").dxTagBox("reset");
        resetKC = false;
    }

    function onKCChanged(e) {
        if (e.value.length > maxItems) {
            const newValue = e.value.slice(0, maxItems);
            e.component.option("value", newValue);
            //tooltip.show();
        }
    }

    function formatNumber(e) {
        let input = e.value.replace(/,/g, '').replace(/[^0-9]/g, '');

        if (input.length > 0 && input[0] === '0') {
            input = input.slice(1);
        }

        let formattedNumber = "";
        let digitCount = 0;

        for (let i = input.length - 1; i >= 0; i--) {
            formattedNumber = input.charAt(i) + formattedNumber;
            digitCount++;

            if (digitCount === 3 && i !== 0) {
                formattedNumber = ',' + formattedNumber;
                digitCount = 0;
            }
        }

        e.value = formattedNumber;
    }

</script>

<style type="text/css">
    .mandatory {
        color: red;
    }
</style>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="card card-default">
        @*filter*@
        <div class="row filter-panel" style="padding-top:0px;">
            <div class="card-body">
                <div class="row">
                    <div class="col-lg-4 form-group"> 
                        <label>Bulan Data<span class="mandatory">*</span></label>
                        @(Html.DevExtreme().TagBox()
                            .ID("Periode")
                            .DataSource(d => d.Mvc()
                                .Controller("Ref")
                                .Area("BDA2")
                                .LoadAction("GetPeriode")
                                .Key("value"))
                            .ValueExpr("value")
                            .DisplayExpr("text")
                            .ShowSelectionControls(true)
                            .MaxDisplayedTags(3)
                            .SearchEnabled(true)
                            .ShowClearButton(true)
                            .OnSelectionChanged("onSelectionChanged")
                            .Width("100%")
                            //.Value(p)
                            )
                    </div>
                    <div class="col-lg-4 form-group">
                        <label>Jenis LJK</label>
                        @(Html.DevExtreme().TagBox()
                            .ID("MemberTypes")
                            .DataSource(d => d.Mvc()
                                .Controller("Ref")
                                .Area("BDA2")
                                .LoadAction("GetMemberTypes")
                                .Key("kode_jenis_ljk"))
                            //.DataSourceOptions(d => d.Paginate(true).PageSize(10))
                            .ValueExpr("kode_jenis_ljk")
                            .DisplayExpr("Display")
                            .ShowSelectionControls(true)
                            .MaxDisplayedTags(3)
                            .SearchEnabled(true)
                            .ShowClearButton(true)
                            .OnContentReady("onOpened2")
                            .OnOpened("onOpened2")
                            .OnSelectionChanged("onSelectionChanged")
                            .OnValueChanged("onJenisLJKChanged")
                            .Width("100%"))
                    </div>
                    <div class="col-lg-4 form-group">
                        <label>Kode LJK</label>
                        @(Html.DevExtreme().TagBox()
                            .ID("Members")
                            .DataSource(d => d.Mvc()
                                .Controller("Ref")
                                .Area("BDA2")
                                .LoadAction("GetMembers")
                                .LoadParams(new { memberTypes = new JS("function() { return $(\"#MemberTypes\").dxTagBox(\"instance\").option(\"value\"); }"), reset = new JS("function() { return resetLJK; }") })
                                //.Key("kode_ljk")
                                .Key("CompositeKey")
                            )
                            .DataSourceOptions(d => d.Paginate(true).PageSize(10))
                            //.ValueExpr("kode_ljk")
                            .ValueExpr("CompositeKey")
                            .DisplayExpr("Display")
                            .ShowSelectionControls(true)
                            .MaxDisplayedTags(3)
                            .SearchEnabled(true)
                            .ShowClearButton(true)
                            .OnSelectionChanged("onSelectionChanged")
                            .OnContentReady("onOpened")
                            .OnOpened("onOpened")
                            .OnInput("onLJKOpened")
                            .OnValueChanged("onLJKChanged")
                            .Width("100%"))
                    </div>
                    <div class="col-lg-4 form-group">
                        <label>Nilai NJOP ≤ <span class="mandatory">*</span></label>
                        @(Html.DevExtreme().NumberBox().ID("NilaiNJOP").Width("100%").Format(",##0"))
                    </div>
                    <div class="col-lg-4 form-group">
                        <label>Kantor Cabang</label>
                        @(Html.DevExtreme().TagBox()
                            .ID("KantorCabangs")
                            .DataSource(d => d.Mvc()
                                .Controller("Ref")
                                .Area("BDA2")
                                .LoadAction("GetKantorCabangs")
                                .LoadParams(new { memberTypes = new JS("function() { return $(\"#MemberTypes\").dxTagBox(\"instance\").option(\"value\"); }"), members = new JS("function() { return $(\"#Members\").dxTagBox(\"instance\").option(\"value\"); }"), reset = new JS("function() { return resetKC; }") })
                                .Key("kode")
                            )
                            .DataSourceOptions(d => d.Paginate(true).PageSize(10))
                            .ValueExpr("kode")
                            .DisplayExpr("text")
                            .ShowSelectionControls(true)
                            .MaxDisplayedTags(3)
                            .SearchEnabled(true)
                            .ShowClearButton(true)
                            .OnSelectionChanged("onSelectionChanged")
                            .OnContentReady("onOpened")
                            .OnOpened("onOpened")
                            .OnInput("onOpened")
                            .OnValueChanged("onKCChanged")
                            .Width("100%"))
                    </div>
                    <div class="col-lg-4 form-group">
                        <label>Jenis Debitur</label>
                        @(Html.DevExtreme().TagBox()
                            .ID("JenisDebiturs")
                            .DataSource(d => d.Mvc()
                                .Controller("Ref")
                                .Area("BDA2")
                                .LoadAction("GetJenisDebiturDAs")
                                .Key("kode")
                            )
                            .DataSourceOptions(d => d.Paginate(true).PageSize(10))
                            .ValueExpr("kode")
                            .DisplayExpr("text")
                            .ShowSelectionControls(true)
                            .MaxDisplayedTags(3)
                            .SearchEnabled(true)
                            .OnOpened("onOpened2")
                            .OnContentReady("onOpened2")
                            .ShowClearButton(true)
                            .Width("100%"))
                    </div>
                    @if (addinfo != null && addinfo.Trim() != "")
                    {
                        <div class="col-lg-12" id="divSkenario" style="display:block">
                            <div style="margin-bottom: 40px">@Html.Raw(addinfo)</div>
                        </div>
                    }
                </div>

                <div class="float-left">
                    @(Html.DevExtreme().Button()
                        .ID("Filter")
                        .Type(ButtonType.Default)
                        .Text("Tampilkan")
                        .OnClick("onButtonFilterClicked")
                        .ValidationGroup("Filter"))
                </div>

                <div class="float-right">
                    @if (ViewBag.Export)
                    {
                        <a class="btn btn-light-primary font-weight-bolder btn-sm mr-2" href="javascript:Antrian();"><span class="image fa fa-file-invoice"></span> Antrian (CSV)</a>
                        <a class="btn btn-light-primary font-weight-bolder btn-sm mr-2" href="javascript:ExportToExcel();" title="Export Excel maksimal @maxExport data"><span class="image fa fa-file-excel"></span> Export Excel</a>
                        <a class="btn btn-light-primary font-weight-bolder btn-sm mr-2" href="javascript:ExportToPdf2();" title="Export PDF maksimal @maxExport data"><span class="image fa fa-file-pdf"></span> Export PDF</a>
                        <a class="btn btn-light-primary font-weight-bolder btn-sm mr-2" href="javascript:ExportToCSV();"><span class="image fa fa-file-archive"></span> Export CSV</a>
                    }
                </div>
            </div>
        </div>

        @*grid*@
        <div class="gridview-div">
            @(Html.DevExtreme().DataGrid()
                .ID("grid1")
                .DataSource(d => d.Mvc()
                    .Controller("DA2023")
                    .LoadAction("GetGridDataDA_AnomaliNilaiNJOPAgunan")
                    .OnBeforeSend("onGridBeforeSend"))
                .RemoteOperations(true)
                .Width("100%")
                //.ColumnChooser(c => c.Enabled(true))
                .AllowColumnResizing(true)
                //.OnContentReady("ChangeNodata")
                .Scrolling(s => s.ShowScrollbar(ShowScrollbarMode.Always))             
                .ShowBorders(false)
                .Columns(columns =>
                {
                    columns.Add().DataField("dm_bulan_data").Caption("Bulan Data").Width(250).DataType(GridColumnDataType.String).Format("");
                    columns.Add().DataField("dm_jenis_ljk").Caption("Jenis LJK").Width(250);
                    columns.Add().DataField("dm_kode_ljk").Caption("Kode LJK").Width(250);
                    columns.Add().DataField("dm_nama_ljk").Caption("Nama LJK").Width(550);
                    columns.Add().DataField("dm_kode_kantor_cabang").Caption("Kode Kantor Cabang").Width(250);
                    columns.Add().DataField("dm_nama_kantor_cabang").Caption("Nama Kantor Cabang").Width(550);
                    columns.Add().DataField("dm_cif").Caption("CIF").Width(250);
                    columns.Add().DataField("nomor_identitas_nomor_identitas_badan_usaha").Caption("Nomor Identitas - Nomor Identitas Badan Usaha").Width(350);
                    columns.Add().DataField("nama_sesuai_identitas_nama_badan_usaha").Caption("Nama Sesuai Identitas - Nama Badan Usaha").Width(350);
                    columns.Add().DataField("dm_no_rekening").Caption("No Rekening").Width(250);
                    columns.Add().DataField("dm_kode_reg_agunan").Caption("Kode Reg Agunan").Width(250);
                    columns.Add().DataField("dm_jenis_agunan").Caption("Jenis Agunan").Width(250);
                    columns.Add().DataField("dm_baki_debet_nominal").Caption("Baki Debet / Nominal").Width(250).DataType(GridColumnDataType.Number).Format(",##0");
                    columns.Add().DataField("dm_nilai_agunan_wajar").Caption("Nilai Agunan Wajar (NJOP)").Width(250).DataType(GridColumnDataType.Number).Format(",##0");
                    columns.Add().DataField("jenis_debitur_jenis_badan_usaha").Caption("Jenis Debitur - Jenis Badan Usaha").Width(400);
                    columns.Add().DataField("dm_segmen").Caption("Segmen").Width(250);
                    columns.Add().DataField("dm_kode_anomali").Caption("Kode Anomali").Width(250);
                })
                .Selection(c => c.Mode(SelectionMode.Single))
                .FilterRow(f => f.Visible(true))
                .Paging(p =>
                {
                    p.PageSize(15);
                    p.Enabled(true);
                })
                .Pager(p =>
                {
                    p.Visible(true);
                    p.ShowInfo(true);
                })                
            )
        </div>
    </div>
}