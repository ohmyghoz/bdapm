@using DevExtreme.AspNet.Mvc
@{
    Layout = "~/Views/Shared/_LayoutMainMetronic.cshtml";
    var mdl = new BDA.Models.MenuDbModels(db, Microsoft.AspNetCore.Http.Extensions.UriHelper.GetDisplayUrl(db.httpContext.Request).ToLower());
    var map = mdl.GetSiteDbMap();
    var currentNode = mdl.GetCurrentNode();
    var currentNodeBreadcrumb = mdl.GetCurrentNodeBreadcrumb();

    string title = null;
    if (currentNode != null) { title = currentNode.Title; }
    if (ViewBag.HeaderTitle != null) { title = ViewBag.HeaderTitle; }

    var maxItems = db.GetSetting("LimitFilterLJK");
    bool isExport = ViewBag.Export;
    string reportId = ViewBag.id;
    bool isHive = ViewBag.Hive;
    var bd = (string[])TempData.Peek("periode");
    string addinfo=null;
    string deskExp=null;
    var cekKet=(from q in db.Master_Keterangan
                where q.Stsrc=="A" && q.mk_kode==reportId
                select q.mk_keterangan);
    if (cekKet.Count() != 0)
    {
        addinfo = cekKet.FirstOrDefault();
    }
    var deskripsiExport = (from q in db.Master_Keterangan
                where q.Stsrc=="A" && q.mk_kode==reportId
                select q.mk_deskripsi_export);
    if (deskripsiExport.Count() != 0)
    {
        deskExp = deskripsiExport.FirstOrDefault();
    }
}

@inject BDA.DataModel.DataEntities db


<script>
    window.jsPDF = window.jspdf.jsPDF;
    applyPlugin(window.jsPDF);
</script>

<script type="text/javascript">
    function ExportToCSV() {
        var grid = $("#grid1").dxDataGrid("instance");
        $.ajax({
            type: "POST",
            url: "@Url.Action("LogExportIndex", "DA2023", new {reportId = reportId})",
            success: function (response) {
                if (response.result == "Success") {
                    var workbook = new ExcelJS.Workbook();
                    var worksheet = workbook.addWorksheet('Main sheet');
                    
                    DevExpress.excelExporter.exportDataGrid({
                        component: $("#grid1").dxDataGrid("instance"),
                        worksheet: worksheet,
                        autoFilterEnabled: true
                    }).then(function () {
                        workbook.csv.writeBuffer().then(function (buffer) {
                            saveAs(new Blob([buffer], { type: "application/octet-stream" }), "DA_@(reportId)_" + new Date().toISOString().slice(0, 10) + ".csv");
                        });
                    });
                    grid.cancel = true;
                }
            }
        });
    }
    function ExportToExcel() {

        var menuName = "@(currentNode != null ? (currentNode.tooltip!=null?currentNode.Title + " (" + currentNode.tooltip + ")" : currentNode.Title ) : "")";
        let bulanData = $("#Periode").dxTagBox("instance").option("selectedItems");
        let jenisLJK = $("#MemberTypes").dxTagBox("instance").option("selectedItems");
        let kodeLJK = $("#Members").dxTagBox("instance").option("selectedItems");
        let kantorCabang = $("#KantorCabangs").dxTagBox("instance").option("selectedItems");
        let bulanDataText = (bulanData.map(item => item.text)).join(", ");
        let jenisLJKText = (jenisLJK.map(item => item.Display)).join(", ");
        let kodeLJKText = (kodeLJK.map(item => item.Display)).join(", ");
        let kantorCabangText = (kantorCabang.map(item => item.text)).join(", ");
        var deskripsiExportValue = `@Html.Raw(deskExp)`;

        $.ajax({
            type: "POST",
            url: "@Url.Action("LogExportIndex", "DA2023", new { reportId = reportId })",
            success: function (response) {
                if (response.result == "Success") {
                    var workbook = new ExcelJS.Workbook();
                    var worksheet = workbook.addWorksheet('Main sheet');

                    DevExpress.excelExporter.exportDataGrid({
                        component: $("#grid1").dxDataGrid("instance"),
                        worksheet: worksheet,
                        topLeftCell: { row: 4, column: 1 },
                        customizeCell: function (options) {
                            var { gridCell, excelCell } = options;

                            if (gridCell.rowType === 'data') {
                                if (options.gridCell.column.dataType === 'number') {
                                    excelCell.numFmt = '#,##0.00';
                                }
                            }
                        }
                    }).then((cellRange) => {
                        let totalRows = (worksheet.rowCount - 4).toString();
                        const headerRow = worksheet.getRow(2);
                        headerRow.height = 60;
                        worksheet.mergeCells(2, 1, 2, 8);

                        headerRow.getCell(1).value = "Nama Menu: " + menuName + (deskripsiExportValue != null ? "\r \n" + "Deskripsi Kode Anomali: " + deskripsiExportValue : "") + "\r \n" + "Total Rows: " + totalRows + "\r \n" + "Bulan Data: " + bulanDataText + (jenisLJKText != null ? "\r \n" + "Jenis LJK: " + jenisLJKText : "") + (kodeLJKText != null ? "\r \n" + "Kode LJK: " + kodeLJKText : "") + (kantorCabangText != null ? "\r \n" + "Kantor Cabang: " + kantorCabangText : "" + "\r \n");

                        headerRow.getCell(1).font = { name: 'Calibri', size: 12 };
                        headerRow.getCell(1).alignment = { horizontal: 'Left', wrapText: true };
                    }).then(function () {

                        workbook.xlsx.writeBuffer().then(function (buffer) {
                            saveAs(new Blob([buffer], { type: "application/octet-stream" }), "DA_@(reportId)_" + new Date().toISOString().slice(0, 10) + ".xlsx");
                        });
                    });
                }
            }
        });
    }

    function CFE(filterValue, selectedFilterOperation) {
        if (selectedFilterOperation === "=") {
            var filterExpression = [
                [this.dataField, ">=", filterValue - 0.5],
                "and", [this.dataField, "<=", filterValue + 0.5]
            ];
            return filterExpression;
        }
        return [this.dataField, selectedFilterOperation || '=', filterValue];
    }

    function ExportToPdf() {
        $.ajax({
            type: "POST",
            url: "@Url.Action("LogExportIndex", "DA2023", new {reportId = reportId})",
            success: function (response) {
                if (response.result == "Success") {
                    const doc = new jsPDF({
                        orientation: "landscape",
                        unit: "cm",
                        format: [21, 60]
                    });
                    var dataGrid = $("#grid1").dxDataGrid("instance");
                    var fileName = "DA_@(reportId)_" + new Date().toISOString().slice(0, 10) + ".pdf";
                    doc.setFontSize("6")
                    //var keys = $("#grid1").dxDataGrid("getSelectedRowsData")
                    //console.log(keys)
                    DevExpress.pdfExporter.exportDataGrid({
                        jsPDFDocument: doc,
                        component: dataGrid,
                        keepColumnWidths: true
                        //selectedRowsOnly: true
                    }).then(function () {
                        doc.save(fileName);
                    });
                }
            }
        });
    }

    function ExportToPdf2() {
        var dataGrid = $("#grid1").dxDataGrid("instance");
        dataGrid.option("onExporting", function (e) { });
        dataGrid.option("onFileSaving", function (e) {
            var fd = new FormData();

            var menuName = "@(currentNode != null ? (currentNode.tooltip!=null?currentNode.Title + " (" + currentNode.tooltip + ")" : currentNode.Title ) : "")";
            let bulanData = $("#Periode").dxTagBox("instance").option("selectedItems");
            let jenisLJK = $("#MemberTypes").dxTagBox("instance").option("selectedItems");
            let kodeLJK = $("#Members").dxTagBox("instance").option("selectedItems");
            let kantorCabang = $("#KantorCabangs").dxTagBox("instance").option("selectedItems");
            let bulanDataText = (bulanData.map(item => item.text)).join(", ");
            let jenisLJKText = (jenisLJK.map(item => item.Display)).join(", ");
            let kodeLJKText = (kodeLJK.map(item => item.Display)).join(", ");
            let kantorCabangText = (kantorCabang.map(item => item.text)).join(", ");
            var deskripsiExportValue = `@Html.Raw(deskExp)`;
            fd.append("file", e.data);

            fd.append("menuName", menuName);
            fd.append("deskripsiExport", deskripsiExportValue);
            fd.append("bulanData", bulanDataText);
            fd.append("jenisLJK", jenisLJKText);
            fd.append("kodeLJK", kodeLJKText);
            fd.append("kantorCabang", kantorCabangText);
            fd.append("totalRows", (dataGrid.totalCount()).toString());

            $.ajax({
                type: "POST",
                url: "@Url.Action("ExportPDF", "DA2023", new {reportId = reportId})",
                data: fd,
                processData: false,
                contentType: false
            }).done(function (data) {
                window.location = "@Url.Action("File", "DA2023", new {reportId = reportId})"
            });
            e.cancel = true;
        });

        dataGrid.exportToExcel();
    }
    function Antrian() {
        $("#grid1").dxDataGrid("instance").refresh().then(function () {
            $.ajax({
			type: "POST",
			url: "@Url.Action("Antrian", "DA2023", new { reportId = reportId })",
			contentType: "application/x-www-form-urlencoded;charset=UTF-8",
            dataType: "json",
            success: function (response) {
                swal({ type: 'success', title: 'Success', text: response });
            },
            error: function (response) {
                swal({ type: 'error', title: 'Failed', text: response });
            }
		    });
        });
    }
    var resetLJK;
    var resetKC;

    $(function () {
        $("#Periode").dxValidator({
            validationGroup: "Filter",
            validationRules: [{ type: "required", message: "[Periode] harus dipilih" }]
        })

    });

    function onSelectionChanged(e) {
        if (e.addedItems.length > 0) {
            e.component.field().val("");
        }
    }

    function onJenisLJKChanged(e) {
        resetLJK = true;
        $("#Members").dxTagBox("instance").getDataSource().reload();
        $("#Members").dxTagBox("reset");
        resetLJK = false;

        resetKC = true;
        $("#KantorCabangs").dxTagBox("instance").getDataSource().reload();
        $("#KantorCabangs").dxTagBox("reset");
        resetKC = false;
    }

    function onButtonFilterClicked(e) {
        const res = e.validationGroup.validate();
        if (res.status === "valid") {
            $("#grid1").dxDataGrid("instance").refresh();
        }
    }

    //function ChangeNodata() {
    //    let periode = $("#Periode").dxTagBox("instance").option("value");
    //    if (periode == null) {
    //        $("#grid1").dxDataGrid("instance").option("noDataText", 'No Data');
    //    } else {
    //        $.ajax({
			 //   type: "POST",
			 //   url: "@Url.Action("CekNoData", "DA2023", new { reportId = reportId })",
			 //   contentType: "application/x-www-form-urlencoded;charset=UTF-8",
    //            dataType: "json",
    //            data: {
    //                periodes: JSON.stringify(periode)
    //            },
    //            success: function (response) {
    //                $("#grid1").dxDataGrid("instance").option("noDataText", response.result);
    //            },
    //            error: function (response) {
    //                swal({ type: 'error', title: 'Failed', text: response });
    //            }
		  //  });
    //    }
    //}

    function onGridBeforeSend(method, ajaxOptions) {
        let memberTypes = $("#MemberTypes").dxTagBox("instance").option("value");
        let members = $("#Members").dxTagBox("instance").option("value");
        let kantorCabangs = $("#KantorCabangs").dxTagBox("instance").option("value");
        let periode = $("#Periode").dxTagBox("instance").option("value");
        ajaxOptions.data.memberTypes = JSON.stringify(memberTypes);
        ajaxOptions.data.members = JSON.stringify(members);
        ajaxOptions.data.kantorCabangs = JSON.stringify(kantorCabangs);
        ajaxOptions.data.periode = JSON.stringify(periode);
        ajaxOptions.data.reportId = '@reportId';
    }

    function onLJKOpened(e) {
        e.component.content().find('.dx-list-select-all').hide();
    }

    function onOpened(e) {
        $('.dx-list-select-all').hide()
    }

    function onOpened2(e) {
        $('.dx-list-select-all').show()
    }

    const maxItems = @maxItems;

    function onLJKChanged(e) {
        if (e.value.length > maxItems) {
            const newValue = e.value.slice(0, maxItems);
            e.component.option("value", newValue);
            //tooltip.show();
        }

        resetKC = true;
        $("#KantorCabangs").dxTagBox("instance").getDataSource().reload();
        $("#KantorCabangs").dxTagBox("reset");
        resetKC = false;
    }

    function onKCChanged(e) {
        if (e.value.length > maxItems) {
            const newValue = e.value.slice(0, maxItems);
            e.component.option("value", newValue);
            //tooltip.show();
        }
    }

</script>

<style type="text/css">
    .mandatory {
        color: red;
    }
</style>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="card card-default">
        @*filter*@
        <div class="row filter-panel" style="padding-top:0px;">
            <div class="card-body">
                <div class="row">
                    <div class="col-lg-4 form-group"> 
                        <label>Bulan Data<span class="mandatory">*</span></label>
                        @(Html.DevExtreme().TagBox()
                            .ID("Periode")
                            .DataSource(d => d.Mvc()
                                .Controller("Ref")
                                .Area("BDA2")
                                .LoadAction("GetPeriode")
                                .Key("value"))
                            .ValueExpr("value")
                            .DisplayExpr("text")
                            .ShowSelectionControls(true)
                            .MaxDisplayedTags(3)
                            .SearchEnabled(true)
                            .ShowClearButton(true)
                            .OnSelectionChanged("onSelectionChanged")
                            .Width("100%")
                            //.Value(p)
                            )
                    </div>
                    <div class="col-lg-4 form-group">
                        <label>Jenis LJK</label>
                        @(Html.DevExtreme().TagBox()
                            .ID("MemberTypes")
                            .DataSource(d => d.Mvc()
                                .Controller("Ref")
                                .Area("BDA2")
                                .LoadAction("GetMemberTypes")
                                .Key("kode_jenis_ljk"))
                            //.DataSourceOptions(d => d.Paginate(true).PageSize(10))
                            .ValueExpr("kode_jenis_ljk")
                            .DisplayExpr("Display")
                            .ShowSelectionControls(true)
                            .MaxDisplayedTags(3)
                            .SearchEnabled(true)
                            .ShowClearButton(true)
                            .OnContentReady("onOpened2")
                            .OnOpened("onOpened2")
                            .OnSelectionChanged("onSelectionChanged")
                            .OnValueChanged("onJenisLJKChanged")
                            .Width("100%"))
                    </div>
                    <div class="col-lg-4 form-group">
                        <label>Kode LJK</label>
                        @(Html.DevExtreme().TagBox()
                            .ID("Members")
                            .DataSource(d => d.Mvc()
                                .Controller("Ref")
                                .Area("BDA2")
                                .LoadAction("GetMembers")
                                .LoadParams(new { memberTypes = new JS("function() { return $(\"#MemberTypes\").dxTagBox(\"instance\").option(\"value\"); }"), reset = new JS("function() { return resetLJK; }") })
                                //.Key("kode_ljk")
                                .Key("CompositeKey")
                            )
                            .DataSourceOptions(d => d.Paginate(true).PageSize(10))
                            //.ValueExpr("kode_ljk")
                            .ValueExpr("CompositeKey")
                            .DisplayExpr("Display")
                            .ShowSelectionControls(true)
                            .MaxDisplayedTags(3)
                            .SearchEnabled(true)
                            .ShowClearButton(true)
                            .OnSelectionChanged("onSelectionChanged")
                            .OnContentReady("onOpened")
                            .OnOpened("onOpened")
                            .OnInput("onLJKOpened")
                            .OnValueChanged("onLJKChanged")
                            .Width("100%"))
                    </div>
                    <div class="col-lg-4 form-group">
                        <label>Kantor Cabang</label>
                        @(Html.DevExtreme().TagBox()
                            .ID("KantorCabangs")
                            .DataSource(d => d.Mvc()
                                .Controller("Ref")
                                .Area("BDA2")
                                .LoadAction("GetKantorCabangs")
                                .LoadParams(new { memberTypes = new JS("function() { return $(\"#MemberTypes\").dxTagBox(\"instance\").option(\"value\"); }"), members = new JS("function() { return $(\"#Members\").dxTagBox(\"instance\").option(\"value\"); }"), reset = new JS("function() { return resetKC; }") })
                                .Key("kode")
                            )
                            .DataSourceOptions(d => d.Paginate(true).PageSize(10))
                            .ValueExpr("kode")
                            .DisplayExpr("text")
                            .ShowSelectionControls(true)
                            .MaxDisplayedTags(3)
                            .SearchEnabled(true)
                            .ShowClearButton(true)
                            .OnSelectionChanged("onSelectionChanged")
                            .OnContentReady("onOpened")
                            .OnOpened("onOpened")
                            .OnInput("onOpened")
                            .OnValueChanged("onKCChanged")
                            .Width("100%"))
                    </div>
                    @if (addinfo != null && addinfo.Trim() != "")
                    {
                        <div class="col-lg-12" id="divSkenario" style="display:block">
                            <div style="margin-bottom: 40px">@Html.Raw(addinfo)</div>
                        </div>
                    }
                </div>

                <div class="float-left">
                    @(Html.DevExtreme().Button()
                        .ID("Filter")
                        .Type(ButtonType.Default)
                        .Text("Tampilkan")
                        .OnClick("onButtonFilterClicked")
                        .ValidationGroup("Filter"))
                </div>

                <div class="float-right">
                    @if (ViewBag.Export)
                    {
                        <a class="btn btn-light-primary font-weight-bolder btn-sm mr-2" href="javascript:Antrian();"><span class="image fa fa-file-invoice"></span> Antrian (CSV)</a>
                        <a class="btn btn-light-primary font-weight-bolder btn-sm mr-2" href="javascript:ExportToExcel();"><span class="image fa fa-file-excel"></span> Export Excel</a>
                        <a class="btn btn-light-primary font-weight-bolder btn-sm mr-2" href="javascript:ExportToPdf2();"><span class="image fa fa-file-pdf"></span> Export PDF</a>
                        <a class="btn btn-light-primary font-weight-bolder btn-sm mr-2" href="javascript:ExportToCSV();"><span class="image fa fa-file-archive"></span> Export CSV</a>
                    }
                </div>
            </div>
        </div>

        @*grid*@
        <div class="gridview-div">
            @BDA.Helper.BDADXExt.DA2023DataGrid((Html.DevExtreme().DataGrid()
                .ID("grid1")
                .DataSource(d => d.Mvc()
                    .Controller("DA2023")
                    .LoadAction("GetGridDataDA_AnomaliGelarNamaDeb")
                    .OnBeforeSend("onGridBeforeSend"))
                .RemoteOperations(true)
                .Width("100%")
                //.ColumnChooser(c => c.Enabled(true))
                .AllowColumnResizing(true)
                //.OnContentReady("ChangeNodata")
                .Scrolling(s => s.ShowScrollbar(ShowScrollbarMode.Always))
                .FilterRow(f => f.Visible(true))                
                .ShowBorders(false)
                .Selection(c => c.Mode(SelectionMode.Single))
                .Paging(p =>
                {
                    p.PageSize(15);
                    p.Enabled(true);
                })
                .Pager(p =>
                {
                    p.Visible(true);
                    p.ShowInfo(true);
                })                
            ),db,reportId,isHive)
        </div>
    </div>
}