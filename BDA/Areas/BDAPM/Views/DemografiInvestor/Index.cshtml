@using DevExtreme.AspNet.Mvc
@{
    Layout = "~/Views/Shared/_LayoutMainMetronic.cshtml";
    string reportId = "DemografiInvestor";
    var p = (string[])ViewBag.period;
    bool isHive = ViewBag.Hive;
    var maxItems = db.GetSetting("LimitFilterLJK");
    string lbl1 = " ";
}

@inject BDA.DataModel.DataEntities db


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    <input type="hidden" id="totalValueTraded" value=@(ViewBag.totalValueTraded) />

    <div class="card card-default">
        @*filter*@
        <div class="row filter-panel" style="padding-top:0px;">
            <div class="card-body">
                <div class="row">
                    <div class="col-lg-3 form-group">
                        <label>Tanggal<span class="mandatory">*</span></label>
                        @(Html.DevExtreme().DateBox()
                            .ID("PeriodeAwal")
                            .DisplayFormat("dd MMM yyyy")
                            .Value(DateTime.Now)
                            .Max(DateTime.Now)
                            .Width("100%"))
                    </div>

                    <div class="col-lg-3 form-group">
                        <label>Nama PE</label>
                        @(Html.DevExtreme().SelectBox()
                            .ID("namaPEid")
                            .DataSource(d => d.Mvc()
                            .Controller("DemografiInvestor")
                            .Area("BDAPM")
                            .LoadAction("GetNamaPE")
                            .Key("value"))
                            .ValueExpr("value")
                            .DisplayExpr("text")
                            .SearchEnabled(true)
                            .Width("100%")
                            )
                    </div>

                    <div class="col-lg-3 form-group">
                        <label>Origin</label>
                        @(Html.DevExtreme().SelectBox()
                            .ID("originList")
                            .DataSource(d => d.Mvc()
                            .Controller("DemografiInvestor")
                            .Area("BDAPM")
                            .LoadAction("GetOrigin")
                            .Key("value"))
                            .ValueExpr("value")
                            .DisplayExpr("text")
                            .SearchEnabled(true)
                            .Width("100%")
                            )
                    </div>

                    <div class="col-lg-3 form-group">
                        <label>Tipe Investor</label>
                        @(Html.DevExtreme().SelectBox()
                            .ID("tipeInvestorList")
                            .DataSource(d => d.Mvc()
                            .Controller("DemografiInvestor")
                            .Area("BDAPM")
                            .LoadAction("GetTipeInvestor")
                            .Key("value"))
                            .ValueExpr("value")
                            .DisplayExpr("text")
                            .SearchEnabled(true)
                            .Width("100%")
                            )
                    </div>
                </div>

                <div class="float-left">
                    @(Html.DevExtreme().Button()
                        .ID("Filter")
                        .Type(ButtonType.Default)
                        .Text("Tampilkan")
                        .OnClick("onButtonFilterClicked")
                        .ValidationGroup("Filter"))
                </div>
                <div class="float-right">
                    <a class="btn btn-success font-weight-bolder btn-sm mr-2" href="javascript:ExportChart();" title="Export"><span class="image fa fa-file-pdf"></span> Export PNG </a>
                </div>

            </div>
        </div>
        @*grid*@
        <div class="row filter-panel" style="padding-top:0px;">
            <div class="card-body">
                <div class="row">
                    <div class="col-lg-4 form-group" style="padding-right:25px;padding-left:25px">
                        @(
                        Html.DevExtreme().Chart()
                            .ID("ChartGender")
                            .Title("Gender Investor")
                            .Palette(VizPalette.Office)
                            .CommonSeriesSettings(s => s
                                .ArgumentField("gender")
                                .ValueField("total")
                                .Type(SeriesType.Bar)
                                .IgnoreEmptyPoints(true)
                                .Label(l => l.CustomizeText(@<text>
                                                                function () {
                                                                    return thousandSeparatorDecimal(parseFloat(this.valueText)) + "<br>(" + thousandSeparatorDecimal2((this.valueText/($("#totalValueTraded").val()??1))*100) + "%)";
                                                                }
                                                            </text>).Visible(true).Connector(c => c.Visible(true)).Position(RelativePosition.Outside))
                            )
                            .SeriesTemplate(t => t.NameField("gender"))
                            .Legend(l => l.Visible(false).VerticalAlignment(VerticalEdge.Top).HorizontalAlignment(HorizontalAlignment.Center))
                            )
                    </div>
                    <div class="col-lg-4 form-group" style="padding-right:25px;padding-left:25px">
                        @(
                            Html.DevExtreme().Chart()
                            .ID("ChartUsia")
                            .Title("Usia")
                            .Palette(VizPalette.Vintage)
                            .Rotated(true)
                            .CommonSeriesSettings(s => s
                                .ArgumentField("ageRange")
                                .ValueField("total")
                                .Type(SeriesType.Bar)
                                .IgnoreEmptyPoints(true)
                                .Label(l => l.CustomizeText(@<text>
                                                                function () {
                                                                    return thousandSeparatorDecimal(parseFloat(this.valueText)) + "<br>(" + thousandSeparatorDecimal2((this.valueText/($("#totalValueTraded").val()??1))*100) + "%)";
                                                                }
                                                            </text>).Visible(true).Connector(c => c.Visible(true)).Position(RelativePosition.Outside))
                            )
                            .SeriesTemplate(t => t.NameField("ageRange"))
                            .Legend(l => l.Visible(false).VerticalAlignment(VerticalEdge.Top).HorizontalAlignment(HorizontalAlignment.Center))
                            .ValueAxis(a => a.Add().Title("Total Value Traded"))
                            )
                    </div>
                    <div class="col-lg-4 form-group" style="padding-right:25px;padding-left:25px">
                        @(
                            Html.DevExtreme().Chart()
                            .ID("ChartPendidikan")
                            .Title("Pendidikan")
                            .Palette(VizPalette.Soft)
                            .Rotated(true)
                            .CommonSeriesSettings(s => s
                            .ArgumentField("pendidikan")
                            .ValueField("total")
                            .Type(SeriesType.Bar)
                            .IgnoreEmptyPoints(true)
                            .Label(l => l.CustomizeText(@<text>
                                                            function () {
                                                                return thousandSeparatorDecimal(parseFloat(this.valueText)) + "<br>(" + thousandSeparatorDecimal2((this.valueText/($("#totalValueTraded").val()??1))*100) + "%)";
                                                            }
                                                        </text>).Visible(true).Connector(c => c.Visible(true)).Position(RelativePosition.Outside))
                            )
                            .SeriesTemplate(t => t.NameField("pendidikan"))
                            .Legend(l => l.Visible(false).VerticalAlignment(VerticalEdge.Top).HorizontalAlignment(HorizontalAlignment.Center))
                            .ValueAxis(a => a.Add().Title("Total Value Traded"))
                            )
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-4 form-group" style="padding-right:0px;padding-left:25px">
                        @(
                            Html.DevExtreme().PieChart()
                            .ID("ChartPekerjaanPie")
                            .Title(t => t.Text("Pekerjaan").HorizontalAlignment(HorizontalAlignment.Right))
                            .Type(PieChartType.Doughnut)
                            .Palette(VizPalette.Vintage)
                            .ResolveLabelOverlapping(ShiftLabelOverlap.Shift)
                            .InnerRadius(0.65)
                            .Series(s => s
                                .Add()
                                .ArgumentField("occupation")
                                .ValueField("total")
                                .Label(l=>l.Visible(true)
                                    .Connector(c=>c.Visible(true))
                                    .BackgroundColor("none")
                                    .CustomizeText(@<text>function () {
                                                return thousandSeparatorDecimal2((this.valueText/@(ViewBag.totalValueTraded??1))*100) + "%";
                                                }
                                            </text>)
                                )
                            )
                            .Legend(l=>l.Visible(false))
                            .CenterTemplate(@<text> <svg>
                                                    <text text-anchor="middle" style="font-size: 12px" x="100" y="120" fill="#494949">
                                                        <tspan id="centerPieLbl" x="100" dy="20px" style="font-weight: 600">
                                                            <script>document.getElementById("centerPieLbl").textContent = thousandSeparatorDecimal(($("#totalValueTraded").val()));</script>
                                                        </tspan>   
                                                    </text></svg>
                                            </text>)
                            )
                    </div>
                    <div class="col-lg-4 form-group" style="padding-right:25px;padding-left:0px">
                        @(
                            Html.DevExtreme().Chart()
                            .ID("ChartPekerjaanBar")
                            .Title("  ")
                            .Palette(VizPalette.Vintage)
                            .Rotated(true)
                            .CommonSeriesSettings(s => s
                            .ArgumentField("occupation")
                            .ValueField("total")
                            .Type(SeriesType.Bar)
                            .IgnoreEmptyPoints(true)
                            .Label(l => l.CustomizeText(@<text>
                                        function () {
                                            return thousandSeparatorDecimal(parseFloat(this.valueText)) + "<br>(" + thousandSeparatorDecimal2((this.valueText/($("#totalValueTraded").val()??1))*100) + "%)";
                                        }
                                    </text>).Visible(true).Connector(c => c.Visible(true)).Position(RelativePosition.Outside))
                            )
                            .SeriesTemplate(t => t.NameField("occupation"))
                            .Legend(l => l.Visible(false).VerticalAlignment(VerticalEdge.Top).HorizontalAlignment(HorizontalAlignment.Center))
                            .ValueAxis(a => a.Add().Title("Total Value Traded"))
                            )
                    </div>
                    <div class="col-lg-4 form-group" style="padding-right:25px;padding-left:25px">
                        @(
                        Html.DevExtreme().TreeMap()
                            .ID("ChartPenghasilan")
                            .Title("Penghasilan")
                            .LayoutAlgorithm(TreeMapLayoutAlgorithm.Squarified)
                            .Colorizer(c => c.Type(TreeMapColorizerType.Gradient).Range(new double[] { 10000000, 40000000 }).Palette(new[] { "#FFE5E5", "#800000" }).ColorizeGroups(false))
                            )
                    </div>
                </div>
            </div>
        </div>
    </div>


<!-- The Modal  Detail-->
<div class="modal fade" id="ModalSimpanPenggunaanData" tabindex="-1" role="document" aria-hidden="true" data-backdrop="static" data-keyboard="false">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header" style="background-color:#0066b2">
                <h4 class="modal-title" style="text-align:left">
                    <font color="white">Pilih Penggunaan Data</font>
                </h4>
            </div><!--Modal Header-->
            <!-- Modal body -->
            <div class="modal-body">
                <form id="StrukturFormDetail" method="POST" action="" class="form-horizontal row-border">
                    <div class="row" style="padding: 0 10px 0 10px;">
                        @(Html.DevExtreme().SelectBox()
                            .ID("penggunaandataid")
                            .DataSource(d => d.Mvc()
                            .Controller("PenggunaanData")
                            .Area("Website")
                            .LoadAction("GetPenggunaanData")
                            .Key("value"))
                            .ValueExpr("value")
                            .DisplayExpr("text")
                            .SearchEnabled(true)
                            .Width("100%")
                            )
                    </div>
                </form>
            </div>
            <!-- Modal footer -->
            <div class="modal-footer">
                <button type="button" id="btnSavePenggunaanData" class="btn btn-primary" data-bs-dismiss="modal"><i class='fa fa-save'></i> Save</button>
            </div>
        </div>
    </div>
</div>
<!-- The Modal  Detail-->
}

<script>
    window.jsPDF = window.jspdf.jsPDF;
    applyPlugin(window.jsPDF);
</script>

<script type="text/javascript">

    $(function () {
        $("#PeriodeAwal").dxValidator({
            validationGroup: "Filter",
            validationRules: [{ type: "required", message: "[Tanggal] harus dipilih" }]
        })
    });

    $(function () {
        $("#penggunaandataid").dxValidator({
            validationGroup: "Filter",
            validationRules: [{ type: "required", message: "[Penggunaan Data] harus dipilih" }]
        })
    });

    $(window).on('load', function () {
        $("#ModalSimpanPenggunaanData").modal("show");
    });

    $("#btnSavePenggunaanData").click(function () {
        let penggunaandataid = $("#penggunaandataid").dxSelectBox("instance").option("value");

        if (penggunaandataid == null) {
            alert("Silahkan Pilih Tujuan Penggunaan Data");
            return false;
        } else {
            $.ajax({
                url: '@Url.Action("SimpanPenggunaanData", "DemografiInvestor")',
                data: { id: penggunaandataid },
                dataType: "json",
                type: "POST",
                success: function (data) {
                    if (data.success == true) {
                        $('#ModalSimpanPenggunaanData').modal('hide');
                        return "Saving Success !";
                    }
                    else if (data.success == false) {
                            alert(data.message);
                        $('#ModalSimpanPenggunaanData').modal('hide');
                        return "Saving Failed !";
                    }
                }
            });
        }
    });

    function onSelectionChanged(e) {
        if (e.addedItems.length > 0) {
            e.component.field().val(""); // Clears the search text. However, search filter is only applied to the widget after focus is lost in the input element
        }
    }

    function onButtonFilterClicked(e) {
        const res = e.validationGroup.validate();
        if (res.status === "valid") {
            var namaPE = $("#namaPEid").dxSelectBox("instance").option("value") ?? "";
            var tempPeriodeAwal = $("#PeriodeAwal").dxDateBox("instance").option("value") ?? "";  
            var origin = $("#originList").dxSelectBox("instance").option("value") ?? "";
            var tipeInvestor = $("#tipeInvestorList ").dxSelectBox("instance").option("value") ?? "";
            var periodeAwal = tempPeriodeAwal.getFullYear() + '-' + String(tempPeriodeAwal.getMonth() + 1).padStart(2, '0') + '-' + String(tempPeriodeAwal.getDate()).padStart(2, '0');

            $.ajax({
                url: '@Url.Action("getTotalValueTraded", "DemografiInvestor")',
                data: { periode: periodeAwal, pe: namaPE, origin: origin, tipeInvestor: tipeInvestor },
                dataType: "json",
                type: "GET",
                success: function (data) {
                    if (data.success == true) {
                        $("#totalValueTraded").val(data.total);
                        var chart1 = $("#ChartGender").dxChart("instance");
                        var ds1 = DevExpress.data.AspNet.createStore({
                            loadMethod: "GET",
                            loadMode: "processed",
                            loadUrl: '@Url.Action("getCHartGender")?periode=' + periodeAwal + '&pe=' + namaPE + '&origin=' + origin + '&tipeInvestor=' + tipeInvestor
                        });
                        chart1.option('dataSource', ds1);

                        var chart2 = $("#ChartUsia").dxChart("instance");
                        var ds2 = DevExpress.data.AspNet.createStore({
                            loadMethod: "GET",
                            loadMode: "processed",
                            loadUrl: '@Url.Action("getChartUsia")?periode=' + periodeAwal + '&pe=' + namaPE + '&origin=' + origin + '&tipeInvestor=' + tipeInvestor
                        });
                        chart2.option('dataSource', ds2);
                        
                        var chart3 = $("#ChartPendidikan").dxChart("instance");
                        var ds3 = DevExpress.data.AspNet.createStore({
                            loadMethod: "GET",
                            loadMode: "processed",
                            loadUrl: '@Url.Action("getChartPendidikan")?periode=' + periodeAwal + '&pe=' + namaPE + '&origin=' + origin + '&tipeInvestor=' + tipeInvestor
                        });
                        chart3.option('dataSource', ds3);

                        var chart4 = $("#ChartPekerjaanPie").dxPieChart("instance");
                        var ds4 = DevExpress.data.AspNet.createStore({
                            loadMethod: "GET",
                            loadMode: "processed",
                            loadUrl: '@Url.Action("getChartPekerjaan")?periode=' + periodeAwal + '&pe=' + namaPE + '&origin=' + origin + '&tipeInvestor=' + tipeInvestor
                        });
                        chart4.option('dataSource', ds4);

                        var chart5 = $("#ChartPekerjaanBar").dxChart("instance");
                        var ds5 = DevExpress.data.AspNet.createStore({
                            loadMethod: "GET",
                            loadMode: "processed",
                            loadUrl: '@Url.Action("getChartPekerjaan")?periode=' + periodeAwal + '&pe=' + namaPE + '&origin=' + origin + '&tipeInvestor=' + tipeInvestor
                        });
                        chart5.option('dataSource', ds5);

                        var chart6 = $("#ChartPenghasilan").dxTreeMap("instance");
                        var ds6 = DevExpress.data.AspNet.createStore({
                            loadMethod: "GET",
                            loadMode: "processed",
                            loadUrl: '@Url.Action("getChartPenghasilan")?periode=' + periodeAwal + '&pe=' + namaPE + '&origin=' + origin + '&tipeInvestor=' + tipeInvestor
                        });
                        chart6.option('dataSource', ds6);

                        return "Success !";
                    }
                    else if (data.success == false) {
                        alert(data.message);
                        return "Failed !";
                    }
                }
            });
        }
    }

    

    function thousandSeparatorDecimal(e) {
        if (e != null)
            return e.toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 });
    }

    function thousandSeparatorDecimal2(e) {
        if (e != null)
            return e.toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 2 });
    }

    function ExportChart() {
        var chart1 = $("#ChartGender").dxChart("instance"),
            chart2 = $("#ChartUsia").dxChart("instance"),
            chart3 = $("#ChartPendidikan").dxChart("instance"),
            chart4 = $("#ChartPekerjaanPie").dxPieChart("instance"),
            chart5 = $("#ChartPekerjaanBar").dxChart("instance"),
            chart6 = $("#ChartPenghasilan").dxTreeMap("instance");

        DevExpress.viz.exportWidgets([[chart1, chart2, chart3], [chart4, chart5, chart6]], {
            fileName: "chartDemografiInvestor",
            format: 'PNG'
        });
    }

</script>
<style>
    .headerTable {
        box-sizing: border-box;
        background-color: #971c1d;
        padding: 10px;
        margin: 0 auto;
        display: block;
        width: 100%;
        color: #fdfdfd;
        text-align: center;
    }
</style>
