@using DevExtreme.AspNet.Mvc
@{
    Layout = "~/Views/Shared/_LayoutMainMetronic.cshtml";
    string reportId = "pe_segmentation_bridging_detail";
    var pe = ViewBag.pe;
    var periode = ViewBag.periode;
    var sid = ViewBag.sid;
    var maxItems = db.GetSetting("LimitFilterLJK");
}
@section RightToolbar {
    <div class="d-flex align-items-center">
        <a class="nav-link btn btn-light-warning font-weight-bolder btn-sm mr-2" href="@Url.Action("Index")"><i class="fa fa-arrow-left"></i> Kembali Ke Daftar</a>
    </div>
}
@inject BDA.DataModel.DataEntities db

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="card card-default">
        @*filter*@
        <div class="row filter-panel" style="padding-top:0px;">
            <div class="card-body">
                <div class="row">
                    <div class="form-group ml-3">
                        <input type="button" id="btnBasisInvestor" class="btn btn-danger" value="Basis Investor" onclick="location.href='@Url.Action("/", "BasisInvestor")'" />
                    </div>&nbsp;&nbsp;
                    <div class="form-group">
                        <input type="button" id="btnDetailBI" class="btn btn-danger" value="Detail Basis Investor" onclick="location.href='@Url.Action("Detail", "BasisInvestor")?pe=' + '@ViewBag.pe' + '&periode=' + '@ViewBag.periode')" />
                    </div>&nbsp;&nbsp;
                    <div class="form-group">
                        <input type="button" id="btnSumTxSID" class="btn btn-danger" value="Summary Transaction SID"  />
                    </div>&nbsp;&nbsp;
                </div>
                <div class="row">

                    <div class="col-lg-2 form-group">
                        <label>Periode</label>
                        @(Html.DevExtreme().DateBox()
                            .ID("Periode")
                            .Disabled(true)
                            .DisplayFormat("dd MMM yyyy")
                            .Value(periode)
                            .Max(DateTime.Now)
                            .Width("100%"))
                    </div>

                    <div class="col-lg-2 form-group">
                        <label>PE</label>
                        @(Html.DevExtreme().SelectBox()
                            .Disabled(true)
                            .ID("namaPEid")
                            .DataSource(d => d.Mvc()
                            .Controller("BasisInvestor")
                            .Area("BDAPM")
                            .LoadAction("GetNamaPE")
                            .Key("value"))
                            .ValueExpr("value")
                            .DisplayExpr("text")
                            .SearchEnabled(true)
                            .Width("100%")
                            .Value(pe)
                            )
                    </div>

                    <div class="col-lg-2 form-group">
                        <label>SID@*<span class="mandatory">*</span>*@</label>
                        @(Html.DevExtreme().SelectBox()
                            .ID("SID")
                            //.DataSource(new[] { "(All)", "SID1", "SID2", "SID3" })
                            .DataSource(new [] { sid })
                            .SearchEnabled(true)
                            .OnSelectionChanged("onSelectionChanged")
                            .Disabled(true)
                            .Value(sid)
                            .Width("100%"))
                    </div>

                    <div class="col-lg-2 form-group">
                        <label>Investor Code@*<span class="mandatory">*</span>*@</label>
                        @(Html.DevExtreme().SelectBox()
                            .ID("InvstCode")
                            //.DataSource(new[] { "(All)", "A", "B", "C" })
                            .DataSource(new[] { sid })
                            .SearchEnabled(true)
                            .Disabled(true)
                            .Value(sid)
                            .OnSelectionChanged("onSelectionChanged")
                            .Width("100%"))
                    </div>

                    <div class="col-lg-2 form-group">
                        <label>Security Code@*<span class="mandatory">*</span>*@</label>
                        @(Html.DevExtreme().SelectBox()
                            .ID("SecCode")
                            .DataSource(d => d.Mvc()
                            .Controller("BasisInvestor")
                            .Area("BDAPM")
                            .LoadAction("GetNamaSecurities")
                            .Key("value"))
                            .ValueExpr("value")
                            .DisplayExpr("text")
                            .SearchEnabled(true)
                            .OnSelectionChanged("onSelectionChanged")
                            .Placeholder("(ALL)")
                            .Value("")
                            .Width("100%"))
                    </div>

                    @{
                        var market = new[] { new { Text = "(All)", Value = "" },
                                             new { Text = "Bursa", Value = "Bursa" }
                        };
                    }

                    <div class="col-lg-2 form-group">
                        <label>Market@*<span class="mandatory">*</span>*@</label>
                        @(Html.DevExtreme().SelectBox()
                            .ID("Market")
                            .DataSource(market)
                            .SearchEnabled(true)
                            .ValueExpr("Value")
                            .DisplayExpr("Text")
                            .Value("")
                            .OnSelectionChanged("onSelectionChanged")
                            .Width("100%")
                            .Placeholder("(ALL)"))
                    </div>

                </div>

                <div class="float-left">
                    @(Html.DevExtreme().Button()
                        .ID("Filter")
                        .Type(ButtonType.Default)
                        .Text("Tampilkan")
                        .OnClick("onButtonFilterClicked")
                        .ValidationGroup("Filter"))
                </div>
            </div>
        </div>

        @*grid*@
        <div>
            <div class="float-right">
                <a class="btn btn-light-primary font-weight-bolder btn-sm mr-2" href="javascript:ExportToExcel();"><span class="image fa fa-file-excel"></span> Export Excel</a>
                <a class="btn btn-light-primary font-weight-bolder btn-sm mr-2" href="javascript:ExportToPdf();"><span class="image fa fa-file-pdf"></span> Export PDF</a>
                <br /> <br />
            </div>
            <br />

            <div class="gridview-div">
                <header class="bg-danger"><h5 class="text-white">&nbsp;Transaction Summary</h5></header>
                @(Html.DevExtreme().DataGrid()
                    .ID("gridtrx")
                    .RemoteOperations(true)
                    .Width("100%")
                    .AllowColumnResizing(true)
                    .ColumnAutoWidth(true)
                    .Columns(columns =>
                    {
                        columns.Add().DataField("pe").Caption("PE");
                        columns.Add().DataField("sid").Caption("SID");
                        columns.Add().DataField("invcode").Caption("Investor Code");
                        columns.Add().DataField("seccode").Caption("Security Code");
                        columns.Add().DataField("trxsys").Caption("Transaction System");
                        columns.Add().DataField("ttltrxfreq").Caption("Total Transaction Frequency");
                        columns.Add().DataField("ttltrxvol").Caption("Total Transaction Volume");
                        columns.Add().DataField("ttltrxval").Caption("Total Transaction Value");
                    })
                    .ColumnResizingMode(ColumnResizingMode.Widget)
                    .FilterRow(f => f.Visible(true))
                    .ShowBorders(false)
                    .Paging(p =>
                    {
                        p.PageSize(20);
                        p.Enabled(true);
                    })
                    .Pager(p =>
                    {
                        p.ShowInfo(true);
                    })
                    )
            </div>
        </div>

        <div class="pt-4 pb-4">
            <br />
        </div>

        @*grid*@
        <div>
            <div class="float-right">
                <a class="btn btn-light-primary font-weight-bolder btn-sm mr-2" href="javascript:ExportToExcel2();"><span class="image fa fa-file-excel"></span> Export Excel</a>
                <a class="btn btn-light-primary font-weight-bolder btn-sm mr-2" href="javascript:ExportToPdf2();"><span class="image fa fa-file-pdf"></span> Export PDF</a>
                <br /> <br />
            </div>
            <br />
            <div class="gridview-div">
                <header class="bg-danger"><h5 class="text-white">&nbsp;SRE Summary</h5></header>
                @(Html.DevExtreme().DataGrid()
                    .ID("gridsre")
                    .RemoteOperations(true)
                    .Width("100%")
                    .AllowColumnResizing(true)
                    .ColumnAutoWidth(true)
                    .Columns(columns =>
                    {
                        columns.Add().DataField("pe").Caption("PE");
                        columns.Add().DataField("sid").Caption("SID");
                        columns.Add().DataField("secphytcode").Caption("Security Physical Type Code");
                        columns.Add().DataField("stlactowntcode").Caption("Settlement Account Owner Type Code");
                        columns.Add().DataField("stlacttcode").Caption("Settlement Account Type Code");
                        columns.Add().DataField("actblcstscode").Caption("Account Balance Status Code");
                        columns.Add().DataField("portoamount").Caption("Portofolio Amount");
                        columns.Add().DataField("portoqty").Caption("Portofolio Quantity");
                    })
                    .ColumnResizingMode(ColumnResizingMode.Widget)
                    .FilterRow(f => f.Visible(true))
                    .ShowBorders(false)
                    .Paging(p =>
                    {
                        p.PageSize(20);
                        p.Enabled(true);
                    })
                    .Pager(p =>
                    {
                        p.ShowInfo(true);
                    })
                    )
            </div>
        </div>

        <!-- The Modal  Detail-->
        <div class="modal fade" id="ModalSimpanPenggunaanData" tabindex="-1" role="document" aria-hidden="true" data-backdrop="static" data-keyboard="false">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <div class="modal-header" style="background-color:#0066b2">
                        <h4 class="modal-title" style="text-align:left">
                            <font color="white">Pilih Penggunaan Data</font>
                        </h4>
                    </div><!--Modal Header-->
                    <!-- Modal body -->
                    <div class="modal-body">
                        <form id="StrukturFormDetail" method="POST" action="" class="form-horizontal row-border">
                            <div class="row" style="padding: 0 10px 0 10px;">
                                @(Html.DevExtreme().SelectBox()
                                    .ID("penggunaandataid")
                                    .DataSource(d => d.Mvc()
                                    .Controller("PenggunaanData")
                                    .Area("Website")
                                    .LoadAction("GetPenggunaanData")
                                    .Key("value"))
                                    .ValueExpr("value")
                                    .DisplayExpr("text")
                                    .SearchEnabled(true)
                                    .Width("100%")
                                    )
                            </div>
                        </form>
                    </div>
                    <!-- Modal footer -->
                    <div class="modal-footer">
                        <button type="button" id="btnSavePenggunaanData" class="btn btn-primary" data-bs-dismiss="modal"><i class='fa fa-save'></i> Save</button>
                    </div>
                </div>
            </div>
        </div>
        <!-- The Modal  Detail-->
    </div>
}

<script>
    window.jsPDF = window.jspdf.jsPDF;
    applyPlugin(window.jsPDF);
</script>

<script>

    $(function () {
        const startDate = $("#PeriodeAwal").dxDateBox({
            onValueChanged: function (e) {
                endDate.option("min", e.value);
            }
        }).dxDateBox("instance");

        $("#PeriodeAwal").dxValidator({
            validationGroup: "Filter",
            validationRules: [{ type: "required", message: "[Tanggal] harus dipilih" }]
        })
    });

    $(function () {
        $("#penggunaandataid").dxValidator({
            validationGroup: "Filter",
            validationRules: [{ type: "required", message: "[Penggunaan Data] harus dipilih" }]
        })
    });

    $(function () {
        $("#namaPEid").dxValidator({
            validationGroup: "Filter",
            validationRules: [{ type: "required", message: "[Nama PE] harus dipilih" }]
        })
    });

    $(window).on('load', function () {
        $("#ModalSimpanPenggunaanData").modal("show");
    });

    $("#btnSavePenggunaanData").click(function () {
        let penggunaandataid = $("#penggunaandataid").dxSelectBox("instance").option("value");

        if (penggunaandataid == null) {
            alert("Silahkan Pilih Tujuan Penggunaan Data");
            return false;
        } else {
            $.ajax({
                url: '@Url.Action("SimpanPenggunaanData", "SegmentationSummaryClusterMKBD")',
                data: { id: penggunaandataid },
                dataType: "json",
                type: "POST",
                success: function (data) {
                    if (data.success == true) {
                        //alert(data.message);
    @* waitingDialog.hide(); *@
                            $('#ModalSimpanPenggunaanData').modal('hide');
                        return "Saving Success !";
                    }
                    else if (data.success == false) {
    @*  waitingDialog.hide(); *@
                            alert(data.message);
                        $('#ModalSimpanPenggunaanData').modal('hide');
                        return "Saving Failed !";
                    }
                }
            });
        }
    });

    function ExportToExcel() {
        $.ajax({
            type: "POST",
            url: "@Url.Action("LogExportBIDetail", "BasisInvestor")",
            success: function (response) {
                if (response.result == "Success") {
                    var workbook = new ExcelJS.Workbook();
                    var worksheet = workbook.addWorksheet('Detail Basis Investor');

                    DevExpress.excelExporter.exportDataGrid({
                        component: $("#grid1").dxDataGrid("instance"),
                        worksheet: worksheet,
                        customizeCell: function (options) {
                            var { gridCell, excelCell } = options;

                            if (gridCell.rowType === 'data') {
                                if (options.gridCell.column.dataType === 'number') {
                                    excelCell.numFmt = '#,##0';
                                }
                            }
                        }
                    }).then(function () {
                        workbook.xlsx.writeBuffer().then(function (buffer) {
                            saveAs(new Blob([buffer], { type: "application/octet-stream" }), "BasisInvestorDetail_" + new Date().toISOString().slice(0, 10) + ".xlsx");
                        });
                    });
                }
            }
        });
    }

    function ExportToPdf() {
        var dataGrid = $("#grid1").dxDataGrid("instance");
        dataGrid.option("onExporting", function (e) { });
        dataGrid.option("onFileSaving", function (e) {
            var fd = new FormData();
            fd.append("file", e.data);
            fd.append("name", "Detail");
            $.ajax({
                type: "POST",
                url: "@Url.Action("ExportPDF", "BasisInvestor")",
                data: fd,
                processData: false,
                contentType: false
            }).done(function (data) {
                window.location = "@Url.Action("FileIndex", "BasisInvestor", new { name = "Detail" })"
            });
            e.cancel = true;
        });
        dataGrid.exportToExcel();
    }

    function thousandSeparatorDecimal(e) {
        e = parseFloat(e);
        if (e != null)
            return e.toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 });
    }

    function onSelectionChanged(e) {
        if (e.addedItems && e.addedItems.length > 0) {
            // Get the input element of the ComboBox
            var inputElement = e.component.$element().find("input").first();

            // Clear the search text
            if (inputElement.length) {
                inputElement.val("");
            }
        }
    }

    function onButtonFilterClicked(e) {
        const res = e.validationGroup.validate();
        if (res.status === "valid") {
            var pe = '@ViewBag.pe';
            var periode = '@ViewBag.periode';
            var sid = '@ViewBag.sid';

            var seccode = $("#SecCode").dxSelectBox("instance").option("value");
            var market = $("#Market").dxSelectBox("instance").option("value");

            var gridtrx = $("#gridtrx").dxDataGrid("instance");
            var gridsre = $("#gridsre").dxDataGrid("instance");

            gridtrx.beginCustomLoading('Loading...');
            gridsre.beginCustomLoading('Loading...');

            var dsTRX = DevExpress.data.AspNet.createStore({
                loadUrl: '@Url.Action("GetGridDetailTRX", "BasisInvestor")',
                loadMode: "processed",
                loadParams: {
                    periodeAwal: periode,
                    namaPE: pe,
                    invCode: sid,
                    trxSys: market,
                    secCode: seccode
                }
            });

            gridtrx.option('dataSource', dsTRX);
            gridtrx.endCustomLoading();

            var dsSRE = DevExpress.data.AspNet.createStore({
                loadUrl: '@Url.Action("GetGridDetailSRE", "BasisInvestor")',
                loadMode: "processed",
                loadParams: {
                    periodeAwal: periode,
                    namaPE: pe,
                    sid: sid,
                    trxSys: market,
                    secCode: seccode
                }
            });

            gridsre.option('dataSource', dsSRE);
            gridsre.endCustomLoading();
        }
    }

    var waitingDialog = (function ($) {

        // Creating modal dialog's DOM
        var $dialog = $(
            '<div class="modal fade" data-backdrop="static" data-keyboard="false" tabindex="-1" role="dialog" aria-hidden="true" style="padding-top:15%; overflow-y:visible;">' +
            '<div class="modal-dialog modal-m">' +
            '<div class="modal-content">' +
            '<div class="modal-header"><h3 style="margin:0;"></h3></div>' +
            '<div class="modal-body">' +
            '<div class="progress progress-striped active" style="margin-bottom:0;"><div class="progress-bar" style="width: 100%"></div></div>' +
            '</div>' +
            '</div></div></div>');

        return {
            show: function (message, options) {
                // Assigning defaults
                var settings = $.extend({
                    dialogSize: 'm',
                    progressType: ''
                }, options);
                if (typeof message === 'undefined') {
                    message = 'Loading';
                }
                if (typeof options === 'undefined') {
                    options = {};
                }
                // Configuring dialog
                $dialog.find('.modal-dialog').attr('class', 'modal-dialog').addClass('modal-' + settings.dialogSize);
                $dialog.find('.progress-bar').attr('class', 'progress-bar');
                if (settings.progressType) {
                    $dialog.find('.progress-bar').addClass('progress-bar-' + settings.progressType);
                }
                $dialog.find('h3').text(message);
                // Opening dialog
                $dialog.modal();
            },
            /**
                * Closes dialog
                */
            hide: function () {
                $dialog.modal('hide');
            }
        }
    })(jQuery);

</script>

<style type="text/css">
    .mandatory {
        background-color: red !important;
    }
</style>
