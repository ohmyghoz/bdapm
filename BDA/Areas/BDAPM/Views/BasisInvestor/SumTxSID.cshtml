@using DevExtreme.AspNet.Mvc
@{
    Layout = "~/Views/Shared/_LayoutMainMetronic.cshtml";
    string reportId = "pe_segmentation_bridging_detail";
    var pe = ViewBag.pe;
    var periode = ViewBag.periode;
    var sid = ViewBag.sid;
    var tradeid = ViewBag.tradeid;
    var maxItems = db.GetSetting("LimitFilterLJK");
}
@section RightToolbar {
    <div class="d-flex align-items-center">
        <a class="nav-link btn btn-light-warning font-weight-bolder btn-sm mr-2" href="@Url.Action("Index")"><i class="fa fa-arrow-left"></i> Kembali Ke Daftar</a>
    </div>
}
@inject BDA.DataModel.DataEntities db

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="card card-default">
        @*filter*@
        <div class="row filter-panel" style="padding-top:0px;">
            <div class="card-body">
                <div class="row">
                    <div class="form-group ml-3">
                        <input type="button" id="btnBasisInvestor" class="btn btn-danger" value="Basis Investor" onclick="location.href='@Url.Action("Index", "BasisInvestor")'" />
                    </div>&nbsp;&nbsp;
                    <div class="form-group">
                        <input type="button" id="btnDetailBI" class="btn btn-danger" value="Detail Basis Investor" onclick="location.href='@Url.Action("Detail", "BasisInvestor")?pe=@ViewBag.pe&periode=@ViewBag.periode'" />
                    </div>&nbsp;&nbsp;
                    <div class="form-group">
                        <input type="button" id="btnSumTxSID" class="btn btn-danger" value="Summary Transaction SID" onclick="location.href='@Url.Action("SumTxSID", "BasisInvestor")?pe=@ViewBag.pe&periode=@ViewBag.periode&sid=@ViewBag.sid&tradeid=@ViewBag.tradeid'" />
                    </div>&nbsp;&nbsp;
                </div>
                <div class="row">

                    <div class="col-lg-2 form-group">
                        <label>Periode</label>
                        @(Html.DevExtreme().DateBox()
                            .ID("Periode")
                            .Disabled(true)
                            .DisplayFormat("MMM yyyy")
                            .Value(periode)
                            .Max(DateTime.Now)
                            .Width("100%"))
                    </div>

                    <div class="col-lg-2 form-group">
                        <label>Nama PE</label>
                        @(Html.DevExtreme().SelectBox()
                            .Disabled(true)
                            .ID("namaPEid")
                            .DataSource(d => d.Mvc()
                            .Controller("BasisInvestor")
                            .Area("BDAPM")
                            .LoadAction("GetNamaPE")
                            .Key("value"))
                            .ValueExpr("value")
                            .DisplayExpr("text")
                            .SearchEnabled(true)
                            .Width("100%")
                            .Value(pe)
                            )
                    </div>

                    <div class="col-lg-2 form-group">
                        <label>SID@*<span class="mandatory">*</span>*@</label>
                        @(Html.DevExtreme().TextBox()
                            .ID("SID")
                            .Disabled(true)
                            .Value(sid)
                            .Width("100%"))
                    </div>

                    <div class="col-lg-2 form-group">
                        <label>Investor Code@*<span class="mandatory">*</span>*@</label>
                        @(Html.DevExtreme().TextBox()
                            .ID("InvstCode")
                            .Disabled(true)
                            .Value(tradeid)
                            .Width("100%"))
                    </div>

                    <div class="col-lg-2 form-group">
                        <label>Security Code@*<span class="mandatory">*</span>*@</label>
                        @(Html.DevExtreme().SelectBox()
                            .ID("SecCode")
                            .DataSource(d => d.Mvc()
                            .Controller("BasisInvestor")
                            .Area("BDAPM")
                            .LoadAction("GetNamaSecurities")
                            .Key("value"))
                            .ValueExpr("value")
                            .DisplayExpr("text")
                            .SearchEnabled(true)
                            .OnSelectionChanged("onSelectionChanged")
                            .Placeholder("(ALL)")
                            .Value("")
                            .Width("100%"))
                    </div>

                    @{
                        var market = new[] { new { Text = "(All)", Value = "" },
                                             new { Text = "Bursa", Value = "Bursa" }
                        };
                    }

                    <div class="col-lg-2 form-group">
                        <label>Market@*<span class="mandatory">*</span>*@</label>
                        @(Html.DevExtreme().SelectBox()
                            .ID("Market")
                            .DataSource(market)
                            .SearchEnabled(true)
                            .ValueExpr("Value")
                            .DisplayExpr("Text")
                            .Value("")
                            .OnSelectionChanged("onSelectionChanged")
                            .Width("100%")
                            .Placeholder("(ALL)"))
                    </div>

                </div>

                <div class="float-left">
                    @(Html.DevExtreme().Button()
                        .ID("Filter")
                        .Type(ButtonType.Default)
                        .Text("Tampilkan")
                        .OnClick("onButtonFilterClicked")
                        .ValidationGroup("Filter"))
                </div>
            </div>
        </div>

        @*grid*@
        <div>
            <div class="float-right">
                <a class="btn btn-light-primary font-weight-bolder btn-sm mr-2" href="javascript:ExportToExcel();"><span class="image fa fa-file-excel"></span> Export Excel</a>
                <a class="btn btn-light-primary font-weight-bolder btn-sm mr-2" href="javascript:ExportToPdf();"><span class="image fa fa-file-pdf"></span> Export PDF</a>
                <br /> <br />
            </div>
            <br />

            <div class="gridview-div">
                <header class="bg-danger"><h5 class="text-white">&nbsp;Transaction Summary</h5></header>
                <div id ="scrollview1">
                    <div id="pgTRX"></div>
                </div>
                <div class="loadpanel1"></div>
            </div>
        </div>

        <div class="pt-4 pb-4">
            <br /><br />
        </div>

        @*grid*@
        <div>
            <div class="float-right">
                <a class="btn btn-light-primary font-weight-bolder btn-sm mr-2" href="javascript:ExportToExcel2();"><span class="image fa fa-file-excel"></span> Export Excel</a>
                <a class="btn btn-light-primary font-weight-bolder btn-sm mr-2" href="javascript:ExportToPdf2();"><span class="image fa fa-file-pdf"></span> Export PDF</a>
                <br /> <br />
            </div>
            <br />
            <div class="gridview-div">
                <header class="bg-danger"><h5 class="text-white">&nbsp;SRE Summary</h5></header>
                <div id="scrollview2">
                    <div id="pgSRE"></div>
                </div>
                <div class="loadpanel2"></div>
            </div>
        </div>

        <div class="pt-4 pb-4">
            <br />
        </div>

        <!-- The Modal  Detail-->
        <div class="modal fade" id="ModalSimpanPenggunaanData" tabindex="-1" role="document" aria-hidden="true" data-backdrop="static" data-keyboard="false">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <div class="modal-header" style="background-color:#0066b2">
                        <h4 class="modal-title" style="text-align:left">
                            <font color="white">Pilih Penggunaan Data</font>
                        </h4>
                    </div><!--Modal Header-->
                    <!-- Modal body -->
                    <div class="modal-body">
                        <form id="StrukturFormDetail" method="POST" action="" class="form-horizontal row-border">
                            <div class="row" style="padding: 0 10px 0 10px;">
                                @(Html.DevExtreme().SelectBox()
                                    .ID("penggunaandataid")
                                    .DataSource(d => d.Mvc()
                                    .Controller("PenggunaanData")
                                    .Area("Website")
                                    .LoadAction("GetPenggunaanData")
                                    .Key("value"))
                                    .ValueExpr("value")
                                    .DisplayExpr("text")
                                    .SearchEnabled(true)
                                    .Width("100%")
                                    )
                            </div>
                        </form>
                    </div>
                    <!-- Modal footer -->
                    <div class="modal-footer">
                        <button type="button" id="btnSavePenggunaanData" class="btn btn-primary" data-bs-dismiss="modal"><i class='fa fa-save'></i> Save</button>
                    </div>
                </div>
            </div>
        </div>
        <!-- The Modal  Detail-->
    </div>
}

<script>
    window.jsPDF = window.jspdf.jsPDF;
    applyPlugin(window.jsPDF);
</script>

<script>

    $(function () {

        let excelFileData = null;

        var pgTRX = $("#pgTRX").dxPivotGrid({
            dataSource: {
                store: {
                    type: "array",
                    key: "sid",
                    data: []
                }
            },
            loadPanel: { enabled: true },
            showBorders: true,
            showRowGrandTotals: false,
            showRowTotals: false,
            showColumnGrandTotals: false,
            showColumnTotals: false,
            fieldChooser: { enabled: false },
        }).dxPivotGrid("instance");

        var pgSRE = $("#pgSRE").dxPivotGrid({
            dataSource: {
                store: {
                    type: "array",
                    key: "sid",
                    data: []
                }
            },
            loadPanel: { enabled: true },
            showBorders: true,
            showRowGrandTotals: false,
            showRowTotals: false,
            showColumnGrandTotals: false,
            showColumnTotals: false,
            fieldChooser: { enabled: false },
        }).dxPivotGrid("instance");

        $("#scrollview1").dxScrollView({
            useNative: true,
            showScrollbar: 'always',
            direction: 'horizontal',
            scrollByContent: true,
        }).dxScrollView('instance');

        $("#scrollview2").dxScrollView({
            useNative: true,
            showScrollbar: 'always',
            direction: 'horizontal',
            scrollByContent: true,
        }).dxScrollView('instance');
    });

    $(function () {
        $("#penggunaandataid").dxValidator({
            validationGroup: "Filter",
            validationRules: [{ type: "required", message: "[Penggunaan Data] harus dipilih" }]
        })
    });

    $(window).on('load', function () {
        $("#ModalSimpanPenggunaanData").modal("show");
    });

    $("#btnSavePenggunaanData").click(function () {
        let penggunaandataid = $("#penggunaandataid").dxSelectBox("instance").option("value");

        if (penggunaandataid == null) {
            alert("Silahkan Pilih Tujuan Penggunaan Data");
            return false;
        } else {
            $.ajax({
                url: '@Url.Action("SimpanPenggunaanData", "SegmentationSummaryClusterMKBD")',
                data: { id: penggunaandataid },
                dataType: "json",
                type: "POST",
                success: function (data) {
                    if (data.success == true) {
                        //alert(data.message);
    @* waitingDialog.hide(); *@
                            $('#ModalSimpanPenggunaanData').modal('hide');
                        return "Saving Success !";
                    }
                    else if (data.success == false) {
    @*  waitingDialog.hide(); *@
                            alert(data.message);
                        $('#ModalSimpanPenggunaanData').modal('hide');
                        return "Saving Failed !";
                    }
                }
            });
        }
    });

    function ExportToExcel() {
        $.ajax({
            type: "POST",
            url: "@Url.Action("LogExportTRXDetail", "BasisInvestor")",
            success: function (response) {
                if (response.result == "Success") {
                    var workbook = new ExcelJS.Workbook();
                    var worksheet = workbook.addWorksheet('Transaction Summary');

                    DevExpress.excelExporter.exportPivotGrid({
                        component: $("#pgTRX").dxPivotGrid("instance"),
                        exportRowFieldHeaders: true,
                        exportColumnFieldHeaders: true,
                        exportDataFieldHeaders: true,
                        exportFilterFieldHeaders: true,
                        worksheet: worksheet,
                        customizeCell: function (options) {
                            var gridCell = options.gridCell;
                            var excelCell = options.excelCell;

                            if (gridCell) {
                                if (gridCell.area === 'data' && gridCell.rowType === 'D' && gridCell.columnType === 'D') {
                                    excelCell.numFmt = '#,##0'; 
                                }
                            }
                        }
                    }).then(function (dataGridRange) {
                        var fields = $("#pgTRX").dxPivotGrid("instance").getDataSource().fields();
                        var rowFields = fields.filter(r => r.area === 'row').map(r => r.caption);
                        var firstRow = worksheet.getRow(2);
                        worksheet.unMergeCells('A1');
                        rowFields.forEach(insertRow);

                        function insertRow(item, index) {
                            var cell = firstRow.getCell(index + 1);
                            cell.value = item;
                            cell.alignment = { vertical: 'middle', horizontal: 'center', wrapText: true };
                        }

                        return Promise.resolve();
                    }).then(function () {
                        workbook.xlsx.writeBuffer().then(function (buffer) {
                            saveAs(new Blob([buffer], { type: "application/octet-stream" }), "TransactionSummary_" + new Date().toISOString().slice(0, 10) + ".xlsx");
                        });
                    });
                }
            }
        });
    }

    function ExportToExcel2() {
        $.ajax({
            type: "POST",
            url: "@Url.Action("LogExportSREDetail", "BasisInvestor")",
            success: function (response) {
                if (response.result == "Success") {
                    var workbook = new ExcelJS.Workbook();
                    var worksheet = workbook.addWorksheet('SRE Summary');

                    DevExpress.excelExporter.exportPivotGrid({
                        component: $("#pgSRE").dxPivotGrid("instance"),
                        worksheet: worksheet,
                        exportRowFieldHeaders: true,
                        exportColumnFieldHeaders: false,
                        exportDataFieldHeaders: true,
                        exportFilterFieldHeaders: false,
                        customizeCell: function (options) {
                            var gridCell = options.gridCell;
                            var excelCell = options.excelCell;

                            // Defensive checks to avoid errors
                            if (gridCell && gridCell.rowType === 'data') {
                                if (gridCell.column && gridCell.column.dataType === 'number') {
                                    excelCell.numFmt = '#,##0';
                                }
                            }
                        }
                    }).then(function (dataGridRange) {
                        var fields = $("#pgSRE").dxPivotGrid("instance").getDataSource().fields();
                        var rowFields = fields.filter(r => r.area === 'row').map(r => r.caption);
                        var firstRow = worksheet.getRow(2);
                        worksheet.unMergeCells('A1');
                        rowFields.forEach(insertRow);

                        function insertRow(item, index) {
                            var cell = firstRow.getCell(index + 1);
                            cell.value = item;
                            cell.alignment = { vertical: 'middle', horizontal: 'center', wrapText: true };
                        }

                        return Promise.resolve();
                    })
                    .then(function () {
                        workbook.xlsx.writeBuffer().then(function (buffer) {
                            saveAs(new Blob([buffer], { type: "application/octet-stream" }), "SRESummary_" + new Date().toISOString().slice(0, 10) + ".xlsx");
                        });
                    });
                }
            }
        });
    }

    function ExportToPdf() {
        var pivotGrid = $("#pgTRX").dxPivotGrid("instance");

        pivotGrid.option("exportRowFieldHeaders", true);

        pivotGrid.option("onExporting", function (e) { 
            var workbook = new ExcelJS.Workbook();
            var worksheet = workbook.addWorksheet('Transaction Summary');

            DevExpress.excelExporter.exportPivotGrid({
                component: e.component,
                worksheet: worksheet,
                exportRowFieldHeaders: true,
                exportColumnFieldHeaders: false,
                exportDataFieldHeaders: true,
                exportFilterFieldHeaders: false,
                customizeCell: function (options) {
                    var gridCell = options.gridCell;
                    var excelCell = options.excelCell;

@*                     // Defensive checks to avoid errors
                    if (gridCell && gridCell.rowType === 'data') {
                        if (gridCell.column && gridCell.column.dataType === 'number') {
                            excelCell.numFmt = '#,##0';
                        }
                    } *@
                }
            }).then(function (dataGridRange) {
                var fields = e.component.getDataSource().fields();
                var rowFields = fields.filter(r => r.area === 'row').map(r => r.caption);
                var firstRow = worksheet.getRow(2);
                worksheet.unMergeCells('A1');
                worksheet.views = [];
                rowFields.forEach(insertRow);

                function insertRow(item, index) {
                    var cell = firstRow.getCell(index + 1);
                    cell.value = item;
                    cell.alignment = { vertical: 'middle', horizontal: 'center', wrapText: true };
                }

                return workbook.xlsx.writeBuffer();
            }).then(function (buffer) {
                excelFileData = buffer;
            });
        });

        pivotGrid.option("onFileSaving", function (e) {
            var fd = new FormData();
            var blob = new Blob([excelFileData], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });

            fd.append("file", blob);
            fd.append("name", "TransactionSummary");
            $.ajax({
                type: "POST",
                url: "@Url.Action("ExportPDFSumSID", "BasisInvestor")",
                data: fd,
                processData: false,
                contentType: false
            }).done(function (data) {
                window.location = "@Url.Action("FileIndex", "BasisInvestor", new { name = "TransactionSummary" })"
            });
            e.cancel = true;
        });

        pivotGrid.exportToExcel();
    }

    function ExportToPdf2() {
        var pivotGrid = $("#pgSRE").dxPivotGrid("instance");

        pivotGrid.option("exportRowFieldHeaders", true);

        pivotGrid.option("onExporting", function (e) {
            var workbook = new ExcelJS.Workbook();
            var worksheet = workbook.addWorksheet('SRE Summary');

            DevExpress.excelExporter.exportPivotGrid({
                component: e.component,
                worksheet: worksheet,
                exportRowFieldHeaders: true,
                exportColumnFieldHeaders: false,
                exportDataFieldHeaders: true,
                exportFilterFieldHeaders: false,
                customizeCell: function (options) {
                    var gridCell = options.gridCell;
                    var excelCell = options.excelCell;

@*                     // Defensive checks to avoid errors
                    if (gridCell && gridCell.rowType === 'data') {
                        if (gridCell.column && gridCell.column.dataType === 'number') {
                            excelCell.numFmt = '#,##0';
                        }
                    } *@
                }
            }).then(function (dataGridRange) {
                var fields = e.component.getDataSource().fields();
                var rowFields = fields.filter(r => r.area === 'row').map(r => r.caption);
                var firstRow = worksheet.getRow(2);
                worksheet.unMergeCells('A1');
                worksheet.views = [];
                rowFields.forEach(insertRow);

                function insertRow(item, index) {
                    var cell = firstRow.getCell(index + 1);
                    cell.value = item;
                    cell.alignment = { vertical: 'middle', horizontal: 'center', wrapText: true };
                }

                return workbook.xlsx.writeBuffer();
            }).then(function (buffer) {
                excelFileData = buffer;
            });
        });

        pivotGrid.option("onFileSaving", function (e) {
            var fd = new FormData();
            var fd = new FormData();
            var blob = new Blob([excelFileData], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });

            fd.append("file", blob);
            fd.append("name", "SRESummary");
            $.ajax({
                type: "POST",
                url: "@Url.Action("ExportPDFSumSID", "BasisInvestor")",
                data: fd,
                processData: false,
                contentType: false
            }).done(function (data) {
                window.location = "@Url.Action("FileIndex", "BasisInvestor", new { name = "SRESummary" })"
            });
            e.cancel = true;
        });
        pivotGrid.exportToExcel();
    }

    function thousandSeparatorDecimal(e) {
        e = parseFloat(e);
        if (e != null)
            return e.toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 });
    }

    function onSelectionChanged(e) {
        if (e.addedItems && e.addedItems.length > 0) {
            // Get the input element of the ComboBox
            var inputElement = e.component.$element().find("input").first();

            // Clear the search text
            if (inputElement.length) {
                inputElement.val("");
            }
        }
    }

    function onButtonFilterClicked(e) {
        const res = e.validationGroup.validate();
        if (res.status === "valid") {
            var pe = '@ViewBag.pe';
            var periode = '@ViewBag.periode';
            var sid = $("#SID").dxTextBox("instance").option('value');
            var tradeid = $("#InvstCode").dxTextBox("instance").option('value');

            var seccode = $("#SecCode").dxSelectBox("instance").option("value");
            var market = $("#Market").dxSelectBox("instance").option("value");

            var lp1 = $('.loadpanel1').dxLoadPanel({
                position: { 
                    my: "center",
                    at: "center",
                    of: '#pgTRX' 
                },
                visible: false,
                showIndicator: true,
                showPane: true,
                shading: false,
                hideOnOutsideClick: false
            }).dxLoadPanel('instance');

            var lp2 = $('.loadpanel2').dxLoadPanel({
                position: { 
                    my: "center",
                    at: "center",
                    of: '#pgSRE' 
                },
                visible: false,
                showIndicator: true,
                showPane: true,
                shading: false,
                hideOnOutsideClick: false
            }).dxLoadPanel('instance');

            lp1.show();
            lp2.show();

            function loadTRX() {
                return $.ajax({
                    url: '@Url.Action("GetGridDetailTRX", "BasisInvestor")',
                    data: {
                        periodeAwal: periode,
                        namaPE: pe,
                        invCode: tradeid,
                        trxSys: market,
                        secCode: seccode
                    },
                    dataType: "json",
                    type: "POST",
                    success: function (response) {
                        var pgTRX = $("#pgTRX").dxPivotGrid({
                            dataSource: {
                                store: {
                                    type: "array",
                                    key: "sid",
                                    data: response.data
                                },
                                fields: [
                                    { dataField: "pe", caption: "PE", area: "row" },
                                    { dataField: "sid", caption: "SID", area: "row" },
                                    { dataField: "invcode", caption: "Investor Code", area: "row" },
                                    { dataField: "seccode", caption: "Security Code", area: "row" },
                                    { dataField: "trxsys", caption: "Transaction System", area: "row" },
                                    { dataField: "fake", caption: "", area: "column" },
                                    { dataField: "ttltrxfreq", caption: "Total Transaction Frequency", area: "data", dataType: "number", format: '#,##0', summaryType: "sum" },
                                    { dataField: "ttltrxvol", caption: "Total Transaction Volume", area: "data", dataType: "number", format: '#,##0', summaryType: "sum" },
                                    { dataField: "ttltrxval", caption: "Total Transaction Value", area: "data", dataType: "number", format: '#,##0', summaryType: "sum" }
                                ]
                            },
                            loadPanel: { enabled: false },
                            showBorders: true,
                            showRowGrandTotals: false,
                            showRowTotals: false,
                            showColumnGrandTotals: false,
                            showColumnTotals: false,
                            headerFilter: { enabled: false, },
                            fieldChooser: { enabled: false },
                            customizeText: function (cellInfo) {
                                if (cellInfo.value === "") {
                                    return 0;
                                }
                                return cellInfo.valueText;
                            },
                            hideEmptySummaryCells: false,
                            fieldPanel: {
                                showColumnFields: false,
                                showDataFields: false,
                                showFilterFields: false,
                                showRowFields: true,
                                allowFieldDragging: false,
                                visible: true,
                            },
                        }).dxPivotGrid("instance");

                        pgTRX.getDataSource().expandAll("pe");
                        pgTRX.getDataSource().expandAll("sid");
                        pgTRX.getDataSource().expandAll("invcode");
                        pgTRX.getDataSource().expandAll("seccode");
                        pgTRX.getDataSource().expandAll("trxsys");

                        lp1.hide();
                        setTimeout(function () {
                            $(".loadpanel2").dxLoadPanel("instance").repaint();
                        }, 1000);
                        loadSRE();
                    }
                });
            }

            function loadSRE() {
                return $.ajax({
                    url: '@Url.Action("GetGridDetailSRE", "BasisInvestor")',
                    data: {
                        periodeAwal: periode,
                        namaPE: pe,
                        tradeId: tradeid,
                        trxSys: market,
                        secCode: seccode
                    },
                    dataType: "json",
                    type: "POST",
                    success: function (response) {
                        var pgSRE = $("#pgSRE").dxPivotGrid({
                            dataSource: {
                                store: {
                                    type: "array",
                                    key: "sid",
                                    data: response.data
                                },
                                fields: [
                                    { dataField: "pe", caption: "PE", area: "row" },
                                    { dataField: "sid", caption: "SID", area: "row" },
                                    { dataField: "secphytcode", caption: "Security Physical Type Code", area: "row" },
                                    { dataField: "stlactowntcode", caption: "Settlement Account Owner Type Code", area: "row" },
                                    { dataField: "stlacttcode", caption: "Settlement Account Type Code", area: "row" },
                                    { dataField: "actblcstscode", caption: "Account Balance Status Code", area: "row" },
                                    { dataField: "fake", caption: "", area: "column" },
                                    { dataField: "portoamount", caption: "Portofolio Amount", area: "data", dataType: "number", format: '#,##0', summaryType: "sum" },
                                    { dataField: "portoqty", caption: "Portofolio Quantity", area: "data", dataType: "number", format: '#,##0', summaryType: "sum" }
                                ]
                            },
                            loadPanel: { enabled: false },
                            showBorders: true,
                            showRowGrandTotals: false,
                            showRowTotals: false,
                            showColumnGrandTotals: false,
                            showColumnTotals: false,
                            headerFilter: { enabled: false, },
                            fieldChooser: { enabled: false },
                            customizeText: function (cellInfo) {
                                if (cellInfo.value === "") {
                                    return 0;
                                }
                                return cellInfo.valueText;
                            },
                            hideEmptySummaryCells: false,
                            fieldPanel: {
                                showColumnFields: false,
                                showDataFields: false,
                                showFilterFields: false,
                                showRowFields: true,
                                allowFieldDragging: false,
                                visible: true,
                            },
                        }).dxPivotGrid("instance");

                        pgSRE.getDataSource().expandAll("pe");
                        pgSRE.getDataSource().expandAll("sid");
                        pgSRE.getDataSource().expandAll("secphytcode");
                        pgSRE.getDataSource().expandAll("stlactowntcode");
                        pgSRE.getDataSource().expandAll("stlacttcode");
                        pgSRE.getDataSource().expandAll("actblcstscode");

                        lp2.hide();
                    }
                });
            }

            loadTRX();
            //loadSRE();
        }
    }

    var waitingDialog = (function ($) {

        // Creating modal dialog's DOM
        var $dialog = $(
            '<div class="modal fade" data-backdrop="static" data-keyboard="false" tabindex="-1" role="dialog" aria-hidden="true" style="padding-top:15%; overflow-y:visible;">' +
            '<div class="modal-dialog modal-m">' +
            '<div class="modal-content">' +
            '<div class="modal-header"><h3 style="margin:0;"></h3></div>' +
            '<div class="modal-body">' +
            '<div class="progress progress-striped active" style="margin-bottom:0;"><div class="progress-bar" style="width: 100%"></div></div>' +
            '</div>' +
            '</div></div></div>');

        return {
            show: function (message, options) {
                // Assigning defaults
                var settings = $.extend({
                    dialogSize: 'm',
                    progressType: ''
                }, options);
                if (typeof message === 'undefined') {
                    message = 'Loading';
                }
                if (typeof options === 'undefined') {
                    options = {};
                }
                // Configuring dialog
                $dialog.find('.modal-dialog').attr('class', 'modal-dialog').addClass('modal-' + settings.dialogSize);
                $dialog.find('.progress-bar').attr('class', 'progress-bar');
                if (settings.progressType) {
                    $dialog.find('.progress-bar').addClass('progress-bar-' + settings.progressType);
                }
                $dialog.find('h3').text(message);
                // Opening dialog
                $dialog.modal();
            },
            /**
                * Closes dialog
                */
            hide: function () {
                $dialog.modal('hide');
            }
        }
    })(jQuery);

</script>

<style type="text/css">
    .mandatory {
        background-color: red !important;
    }
</style>
