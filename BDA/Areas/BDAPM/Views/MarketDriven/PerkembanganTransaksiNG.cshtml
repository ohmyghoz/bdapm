﻿@using DevExtreme.AspNet.Mvc
@{
    Layout = "~/Views/Shared/_LayoutMainMetronic.cshtml";
}

@inject BDA.DataModel.DataEntities db

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="card card-default">
        @*filter*@
        <div class="row filter-panel" style="padding-top:0px;">
            <div class="card-body">
                <h1>Perkembangan Transaksi Negosiasi</h1>
                <div class="row">
                    <div class="col-lg-3 form-group">
                        <label>Jenis Periode@*<span class="mandatory">*</span>*@</label>
                        @(Html.DevExtreme().SelectBox()
                            .ID("Periodid")
                            .DataSource(new[] { "Daily", "Monthly", "Custom Date" })
                            .Width("100%")
                            .OnValueChanged("onPeriodChanged"))
                    </div>
                    <div class="col-lg-3 form-group">
                        <label>Sumber Data</label>
                        @(Html.DevExtreme().SelectBox()
                            .ID("DataSourceMode")
                            .DataSource(new[]
                            {
                                new { Value = false, Text = "SQL" },
                                new { Value = true, Text = "Hive" }
                            })
                            .ValueExpr("Value")
                            .DisplayExpr("Text")
                            .Value(false)
                            .Width("100%"))
                    </div>

                </div>
                <div class="row">
                    <div class="col-lg-3 form-group" id="datepickday">
                        <label>Periode@*<span class="mandatory">*</span>*@</label>
                        @(Html.DevExtreme().DateBox()
                            .ID("datepickdID")
                            .Type(DateBoxType.Date)
                            .DisplayFormat("dd/MM/yyyy")
                            .Width("100%"))
                    </div>
                    <div class="col-lg-3 form-group" id="datepickmonth">
                        <label>Periode@*<span class="mandatory">*</span>*@</label>
                        @(Html.DevExtreme().DateBox()
                            .ID("DatepickmID")
                            .Type(DateBoxType.Date)
                            .DisplayFormat("monthAndYear")
                            .CalendarOptions(c => c
                            .MaxZoomLevel(CalendarZoomLevel.Year)
                            .MinZoomLevel(CalendarZoomLevel.Century))
                            .Width("100%"))
                    </div>
                    <div class="col-lg-3 form-group" id="starttime">
                        <label>Start Time@*<span class="mandatory">*</span>*@</label>
                        @(Html.DevExtreme().SelectBox()
                            .ID("StartTime")
                            .DataSource(Enumerable.Range(9, 9).Select(h => new { Value = h.ToString("D2") + ":00", Text = h.ToString("D2") + ":00" }))
                            .ValueExpr("Value")
                            .DisplayExpr("Text")
                            .SearchEnabled(true)
                            .Width("100%"))

                    </div>
                    <div class="col-lg-3 form-group" id="endtime">
                        <label>End Time@*<span class="mandatory">*</span>*@</label>
                        @(Html.DevExtreme().SelectBox()
                            .ID("EndTime")
                            .DataSource(Enumerable.Range(9, 9).Select(h => new { Value = h.ToString("D2") + ":00", Text = h.ToString("D2") + ":00" }))
                            .ValueExpr("Value")
                            .DisplayExpr("Text")
                            .SearchEnabled(true)
                            .Width("100%"))

                    </div>
                    <div class="col-lg-3 form-group" id="startdate">
                        <label>Start Date@*<span class="mandatory">*</span>*@</label>
                        @(Html.DevExtreme().DateBox()
                            .ID("StartDateID")
                            .Type(DateBoxType.Date)
                            .DisplayFormat("dd/MM/yyyy")
                            .Width("100%"))
                    </div>
                    <div class="col-lg-3 form-group" id="enddate">
                        <label>End Date@*<span class="mandatory">*</span>*@</label>
                        @(Html.DevExtreme().DateBox()
                            .ID("EndDateID")
                            .Type(DateBoxType.Date)
                            .DisplayFormat("dd/MM/yyyy")
                            .Width("100%"))
                    </div>


                    <div class="col-lg-3 form-group" id="topDiv">
                        <label>Top@*<span class="mandatory">*</span>*@</label>
                        @(Html.DevExtreme().SelectBox()
                            .ID("ItemsPerPageSelectBox")
                            .DataSource(new[] { "10", "25", "50", "100", "150", "200", "All" })
                            .ValueExpr("this")
                            .DisplayExpr("this")
                            .SearchEnabled(true)
                            .Width("100%"))
                    </div>

                </div>
                <div class="float-left">
                    @(Html.DevExtreme().Button()
                        .ID("Filter")
                        .Type(ButtonType.Default)
                        .Text("Tampilkan")
                        .OnClick("refreshTopCompaniesGrid"))
                </div>

                @*                 <div class="float-right">
            @if (ViewBag.Export)
            {
            <a class="btn btn-light-primary font-weight-bolder btn-sm mr-2" href="javascript:ExportToExcel();"><span class="image fa fa-file-excel"></span> Export Excel</a>
            <a class="btn btn-light-primary font-weight-bolder btn-sm mr-2" href="javascript:ExportToPdf2();"><span class="image fa fa-file-pdf"></span> Export PDF</a>
            }
            </div> *@
            </div>
        </div>
        <div class="row">
        </div>
        <br />
        @*grid*@
        <div class="gridview-div" id="gridContainer" style="display: none;">
            <div class="col-lg-12 form-group" style="padding-right:25px;padding-left:25px">
                <div class="row" style="padding-bottom:12.5px">
                    <a class="btn btn-dark font-weight-bolder btn-sm mr-2" href="javascript:exportGridToExcel();" title="Export Excel"><span class="image fa fa-file-excel"></span> Export Excel</a>
                    <a class="btn btn-success font-weight-bolder btn-sm mr-2" href="javascript:exportGridToPDF();" title="Export PDF"><span class="image fa fa-file-pdf"></span> Export PDF</a>
                </div>

                <div class="row">
                    @(
                    Html.DevExtreme().DataGrid()

                        .ID("top-companies-grid")
                        .DataSource(d => d.Mvc()
                        .Controller("MarketDriven")
                        .LoadAction("_GetTopCompaniesData") // This action calls your query
                        .LoadParams(new
                        {
                            selectedDate = new JS("getFormattedPeriod"),
                            periodType = new JS("getSelectedPeriodType"),
                            isHive = new JS("getIsHiveValue")
                        })
                        .Key("security_code") // Unique key for the rows
                        )
                        .OnContentReady("onGridContentReady")
                        .OnDataErrorOccurred("function(e) { console.error('Grid data error:', e.error); }")

                        .RemoteOperations(true)
                        .Width("100%")
                        .AllowColumnResizing(true)
                        .ColumnAutoWidth(true)
                        .Columns(columns =>
                        {
                            columns.Add().DataField("security_code").Caption("Security Code");
                            columns.Add().DataField("total_value").Caption("Total Value").Alignment(HorizontalAlignment.Right).Format("#,##0");
                            columns.Add().DataField("total_volume").Caption("Total Volume").Alignment(HorizontalAlignment.Right).Format("#,##0");
                            columns.Add().DataField("total_freq").Caption("Total Frequency").Alignment(HorizontalAlignment.Right).Format("#,##0");
                        })
                        .FilterRow(f => f.Visible(false))
                        .ShowBorders(true)
                        .Scrolling(s => s.ShowScrollbar(ShowScrollbarMode.Always))
                        .Paging(p =>
                        {
                            p.PageSize(10);
                            p.Enabled(true);
                        })
                        .Pager(p =>
                        {
                            p.ShowInfo(true);
                        })
                )
                </div>
            </div>
        </div>
        <div class="row" id="dynamicChartsContainer" style="display: none;">
            <!-- Charts will be generated here dynamically -->
        </div>
        
    </div>


    <!-- The Modal  Detail-->
    <div class="modal fade" id="ModalSimpanPenggunaanData" tabindex="-1" role="document" aria-hidden="true" data-backdrop="static" data-keyboard="false">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header" style="background-color:#0066b2">
                    <h4 class="modal-title" style="text-align:left">
                        <font color="white">Pilih Penggunaan Data</font>
                    </h4>
                </div><!--Modal Header-->
                <!-- Modal body -->
                <div class="modal-body">
                    <form id="StrukturFormDetail" method="POST" action="" class="form-horizontal row-border">
                        <div class="row" style="padding: 0 10px 0 10px;">
                            @(Html.DevExtreme().SelectBox()
                                .ID("penggunaandataid")
                                .DataSource(d => d.Mvc()
                                .Controller("PenggunaanData")
                                .Area("Website")
                                .LoadAction("GetPenggunaanData")
                                .Key("value"))
                                .ValueExpr("value")
                                .DisplayExpr("text")
                                .SearchEnabled(true)
                                .Width("100%")
                                )
                        </div>
                    </form>
                </div>
                <!-- Modal footer -->
                <div class="modal-footer">
                    <button type="button" id="btnSavePenggunaanData" class="btn btn-primary" data-bs-dismiss="modal"><i class='fa fa-save'></i> Save</button>
                </div>
            </div>
        </div>
    </div>
    <!-- The Modal  Detail-->
}

<script>
    // Store the top 4 security codes
    let topSecurityCodes = [];

    // This function gets the date from the appropriate DateBox based on period type
    function getFormattedPeriod() {
        const periodType = $("#Periodid").dxSelectBox("instance").option("value");

        if (periodType === "Monthly") {
            const date = $("#DatepickmID").dxDateBox("instance").option("value");
            if (date) {
                const year = date.getFullYear();
                const month = ("0" + (date.getMonth() + 1)).slice(-2);
                return year + "" + month;
            }
        } else if (periodType === "Daily") {
            const date = $("#datepickdID").dxDateBox("instance").option("value");
            if (date) {
                const year = date.getFullYear();
                const month = ("0" + (date.getMonth() + 1)).slice(-2);
                const day = ("0" + date.getDate()).slice(-2);
                return year + month + day;
            }
        } else if (periodType === "Custom Date") {
            const startDate = $("#StartDateID").dxDateBox("instance").option("value");
            if (startDate) {
                const year = startDate.getFullYear();
                const month = ("0" + (startDate.getMonth() + 1)).slice(-2);
                return year + "" + month;
            }
        }
        return null;
    }

    function getSelectedPeriodType() {
        const instance = $("#Periodid").dxSelectBox("instance");
        return instance ? instance.option("value") : null;
    }

    function getIsHiveValue() {
        const instance = $("#DataSourceMode").dxSelectBox("instance");
        return instance ? instance.option("value") === true : false;
    }

    // Main function to refresh grid and create charts
    function refreshTopCompaniesGrid() {
        console.log("refreshTopCompaniesGrid called from button");

        const formattedDate = getFormattedPeriod();
        console.log("Formatted date:", formattedDate);

        if (!formattedDate) {
            alert("Please select a period first!");
            return;
        }

        // Show the grid container
        document.getElementById("gridContainer").style.display = "block";

        try {
            // Get the grid instance and refresh
            const grid = $("#top-companies-grid").dxDataGrid("instance");

            // Use the refresh promise to know when data is loaded
            grid.refresh().done(function () {
                console.log("Grid refresh completed");
                // Create charts after grid data is loaded
                setTimeout(function () {
                    createChartsForTopCompanies();
                }, 1000);
            });
        } catch (error) {
            console.error("Error refreshing grid:", error);
        }
    }

    // Function called when grid content is ready
    function onGridContentReady(e) {
        console.log('Grid content ready, row count:', e.component.getVisibleRows().length);
    }

    function createChartsForTopCompanies() {
        console.log("createChartsForTopCompanies called");

        const formattedDate = getFormattedPeriod();
        if (!formattedDate) {
            console.log("No formatted date available");
            return;
        }

        try {
            // Get the grid data to extract top 4 security codes
            const grid = $("#top-companies-grid").dxDataGrid("instance");
            const gridData = grid.getDataSource().items();

            if (!gridData || gridData.length === 0) {
                console.log("No grid data available");
                return;
            }

            // Get top 4 security codes
            topSecurityCodes = gridData.slice(0, 4).map(item => item.security_code);
            console.log("Top 4 security codes:", topSecurityCodes);

            // Clear existing charts
            $("#dynamicChartsContainer").empty();

            const periodType = getSelectedPeriodType();
            const isHive = getIsHiveValue();

            // Create charts in single-column layout
            for (let i = 0; i < topSecurityCodes.length; i++) {
                if (topSecurityCodes[i]) {
                    createChartForSecurity(topSecurityCodes[i], i, formattedDate, periodType, isHive);
                }
            }

            // Show the charts container
            document.getElementById("dynamicChartsContainer").style.display = "block";
        } catch (error) {
            console.error("Error in createChartsForTopCompanies:", error);
        }
    }

    // Function to create individual chart
    function createChartForSecurity(securityCode, index, selectedDate, periodType, isHive) {
        const chartId = `market-chart-${index + 1}`;
        const containerId = `chartContainer-${index + 1}`;

        // Create chart container HTML for single column layout
        const chartHtml = `
            <div class="row chart-row" style="margin-bottom: 20px;">
                <div class="col-12 form-group" id="${containerId}" style="padding: 15px;">
                    <div id="${chartId}" style="height: 400px; border: 1px solid #ddd; border-radius: 5px; padding: 10px;"></div>
                </div>
            </div>
        `;

        $("#dynamicChartsContainer").append(chartHtml);

        // Create the DevExtreme chart
        $(`#${chartId}`).dxChart({
            palette: "Material",
            title: securityCode,
            dataSource: {
                load: function () {
                    return $.ajax({
                        url: '@Url.Action("_GetChartData", "MarketDriven")',
                        data: {
                            selectedDate: selectedDate,
                            securityCode: securityCode,
                            periodType: periodType,
                            isHive: isHive
                        },
                        dataType: "json"
                    }).done(function (data) {
                        console.log(`Chart data for ${securityCode}:`, data);
                        if (!data || data.length === 0) {
                            console.warn(`No data returned for ${securityCode}`);
                        }
                    }).fail(function (xhr, status, error) {
                        console.error(`Failed to load chart data for ${securityCode}:`, error);
                    });
                }
            },
            // Add this to handle empty data gracefully
            onInitialized: function (e) {
                console.log(`Chart initialized for ${securityCode}`);
            },
            onDrawn: function (e) {
                console.log(`Chart drawn for ${securityCode}`);
            },
            argumentAxis: {
                argumentType: "string",
                label: {
                    overlappingBehavior: "stagger",
                    customizeText: function (arg) {
                        if (!arg || !arg.valueText) {
                            return "";
                        }
                        const text = arg.valueText.toString();
                        if (/^\d{8}$/.test(text)) {
                            return text.substring(6, 8);
                        }
                        return text;
                    }
                }
            },
            commonSeriesSettings: {
                argumentField: "periode"
            },
            commonAxisSettings: {
                grid: {
                    visible: true
                }
            },
            margin: {
                left: 20
            },
            series: [
                {
                    valueField: "high_ng",
                    name: "High NG",
                    type: "spline",
                    axis: "value"
                },
                {
                    valueField: "low_ng",
                    name: "Low NG",
                    type: "spline",
                    axis: "value"
                },
                {
                    valueField: "high_rg",
                    name: "High RG",
                    type: "spline",
                    axis: "value"
                },
                {
                    valueField: "low_rg",
                    name: "Low RG",
                    type: "spline",
                    axis: "value"
                },
                {
                    valueField: "volume_ng",
                    name: "Volume NG",
                    type: "bar",
                    axis: "volume"
                }
            ],
            tooltip: {
                enabled: true
            },
            legend: {
                verticalAlignment: "top",
                horizontalAlignment: "right"
            },
            valueAxis: [
                {
                    name: "value",
                    position: "right",
                    title: {
                        text: "Price"
                    },
                    label: {
                        format: {
                            type: "fixedPoint",
                            precision: 2
                        }
                    },
                    allowDecimals: true
                },
                {
                    name: "volume",
                    position: "left",
                    title: {
                        text: "Volume NG"
                    },
                    label: {
                        format: {
                            type: "largeNumber"
                        }
                    }
                }
            ],
            export: {
                enabled: true
            },
            // Add a no-data message
            noDataText: `No data available for ${securityCode}`
        });
    }

    // Period change handler - SINGLE DEFINITION
    function onPeriodChanged(e) {
        console.log("Period changed to:", e.value);
        const selectedValue = e.value;
        const datepickdayDiv = document.getElementById("datepickday");
        const datepickmonthDiv = document.getElementById("datepickmonth");
        const starttimeDiv = document.getElementById("starttime");
        const endtimeDiv = document.getElementById("endtime");
        const startdateDiv = document.getElementById("startdate");
        const enddateDiv = document.getElementById("enddate");

        // Hide grid and charts when period type changes
        document.getElementById("gridContainer").style.display = "none";
        document.getElementById("dynamicChartsContainer").style.display = "none";

        if (selectedValue === "Daily") {
            starttimeDiv.style.display = "block";
            endtimeDiv.style.display = "block";
            datepickdayDiv.style.display = "block";
            datepickmonthDiv.style.display = "none";
            startdateDiv.style.display = "none";
            enddateDiv.style.display = "none";
        } else if (selectedValue === "Monthly") {
            datepickmonthDiv.style.display = "block";
            starttimeDiv.style.display = "none";
            endtimeDiv.style.display = "none";
            datepickdayDiv.style.display = "none";
            startdateDiv.style.display = "none";
            enddateDiv.style.display = "none";
        } else {
            starttimeDiv.style.display = "none";
            endtimeDiv.style.display = "none";
            datepickdayDiv.style.display = "none";
            datepickmonthDiv.style.display = "none";
            startdateDiv.style.display = "block";
            enddateDiv.style.display = "block";
        }
    }

    // Export functions
    function exportGridToPDF() {
        const doc = new jsPDF();
        const dataGrid = $("#top-companies-grid").dxDataGrid("instance");

        DevExpress.pdfExporter.exportDataGrid({
            jsPDFDocument: doc,
            component: dataGrid,
            keepColumnWidths: true
        }).then(() => {
            doc.save('GridData.pdf');
        });
    }

    function exportGridToExcel() {
        var dataGrid = $("#top-companies-grid").dxDataGrid("instance");
        dataGrid.exportToExcel(false);
    }

    // Document ready
    $(document).ready(function () {
        console.log("Document ready");

        // Hide all date controls initially
        document.getElementById("starttime").style.display = "none";
        document.getElementById("endtime").style.display = "none";
        document.getElementById("datepickday").style.display = "none";
        document.getElementById("datepickmonth").style.display = "none";
        document.getElementById("startdate").style.display = "none";
        document.getElementById("enddate").style.display = "none";
    });

    // Modal and other functions
    $(window).on('load', function () {
        $("#ModalSimpanPenggunaanData").modal("show");
    });

    $("#btnSavePenggunaanData").click(function () {
        let penggunaandataid = $("#penggunaandataid").dxSelectBox("instance").option("value");

        if (penggunaandataid == null) {
            alert("Silahkan Pilih Tujuan Penggunaan Data");
            return false;
        } else {
            $.ajax({
                url: '@Url.Action("SimpanPenggunaanData", "SegmentationSummaryClusterMKBD")',
                data: { id: penggunaandataid },
                dataType: "json",
                type: "POST",
                success: function (data) {
                    if (data.success == true) {
                        $('#ModalSimpanPenggunaanData').modal('hide');
                        return "Saving Success !";
                    }
                    else if (data.success == false) {
                        alert(data.message);
                        $('#ModalSimpanPenggunaanData').modal('hide');
                        return "Saving Failed !";
                    }
                }
            });
        }
    });

    // Waiting dialog
    var waitingDialog = (function ($) {
        var $dialog = $(
            '<div class="modal fade" data-backdrop="static" data-keyboard="false" tabindex="-1" role="dialog" aria-hidden="true" style="padding-top:15%; overflow-y:visible;">' +
            '<div class="modal-dialog modal-m">' +
            '<div class="modal-content">' +
            '<div class="modal-header"><h3 style="margin:0;"></h3></div>' +
            '<div class="modal-body">' +
            '<div class="progress progress-striped active" style="margin-bottom:0;"><div class="progress-bar" style="width: 100%"></div></div>' +
            '</div>' +
            '</div></div></div>');

        return {
            show: function (message, options) {
                var settings = $.extend({
                    dialogSize: 'm',
                    progressType: ''
                }, options);
                if (typeof message === 'undefined') {
                    message = 'Loading';
                }
                if (typeof options === 'undefined') {
                    options = {};
                }
                $dialog.find('.modal-dialog').attr('class', 'modal-dialog').addClass('modal-' + settings.dialogSize);
                $dialog.find('.progress-bar').attr('class', 'progress-bar');
                if (settings.progressType) {
                    $dialog.find('.progress-bar').addClass('progress-bar-' + settings.progressType);
                }
                $dialog.find('h3').text(message);
                $dialog.modal();
            },
            hide: function () {
                $dialog.modal('hide');
            }
        }
    })(jQuery);
</script>


<script>
    window.jsPDF = window.jspdf.jsPDF;
    applyPlugin(window.jsPDF);
</script>



<style type="text/css">
    .mandatory {
        color: red;
    }
    
    /* Chart container styling for 2x2 layout */
    #dynamicChartsContainer {
        padding: 0 15px;
    }
    
    #dynamicChartsContainer .chart-row {
        margin-left: -15px;
        margin-right: -15px;
    }
    
    #dynamicChartsContainer .form-group {
        margin-bottom: 0;
    }
    
    /* Ensure charts have consistent sizing */
    #dynamicChartsContainer [id^="market-chart-"] {
        min-height: 400px;
    }
    
    
    @@media (max-width: 992px) {
        #dynamicChartsContainer .col-lg-6 {
            margin-bottom: 20px;
        }
    }
    
    @@media (max-width: 768px) {
        #dynamicChartsContainer [id^="market-chart-"] {
            height: 300px;
        }
    }
</style>

