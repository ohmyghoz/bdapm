@using DevExtreme.AspNet.Mvc
@{
    Layout = "~/Views/Shared/_LayoutMainMetronic.cshtml";
}

@inject BDA.DataModel.DataEntities db

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="card card-default">
        @*filter*@
        <div class="row filter-panel" style="padding-top:0px;">
            <div class="card-body">
                <h1>Perkembangan Transaksi Negosiasi</h1>
                <div class="row">
                    <div class="col-lg-3 form-group">
                        <label>Jenis Periode@*<span class="mandatory">*</span>*@</label>
                        @(Html.DevExtreme().SelectBox()
                            .ID("Periodid")
                            .DataSource(new[] { "Daily", "Monthly", "Custom Date" })
                            .Width("100%")
                            .OnValueChanged("onPeriodChanged"))
                    </div>

                </div>
                <div class="row">
                    <div class="col-lg-3 form-group" id="datepickday">
                        <label>Periode@*<span class="mandatory">*</span>*@</label>
                        @(Html.DevExtreme().DateBox()
                            .ID("DatepickdID")
                            .Type(DateBoxType.Date)
                            .DisplayFormat("dd/MM/yyyy")
                            .Width("100%"))
                    </div>
                    <div class="col-lg-3 form-group" id="datepickmonth">
                        <label>Periode@*<span class="mandatory">*</span>*@</label>
                        @(Html.DevExtreme().DateBox()
                            .ID("DatepickmID")
                            .Type(DateBoxType.Date)
                            .DisplayFormat("monthAndYear")
                            .CalendarOptions(c => c
                            .MaxZoomLevel(CalendarZoomLevel.Year)
                            .MinZoomLevel(CalendarZoomLevel.Century))
                            .Width("100%"))
                    </div>
                    <div class="col-lg-3 form-group" id="starttime">
                        <label>Start Time@*<span class="mandatory">*</span>*@</label>
                        @(Html.DevExtreme().SelectBox()
                            .ID("StartTime")
                            .DataSource(Enumerable.Range(9, 9).Select(h => new { Value = h.ToString("D2") + ":00", Text = h.ToString("D2") + ":00" }))
                            .ValueExpr("Value")
                            .DisplayExpr("Text")
                            .SearchEnabled(true)
                            .Width("100%"))

                    </div>
                    <div class="col-lg-3 form-group" id="endtime">
                        <label>End Time@*<span class="mandatory">*</span>*@</label>
                        @(Html.DevExtreme().SelectBox()
                            .ID("EndTime")
                            .DataSource(Enumerable.Range(9, 9).Select(h => new { Value = h.ToString("D2") + ":00", Text = h.ToString("D2") + ":00" }))
                            .ValueExpr("Value")
                            .DisplayExpr("Text")
                            .SearchEnabled(true)
                            .Width("100%"))

                    </div>
                    <div class="col-lg-3 form-group" id="startdate">
                        <label>Start Date@*<span class="mandatory">*</span>*@</label>
                        @(Html.DevExtreme().DateBox()
                            .ID("StartDateID")
                            .Type(DateBoxType.Date)
                            .DisplayFormat("dd/MM/yyyy")
                            .Width("100%"))
                    </div>
                    <div class="col-lg-3 form-group" id="enddate">
                        <label>End Date@*<span class="mandatory">*</span>*@</label>
                        @(Html.DevExtreme().DateBox()
                            .ID("EndDateID")
                            .Type(DateBoxType.Date)
                            .DisplayFormat("dd/MM/yyyy")
                            .Width("100%"))
                    </div>
                    

                    <div class="col-lg-3 form-group" id="topDiv">
                        <label>Top@*<span class="mandatory">*</span>*@</label>
                        @(Html.DevExtreme().SelectBox()
                            .ID("ItemsPerPageSelectBox")
                            .DataSource(new[] { "10", "25", "50", "100", "150", "200", "All" })
                            .ValueExpr("this")
                            .DisplayExpr("this")
                            .SearchEnabled(true)
                            .Width("100%"))
                    </div>

                </div>
                <div class="float-left">
                    @(Html.DevExtreme().Button()
                        .ID("Filter")
                        .Type(ButtonType.Default)
                        .Text("Tampilkan")
                        .OnClick("onButtonFilterClicked")
                        .ValidationGroup("Filter"))
                </div>

                @*                 <div class="float-right">
            @if (ViewBag.Export)
            {
            <a class="btn btn-light-primary font-weight-bolder btn-sm mr-2" href="javascript:ExportToExcel();"><span class="image fa fa-file-excel"></span> Export Excel</a>
            <a class="btn btn-light-primary font-weight-bolder btn-sm mr-2" href="javascript:ExportToPdf2();"><span class="image fa fa-file-pdf"></span> Export PDF</a>
            }
            </div> *@
            </div>
        </div>
        <div class="row">
        </div>
        <br />
        @*grid*@
        <div class="gridview-div">
            <div class="col-lg-12 form-group" style="padding-right:25px;padding-left:25px">
                <div class="row" style="padding-bottom:12.5px">
                    <a class="btn btn-dark font-weight-bolder btn-sm mr-2" href="javascript:ExportToExcel();" title="Export Excel"><span class="image fa fa-file-excel"></span> Export Excel</a>
                    <a class="btn btn-success font-weight-bolder btn-sm mr-2" href="javascript:ExportToPdf2();" title="Export PDF"><span class="image fa fa-file-pdf"></span> Export PDF</a>
                </div>
                <div class="row">
                    <h4 class="headerTable">Balance</h4>
                </div>
                <div class="row">
                    @(Html.DevExtreme().DataGrid()
                        .ID("grid1")
                        .DataSource(d => d.StaticJson().Url("/tempData/md_rg_ng.json")
                        ) // Update this line
                    .KeyExpr("rowid")
                    .RemoteOperations(true)
                    .Width("100%")
                    .AllowColumnResizing(true)
                    .ColumnAutoWidth(true)
                        .Columns(columns =>
                        {
                            columns.Add().DataField("rowid").Visible(false);
                            columns.Add().DataField("security_code").Caption("Security Code");
                            columns.Add().DataField("value").Caption("Value").Alignment(HorizontalAlignment.Right).DataType(GridColumnDataType.Number).Format(",##0"); ;
                            columns.Add().DataField("volume").Caption("Volume").Alignment(HorizontalAlignment.Right).DataType(GridColumnDataType.Number).Format(",##0"); ;
                            columns.Add().DataField("freq").Caption("Freq").Alignment(HorizontalAlignment.Right).DataType(GridColumnDataType.Number).Format(",##0"); ;
                        })    
                        .FilterRow(f => f.Visible(true))
                        .ShowBorders(true)
                        .Scrolling(s => s.ShowScrollbar(ShowScrollbarMode.Always))
                        .Paging(p =>
                        {
                            p.PageSize(10);
                            p.Enabled(true);
                        })
                        .Pager(p =>
                        {
                            p.ShowInfo(true);
                        }))
                </div>
            </div>
        </div>
        <div>
            <div class="row">
            <div class="col-lg-6 form-group" style="padding-right:25px;padding-left:25px">
                    @(
                        Html.DevExtreme().Chart()
                        .ID("market-value-chart1")
                        .Palette(VizPalette.Material)
                        .Title("MSIN")
                        .ArgumentAxis(a => a.Label(l => l.OverlappingBehavior(OverlappingBehavior.Stagger)))
                        .CommonSeriesSettings(s => s
                        .ArgumentField("Day")
                        )
                        .CommonAxisSettings(s => s
                        .Grid(g => g.Visible(true))
                        )
                        .Margin(m => m.Left(20))
                        .Series(s =>
                        {
                            s.Add()
                            .ValueField("HighNG").Name("High NG")
                            .Type(SeriesType.Spline)
                            .Axis("value");
                            s.Add()
                            .ValueField("LowNG").Name("Low NG")
                            .Type(SeriesType.Spline)
                            .Axis("value");
                            s.Add()
                            .ValueField("HighRG").Name("High RG")
                            .Type(SeriesType.Spline)
                            .Axis("value");
                            s.Add()
                            .ValueField("LowRG").Name("Low RG")
                            .Type(SeriesType.Spline)
                            .Axis("value");
                            s.Add()
                            .ValueField("CloseRG").Name("Close RG")
                            .Type(SeriesType.Spline)
                            .Axis("value");
                            s.Add()
                            .ValueField("VolumeNG").Name("Volume NG")
                            .Type(SeriesType.Bar)
                            .Axis("volume");


                        })
                        .Tooltip(t => t.Enabled(true))
                        .Legend(l => l
                        .VerticalAlignment(VerticalEdge.Top)
                        .HorizontalAlignment(HorizontalAlignment.Right)
                        )
                        .ValueAxis(a =>
                        {
                            a.Add()
                            .Name("value")
                            .Position(Position.Right)
                            .Label(l => l.Format(Format.Decimal))
                            .AllowDecimals(false)
                            .AxisDivisionFactor(60);

                            a.Add()
                            .Name("volume")
                            .Position(Position.Left)
                            .Label(l => l.Format(Format.Decimal))
                            .TickInterval(10000000)
                            ;
                        }
                        )
                        .Export(e => e.Enabled(true))
                        .DataSource(new[] {
                new { Day = "1/4", HighNG = "50", LowNG = "50", CloseRG= "50", HighRG="50", LowRG="50", VolumeNG="50000000" }

                })
                        )
            </div>
            <div class="col-lg-6 form-group" style="padding-right:25px;padding-left:25px">
                    @(
                    Html.DevExtreme().Chart()
                                .ID("market-value-chart2")
                                .Palette(VizPalette.Material)
                                .Title("BNBR")
                                .ArgumentAxis(a => a.Label(l => l.OverlappingBehavior(OverlappingBehavior.Stagger)))
                                .CommonSeriesSettings(s => s
                                .ArgumentField("Day")
                                )
                                .CommonAxisSettings(s => s
                                .Grid(g => g.Visible(true))
                                )
                                .Margin(m => m.Left(20))
                                .Series(s =>
                                {
                                    s.Add()
                                        .ValueField("HighNG").Name("High NG")
                                        .Type(SeriesType.Spline)
                                        .Axis("value");
                                    s.Add()
                                        .ValueField("LowNG").Name("Low NG")
                                        .Type(SeriesType.Spline)
                                        .Axis("value");
                                    s.Add()
                                        .ValueField("HighRG").Name("High RG")
                                        .Type(SeriesType.Spline)
                                        .Axis("value");
                                    s.Add()
                                        .ValueField("LowRG").Name("Low RG")
                                        .Type(SeriesType.Spline)
                                        .Axis("value");
                                    s.Add()
                                        .ValueField("CloseRG").Name("Close RG")
                                        .Type(SeriesType.Spline)
                                        .Axis("value");
                                    s.Add()
                                        .ValueField("VolumeNG").Name("Volume NG")
                                        .Type(SeriesType.Bar)
                                        .Axis("volume");


                                })
                                .Tooltip(t => t.Enabled(true))
                                .Legend(l => l
                                .VerticalAlignment(VerticalEdge.Top)
                                .HorizontalAlignment(HorizontalAlignment.Right)
                                )
                                .ValueAxis(a =>
                                {
                                    a.Add()
                                    .Name("value")
                                    .Position(Position.Right)
                                    .Label(l => l.Format(Format.Decimal))
                                    .AllowDecimals(false)
                                    .AxisDivisionFactor(60);

                                    a.Add()
                                    .Name("volume")
                                    .Position(Position.Left)
                                    .Label(l => l.Format(Format.Decimal))
                                    .TickInterval(10000000)
                                    ;
                                }
                                )
                    .Export(e => e.Enabled(true))
                    .DataSource(new[] {
            new { Day = "1/4", HighNG = "50", LowNG = "50", CloseRG= "50", HighRG="50", LowRG="50", VolumeNG="50000000" }
          
            })
                    )
            </div>
            </div>
            <div class="row">
            <div class="col-lg-6 form-group" style="padding-right:25px;padding-left:25px">
                    @(
                        Html.DevExtreme().Chart()
                        .ID("market-value-chart3")
                        .Palette(VizPalette.Material)
                        .Title("TGRA")
                        .ArgumentAxis(a => a.Label(l => l.OverlappingBehavior(OverlappingBehavior.Stagger)))
                        .CommonSeriesSettings(s => s
                        .ArgumentField("Day")
                        )
                        .CommonAxisSettings(s => s
                        .Grid(g => g.Visible(true))
                        )
                        .Margin(m => m.Left(20))
                        .Series(s =>
                        {
                            s.Add()
                            .ValueField("HighNG").Name("High NG")
                            .Type(SeriesType.Spline)
                            .Axis("value");
                            s.Add()
                            .ValueField("LowNG").Name("Low NG")
                            .Type(SeriesType.Spline)
                            .Axis("value");
                            s.Add()
                            .ValueField("HighRG").Name("High RG")
                            .Type(SeriesType.Spline)
                            .Axis("value");
                            s.Add()
                            .ValueField("LowRG").Name("Low RG")
                            .Type(SeriesType.Spline)
                            .Axis("value");
                            s.Add()
                            .ValueField("CloseRG").Name("Close RG")
                            .Type(SeriesType.Spline)
                            .Axis("value");
                            s.Add()
                            .ValueField("VolumeNG").Name("Volume NG")
                            .Type(SeriesType.Bar)
                            .Axis("volume");


                        })
                        .Tooltip(t => t.Enabled(true))
                        .Legend(l => l
                        .VerticalAlignment(VerticalEdge.Top)
                        .HorizontalAlignment(HorizontalAlignment.Right)
                        )
                        .ValueAxis(a =>
                        {
                            a.Add()
                            .Name("value")
                            .Position(Position.Right)
                            .Label(l => l.Format(Format.Decimal))
                            .AllowDecimals(false)
                            .AxisDivisionFactor(60);

                            a.Add()
                            .Name("volume")
                            .Position(Position.Left)
                            .Label(l => l.Format(Format.Decimal))
                            .TickInterval(10000000)
                            ;
                        }
                        )
                        .Export(e => e.Enabled(true))
                        .DataSource(new[] {
                new { Day = "1/4", HighNG = "50", LowNG = "50", CloseRG= "50", HighRG="50", LowRG="50", VolumeNG="50000000" }

                })
                        )
            </div>
            <div class="col-lg-6 form-group" style="padding-right:25px;padding-left:25px">
                    @(
                        Html.DevExtreme().Chart()
                        .ID("market-value-chart4")
                        .Palette(VizPalette.Material)
                        .Title("MTFN")
                        .ArgumentAxis(a => a.Label(l => l.OverlappingBehavior(OverlappingBehavior.Stagger)))
                        .CommonSeriesSettings(s => s
                        .ArgumentField("Day")
                        )
                        .CommonAxisSettings(s => s
                        .Grid(g => g.Visible(true))
                        )
                        .Margin(m => m.Left(20))
                        .Series(s =>
                        {
                            s.Add()
                            .ValueField("HighNG").Name("High NG")
                            .Type(SeriesType.Spline)
                            .Axis("value");
                            s.Add()
                            .ValueField("LowNG").Name("Low NG")
                            .Type(SeriesType.Spline)
                            .Axis("value");
                            s.Add()
                            .ValueField("HighRG").Name("High RG")
                            .Type(SeriesType.Spline)
                            .Axis("value");
                            s.Add()
                            .ValueField("LowRG").Name("Low RG")
                            .Type(SeriesType.Spline)
                            .Axis("value");
                            s.Add()
                            .ValueField("CloseRG").Name("Close RG")
                            .Type(SeriesType.Spline)
                            .Axis("value");
                            s.Add()
                            .ValueField("VolumeNG").Name("Volume NG")
                            .Type(SeriesType.Bar)
                            .Axis("volume");


                        })
                        .Tooltip(t => t.Enabled(true))
                        .Legend(l => l
                        .VerticalAlignment(VerticalEdge.Top)
                        .HorizontalAlignment(HorizontalAlignment.Right)
                        )
                        .ValueAxis(a =>
                        {
                            a.Add()
                            .Name("value")
                            .Position(Position.Right)
                            .Label(l => l.Format(Format.Decimal))
                            .AllowDecimals(false)
                            .AxisDivisionFactor(60);

                            a.Add()
                            .Name("volume")
                            .Position(Position.Left)
                            .Label(l => l.Format(Format.Decimal))
                            .TickInterval(10000000)
                            ;
                        }
                        )
                        .Export(e => e.Enabled(true))
                        .DataSource(new[] {
                new { Day = "1/4", HighNG = "50", LowNG = "50", CloseRG= "50", HighRG="50", LowRG="50", VolumeNG="50000000" }

                })
                        )
            </div>
           </div>

        </div>
    </div>


    <!-- The Modal  Detail-->
  
}



<script>
    window.jsPDF = window.jspdf.jsPDF;
    applyPlugin(window.jsPDF);
</script>

<script>
    function onPeriodChanged(e) {
        const selectedValue = e.value;
        const datepickdayDiv = document.getElementById("datepickday");
        const datepickmonthDiv = document.getElementById("datepickmonth");
        const asingDiv = document.getElementById("asingDiv");
        const starttimeDiv = document.getElementById("starttime")
        const endtimeDiv = document.getElementById("endtime")
        const startdateDiv = document.getElementById("startdate")
        const enddateDiv = document.getElementById("enddate")

        if (selectedValue === "Daily") {
            starttimeDiv.style.display = "block";
            endtimeDiv.style.display = "block";
            datepickdayDiv.style.display = "block";
            datepickmonthDiv.style.display = "none";
            startdateDiv.style.display = "none";
            enddateDiv.style.display = "none";

        } else if (selectedValue === "Monthly") {
            datepickmonthDiv.style.display = "block";
            starttimeDiv.style.display = "none";
            endtimeDiv.style.display = "none";
            datepickdayDiv.style.display = "none";
            startdateDiv.style.display = "none";
            enddateDiv.style.display = "none";
        } else {
            starttimeDiv.style.display = "none";
            endtimeDiv.style.display = "none";
            datepickdayDiv.style.display = "none";
            datepickmonthDiv.style.display = "none";
            startdateDiv.style.display = "block";
            enddateDiv.style.display = "block";
        }
    }

    $(document).ready(function () {
        // Hide the confirmation and asing divs initially
        document.getElementById("starttime").style.display = "none";
        document.getElementById("endtime").style.display = "none";
        document.getElementById("datepickday").style.display = "none";
        document.getElementById("datepickmonth").style.display = "none";
        document.getElementById("startdate").style.display = "none";
        document.getElementById("enddate").style.display = "none";
    });

    $(function () {
        const startDate = $("#PeriodeAwal").dxDateBox({
            onValueChanged: function (e) {
                endDate.option("min", e.value);
            }
        }).dxDateBox("instance");

        $("#PeriodeAwal").dxValidator({
            validationGroup: "Filter",
            validationRules: [{ type: "required", message: "[Tanggal] harus dipilih" }]
        })
    });

    $(function () {
        $("#penggunaandataid").dxValidator({
            validationGroup: "Filter",
            validationRules: [{ type: "required", message: "[Penggunaan Data] harus dipilih" }]
        })
    });

    $(function () {
        $("#namaPEid").dxValidator({
            validationGroup: "Filter",
            validationRules: [{ type: "required", message: "[Nama PE] harus dipilih" }]
        })
    });

    $(window).on('load', function () {
        $("#ModalSimpanPenggunaanData").modal("show");
    });

    $("#btnSavePenggunaanData").click(function () {
        let penggunaandataid = $("#penggunaandataid").dxSelectBox("instance").option("value");

        if (penggunaandataid == null) {
            alert("Silahkan Pilih Tujuan Penggunaan Data");
            return false;
        } else {
            $.ajax({
                url: '@Url.Action("SimpanPenggunaanData", "SegmentationSummaryClusterMKBD")',
                data: { id: penggunaandataid },
                dataType: "json",
                type: "POST",
                success: function (data) {
                    if (data.success == true) {
                        //alert(data.message);
    @* waitingDialog.hide(); *@
                            $('#ModalSimpanPenggunaanData').modal('hide');
                        return "Saving Success !";
                    }
                    else if (data.success == false) {
    @*  waitingDialog.hide(); *@
                            alert(data.message);
                        $('#ModalSimpanPenggunaanData').modal('hide');
                        return "Saving Failed !";
                    }
                }
            });
        }
    });

    function ExportToPdf() {
        $.ajax({
            type: "POST",
            url: "@Url.Action("LogExportIndex", "MaxMinOverdue")",
            success: function (response) {
                if (response.result == "Success") {
                    const doc = new jsPDF({
                        orientation: "landscape",
                        unit: "cm",
                        format: [21, 60]
                    });
                    var dataGrid = $("#grid1").dxDataGrid("instance");
                    var fileName = "MaxMinOverdue_" + new Date().toISOString().slice(0, 10) + ".pdf";
                    doc.setFontSize("6")
                    //var keys = $("#grid1").dxDataGrid("getSelectedRowsData")
                    //console.log(keys)
                    DevExpress.pdfExporter.exportDataGrid({
                        jsPDFDocument: doc,
                        component: dataGrid,
                        keepColumnWidths: true
                        //selectedRowsOnly: true
                    }).then(function () {
                        doc.save(fileName);
                    });
                }
            }
        });
    }

    function ExportToPdf2() {
        var dataGrid = $("#grid1").dxDataGrid("instance");
        dataGrid.option("onExporting", function (e) { });
        dataGrid.option("onFileSaving", function (e) {
            var fd = new FormData();
            fd.append("file", e.data);
            $.ajax({
                type: "POST",
                url: "@Url.Action("ExportPDF", "SegmentationSummaryClusterMKBD")",
                data: fd,
                processData: false,
                contentType: false
            }).done(function (data) {
                window.location = "@Url.Action("File", "SegmentationSummaryClusterMKBD")"
            });
            e.cancel = true;
        });

        dataGrid.exportToExcel();
    }

    function onSelectionChanged(e) {
        if (e.addedItems.length > 0) {
            e.component.field().val(""); // Clears the search text. However, search filter is only applied to the widget after focus is lost in the input element
        }
    }

    
    function onLJKOpened(e) {
        e.component.content().find('.dx-list-select-all').hide();
    }

    function onButtonFilterClicked(e) {
        const res = e.validationGroup.validate();
        if (res.status === "valid") {
            $("#grid1").dxDataGrid("instance").refresh();
        }
    }

    function onGridBeforeSend(method, ajaxOptions) {
        let namaPE = $("#namaPEid").dxSelectBox("instance").option("value");
        let tempPeriodeAwal = $("#PeriodeAwal").dxDateBox("instance").option("value");
        let status = $("#Statusid").dxTagBox("instance").option("value");

        let periodeAwal = null;
        if (tempPeriodeAwal != null) {
            periodeAwal = tempPeriodeAwal.getFullYear() + '-' + (tempPeriodeAwal.getMonth() + 1) + '-' + tempPeriodeAwal.getDate();
        }
        ajaxOptions.data.namaPE = JSON.stringify(namaPE);
        ajaxOptions.data.periodeAwal = periodeAwal;
        ajaxOptions.data.status = JSON.stringify(status);
    }

    var waitingDialog = (function ($) {

        // Creating modal dialog's DOM
        var $dialog = $(
            '<div class="modal fade" data-backdrop="static" data-keyboard="false" tabindex="-1" role="dialog" aria-hidden="true" style="padding-top:15%; overflow-y:visible;">' +
            '<div class="modal-dialog modal-m">' +
            '<div class="modal-content">' +
            '<div class="modal-header"><h3 style="margin:0;"></h3></div>' +
            '<div class="modal-body">' +
            '<div class="progress progress-striped active" style="margin-bottom:0;"><div class="progress-bar" style="width: 100%"></div></div>' +
            '</div>' +
            '</div></div></div>');

        return {
            show: function (message, options) {
                // Assigning defaults
                var settings = $.extend({
                    dialogSize: 'm',
                    progressType: ''
                }, options);
                if (typeof message === 'undefined') {
                    message = 'Loading';
                }
                if (typeof options === 'undefined') {
                    options = {};
                }
                // Configuring dialog
                $dialog.find('.modal-dialog').attr('class', 'modal-dialog').addClass('modal-' + settings.dialogSize);
                $dialog.find('.progress-bar').attr('class', 'progress-bar');
                if (settings.progressType) {
                    $dialog.find('.progress-bar').addClass('progress-bar-' + settings.progressType);
                }
                $dialog.find('h3').text(message);
                // Opening dialog
                $dialog.modal();
            },
            /**
                * Closes dialog
                */
            hide: function () {
                $dialog.modal('hide');
            }
        }
    })(jQuery);
</script>

<style type="text/css">
    .mandatory {
        color: red;
    }
</style>


