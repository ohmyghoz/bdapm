@using DevExtreme.AspNet.Mvc
@{
    Layout = "~/Views/Shared/_LayoutMainMetronic.cshtml";
    string reportId = "Assesmen Pasar Equity";
}

@inject BDA.DataModel.DataEntities db

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="card card-default">
        @*filter*@
        <div class="row filter-panel" style="padding-top:0px;">
            <div class="card-body">
                <h1>Assessment Pasar Equity</h1>
                <div class="row">
                    <div class="col-lg-3 form-group">
                        <label>Jenis Periode@*<span class="mandatory">*</span>*@</label>
                        @(Html.DevExtreme().SelectBox()
                            .ID("Periodid")
                            .DataSource(new[] { "Daily", "Monthly", "Custom Date" })
                            .Width("100%")
                            .OnValueChanged("onPeriodChanged"))
                    </div>

                </div>
                <div class="row">
                    <div class="col-lg-3 form-group" id="datepickday">
                        <label>Periode@*<span class="mandatory">*</span>*@</label>
                        @(Html.DevExtreme().DateBox()
                            .ID("datePickdID")
                            .Type(DateBoxType.Date)
                            .DisplayFormat("dd/MM/yyyy")
                            .Width("100%"))
                    </div>
                    <div class="col-lg-3 form-group" id="datepickmonth">
                        <label>Periode@*<span class="mandatory">*</span>*@</label>
                        @(Html.DevExtreme().DateBox()
                            .ID("DatepickmID")
                            .Type(DateBoxType.Date)
                            .DisplayFormat("monthAndYear")
                            .CalendarOptions(c => c
                            .MaxZoomLevel(CalendarZoomLevel.Year)
                            .MinZoomLevel(CalendarZoomLevel.Century))
                            .Width("100%"))
                    </div>
                    <div class="col-lg-3 form-group" id="starttime">
                        <label>Start Time@*<span class="mandatory">*</span>*@</label>
                        @(Html.DevExtreme().SelectBox()
                            .ID("StartTime")
                            .DataSource(Enumerable.Range(9, 9).Select(h => new { Value = h.ToString("D2") + ":00", Text = h.ToString("D2") + ":00" }))
                            .ValueExpr("Value")
                            .DisplayExpr("Text")
                            .SearchEnabled(true)
                            .Width("100%"))

                    </div>
                    <div class="col-lg-3 form-group" id="endtime">
                        <label>End Time@*<span class="mandatory">*</span>*@</label>
                        @(Html.DevExtreme().SelectBox()
                            .ID("EndTime")
                            .DataSource(Enumerable.Range(9, 9).Select(h => new { Value = h.ToString("D2") + ":00", Text = h.ToString("D2") + ":00" }))
                            .ValueExpr("Value")
                            .DisplayExpr("Text")
                            .SearchEnabled(true)
                            .Width("100%"))

                    </div>
                    <div class="col-lg-3 form-group" id="startdate">
                        <label>Start Date@*<span class="mandatory">*</span>*@</label>
                        @(Html.DevExtreme().DateBox()
                            .ID("StartDateID")
                            .Type(DateBoxType.Date)
                            .DisplayFormat("dd/MM/yyyy")
                            .Width("100%"))
                    </div>
                    <div class="col-lg-3 form-group" id="enddate">
                        <label>End Date@*<span class="mandatory">*</span>*@</label>
                        @(Html.DevExtreme().DateBox()
                            .ID("EndDateID")
                            .Type(DateBoxType.Date)
                            .DisplayFormat("dd/MM/yyyy")
                            .Width("100%"))
                    </div>
                    
                    <div class="col-lg-3 form-group">
                        <label>Lokal/Asing@*<span class="mandatory">*</span>*@</label>
                        @(Html.DevExtreme().TagBox()
                            .ID("LokalAsingid")
                            .DataSource(new[] { "Lokal", "Asing" })
                            .ShowSelectionControls(true)
                            .MaxDisplayedTags(3)
                            .SearchEnabled(true)
                            .OnSelectionChanged("onSelectionChanged")
                            .Width("100%"))
                    </div>

                    <div class="col-lg-3 form-group">
                        <label>Buy/Sell@*<span class="mandatory">*</span>*@</label>
                        @(Html.DevExtreme().TagBox()
                            .ID("Buysellid")
                            .DataSource(new[] { "Buy", "Sell" })
                            .ShowSelectionControls(true)                
                            .SearchEnabled(true)
                            .OnSelectionChanged("onSelectionChanged")
                            .Width("100%"))
                    </div>

                    <div class="col-lg-3 form-group">
                        <label>Board@*<span class="mandatory">*</span>*@</label>
                        @(Html.DevExtreme().TagBox()
                            .ID("Boardid")
                            .DataSource(new[] { "Main", "Development", "Acceleration", "New Economy", "Watchlist" })
                            .ShowSelectionControls(true)
                            .MaxDisplayedTags(3)
                            .SearchEnabled(true)
                            .OnSelectionChanged("onSelectionChanged")
                            .Width("100%"))
                    </div>

                    <div class="col-lg-3 form-group">
                        <label>Domestik/Foreign@*<span class="mandatory">*</span>*@</label>
                        @(Html.DevExtreme().TagBox()
                            .ID("DomestikForeignid")
                            .DataSource(new[] { "Domestik", "Foreign" })
                            .ShowSelectionControls(true)
                            .MaxDisplayedTags(3)
                            .SearchEnabled(true)
                            .OnSelectionChanged("onSelectionChanged")
                            .Width("100%"))
                    </div>
                   
                    <div class="col-lg-3 form-group">
                        <label>Market@*<span class="mandatory">*</span>*@</label>
                        @(Html.DevExtreme().TagBox()
                            .ID("Marketid")
                            .DataSource(new[] { "Reguler", "Negosiasi","Tunai" })
                            .ShowSelectionControls(true)
                            .MaxDisplayedTags(3)
                            .SearchEnabled(true)
                            .OnSelectionChanged("onSelectionChanged")
                            .Width("100%"))
                    </div>

                    <div class="col-lg-3 form-group">

                    <label>Value/Volume/Market</label>
                    @(Html.DevExtreme().SelectBox()
                        .ID("ChartType")
                        .DataSource(new[] { "Value", "Volume", "Market Cap" })
                        .Value("Value")
                        .OnValueChanged(@<text>
                        function (e) {
                        onChartTypeSelectionChanged(e);
                        }
                         </text>)
                        .Width("100%"))
                    </div>

                    <div class="col-lg-3 form-group">
                        <label>Swap APE@*<span class="mandatory">*</span>*@</label>
                        @(Html.DevExtreme().TagBox()
                            .ID("SwapAPEid")
                            .DataSource(new[] { "Value", "Volume", "Market" })
                            .ShowSelectionControls(true)
                            .MaxDisplayedTags(3)
                            .SearchEnabled(true)
                            .OnSelectionChanged("onSelectionChanged")
                            .Width("100%"))
                    </div>
                    <div class="col-lg-3 form-group">
                        <label>Summarize/Netting@*<span class="mandatory">*</span>*@</label>
                        @(Html.DevExtreme().SelectBox()
                            .ID("SummarizeNettingid")
                            .DataSource(new[] { "Summarize", "Netting" })
                            .Value("Summarize")
                            .Width("100%"))
                    </div>
                    <div class="col-lg-3 form-group" id="topDiv">
                        <label>Top@*<span class="mandatory">*</span>*@</label>
                        @(Html.DevExtreme().SelectBox()
                            .ID("ItemsPerPageSelectBox")
                            .DataSource(new[] { "10", "25", "50", "100", "150", "200", "All" })
                            .ValueExpr("this")
                            .DisplayExpr("this")
                            .SearchEnabled(true)
                            .Width("100%"))
                    </div>

                </div>
                <div class="float-left">
                    @(Html.DevExtreme().Button()
                        .ID("filterButton")
                        .Type(ButtonType.Default)
                        .Text("Tampilkan")
                        .OnClick("onButtonFilterClicked")
                        .ValidationGroup("Filter"))
                </div>

                @*                 <div class="float-right">
            @if (ViewBag.Export)
            {
            <a class="btn btn-light-primary font-weight-bolder btn-sm mr-2" href="javascript:ExportToExcel();"><span class="image fa fa-file-excel"></span> Export Excel</a>
            <a class="btn btn-light-primary font-weight-bolder btn-sm mr-2" href="javascript:ExportToPdf2();"><span class="image fa fa-file-pdf"></span> Export PDF</a>
            }
            </div> *@
            </div>
        </div>

        <div class="row filter-panel" style="padding-top:0px;">
            <div class="card-body">
                <div class="row">
                    <div class="col-lg-3 form-group" style="padding-right:10px;padding-left:10px;border: 1px solid black">
                        <div class="row">
                            <h4 class="headerTable">IHSG</h4>
                        </div>
                        <div class="row" id="cardGrid1" style="padding-top:30px; padding-bottom:30px; padding-right:5px; padding-left:5px; display: none; align-items: center; justify-content: center; min-height: 120px;">
                            <div id="ihsgValue" style="font-size: 28px; text-align: center; font-weight:bold; width: 100%; display: flex; align-items: center; justify-content: center;">
                                0
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-3 form-group" style="padding-right:10px;padding-left:10px;border: 1px solid black">
                        <div class="row">
                            <h4 class="headerTable">Market Cap</h4>
                        </div>
                        <div class="row" id="cardGrid2" style="padding-top:30px; padding-bottom:30px; padding-right:5px; padding-left:5px; display: none; align-items: center; justify-content: center; min-height: 120px;">
                            <div id="marketCapValue" style="font-size: 28px; text-align: center; font-weight:bold; width: 100%; display: flex; align-items: center; justify-content: center;">
                                0
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-3 form-group" style="padding-right:10px;padding-left:10px;border: 1px solid black">
                        <div class="row">
                            <h4 class="headerTable">Net Buy Value</h4>
                        </div>
                        <div class="row" id="cardGrid3" style="padding-top:30px; padding-bottom:30px; padding-right:5px; padding-left:5px; display: none; align-items: center; justify-content: center; min-height: 120px;">
                            <div id="netValueValue" style="font-size: 28px; text-align: center; font-weight:bold; width: 100%; display: flex; align-items: center; justify-content: center;">
                                0
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-3 form-group" style="padding-right:10px;padding-left:10px;border: 1px solid black">
                        <div class="row">
                            <h4 class="headerTable">Net Buy Volume</h4>
                        </div>
                        <div class="row" id="cardGrid4" style="padding-top:30px; padding-bottom:30px; padding-right:5px; padding-left:5px; display: none; align-items: center; justify-content: center; min-height: 120px;">
                            <div id="netVolumeValue" style="font-size: 28px; text-align: center; font-weight:bold; width: 100%; display: flex; align-items: center; justify-content: center;">
                                0
                            </div>
                        </div>
                    </div>
                </div>
                <!-- Single date info for all 4 cards -->
                <div class="row" id="cardGridInfo" style="display: none; padding: 10px; font-size: 14px; text-align: center; color: #666;">
                    *hasil berdasarkan data tanggal&nbsp;&nbsp;   <span id="dateInfo"></span>
                </div>
            </div>
        </div>

        <!-- Replace the chart section with this corrected version -->
        <div class="row" style="padding-top: 20px;">
            <div class="col-lg-12">
                <div class="card">
                    <div class="card-body">
                        <!-- Chart Type Selection -->
                        <!-- Single Chart Container -->
                        <div class="row">
                            <div class="col-lg-12">
                                @(Html.DevExtreme().Chart()
                                    .ID("marketDataChart")
                                    .Palette(VizPalette.Bright)
                                    .CommonSeriesSettings(s => s
                                    .ArgumentField("date")
                                    .Type(SeriesType.Spline)
                                    .Point(p => p.Visible(true).Size(4))
                                    )
                                    .CommonAxisSettings(s => s
                                    .Grid(g => g.Visible(true))
                                    )
                                    .Margin(m => m.Bottom(20))
                                    .Series(s =>
                                    {
                                        s.Add().ValueField("value").Name("Market Value");
                                    })
                                    .Tooltip(t => t
                                    .Enabled(true)
                                    .CustomizeTooltip(@<text>
                                function(arg) {
                                return {
                                text: arg.seriesName + "<br />" +
                                "Date: " + new Date(arg.argument).toLocaleDateString('id-ID') + "<br />" +
                                "Value: " + formatNumber(arg.value)
                                };
                                }
                            </text>)
                                    )
                                    .Legend(l => l
                                    .VerticalAlignment(VerticalEdge.Bottom)
                                    .HorizontalAlignment(HorizontalAlignment.Center)
                                    )
                                    .ArgumentAxis(a => a
                                    .ArgumentType(ChartDataType.DateTime)
                                    .Label(l => l
                                    .Format(f => f.Type(Format.ShortDate))
                                    .RotationAngle(-45)
                                    )
                                    .Grid(g => g.Visible(true))
                                    )
                                    .ValueAxis(v => v
                                    .Add()
                                    .Label(l => l.CustomizeText(@<text>
                                function(arg) {
                                return formatNumber(arg.value);
                                }
                            </text>))
                                    .Grid(g => g.Visible(true))
                                    )
                                    .Export(e => e.Enabled(true))
                                    .Title("Market Value Chart")
                                    .DataSource(new object[0])
                                    )
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    @*grid*@
    <div class="row filter-panel" style="padding-top:0px;">
        <div class="card-body">
            <div class="row">
                <div class="col-lg-6 form-group" style="padding-right:25px;padding-left:25px">
                    <div class="row" style="padding-bottom:12.5px">
                            <a class="btn btn-dark font-weight-bolder btn-sm mr-2" href="javascript:exportGridToExcel1();" title="Export Excel"><span class="image fa fa-file-excel"></span> Export Excel</a>
                        <a class="btn btn-success font-weight-bolder btn-sm mr-2" href="javascript:exportGridToPDF1();" title="Export PDF"><span class="image fa fa-file-pdf"></span> Export PDF</a>
                    </div>
                    <div class="row">
                        <h4 class="headerTable">Investor Code</h4>
                    </div>
                    <div class="row">
                        <div id="gridInv" style="display: none;">
                            @(Html.DevExtreme().DataGrid()
                                .ID("gridInvestor")
                                .DataSource(d => d.Mvc()
                                .Controller("MarketDriven")
                                .LoadAction("GetInvestorGridData")
                                .Key("rowid")
                                )
                                .KeyExpr("rowid")
                                .RemoteOperations(true)
                                .Width("100%")
                                .AllowColumnResizing(true)
                                .Columns(columns =>
                                {
                                    columns.Add().DataField("rowid").Visible(false);
                                    columns.Add().DataField("investorcode").Caption("Investor Code");
                                    columns.Add().DataField("cpinvestorcode").Caption("Trade ID");
                                    columns.Add().DataField("value").Caption("Value")
                                    .Alignment(HorizontalAlignment.Right)
                                    .DataType(GridColumnDataType.Number)
                                    .Format(",##0");
                                    columns.Add().DataField("quantity").Caption("Volume")
                                    .Alignment(HorizontalAlignment.Right)
                                    .DataType(GridColumnDataType.Number)
                                    .Format(",##0");
                                })
                                .FilterRow(f => f.Visible(false))
                                .ShowBorders(true)
                                .Scrolling(s => s.ShowScrollbar(ShowScrollbarMode.Always))
                                .Paging(p =>
                                {
                                    p.PageSize(15);
                                    p.Enabled(true);
                                })
                                .Pager(p =>
                                {
                                    p.ShowInfo(true);
                                })
                                )
                                </div>
                    </div>
                </div>
                <div class="col-lg-6 form-group" style="padding-right:25px;padding-left:25px">
                    <div class="row" style="padding-bottom:12.5px">
                        <a class="btn btn-dark font-weight-bolder btn-sm mr-2" href="javascript:exportGridToExcel2();" title="Export Excel"><span class="image fa fa-file-excel"></span> Export Excel</a>
                        <a class="btn btn-success font-weight-bolder btn-sm mr-2" href="javascript:exportGridToPDF2();" title="Export PDF"><span class="image fa fa-file-pdf"></span> Export PDF</a>
                    </div>
                    <div class="row">
                        <h4 class="headerTable">Security Code </h4>
                    </div>
                    <div class="row">
                        <div id="gridSec" style="display: none;">
                            @(Html.DevExtreme().DataGrid()
                                .ID("gridSecurity")
                                .DataSource(d => d.Mvc()
                                .Controller("MarketDriven")
                                .LoadAction("GetSecurityGridData")
                                .Key("rowid")
                                )
                                .KeyExpr("rowid")
                                .RemoteOperations(true)
                                .Width("100%")
                                .AllowColumnResizing(true)
                                .Columns(columns =>
                                {
                                    columns.Add().DataField("rowid").Visible(false);
                                    columns.Add().DataField("securitycode").Caption("Security Code");
                                    columns.Add().DataField("value").Caption("Value")
                                    .Alignment(HorizontalAlignment.Right)
                                    .DataType(GridColumnDataType.Number)
                                    .Format(",##0");
                                    columns.Add().DataField("quantity").Caption("Volume")
                                    .Alignment(HorizontalAlignment.Right)
                                    .DataType(GridColumnDataType.Number)
                                    .Format(",##0");
                                    columns.Add().DataField("frequency").Caption("Frequency")
                                    .Alignment(HorizontalAlignment.Right)
                                    .DataType(GridColumnDataType.Number)
                                    .Format(",##0");
                                })
                                .FilterRow(f => f.Visible(false))
                                .ShowBorders(true)
                                .Scrolling(s => s.ShowScrollbar(ShowScrollbarMode.Always))
                                .Paging(p =>
                                {
                                    p.PageSize(15);
                                    p.Enabled(true);
                                })
                                .Pager(p =>
                                {
                                    p.ShowInfo(true);
                                })
                                )
                                </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6 form-group" style="padding-right:25px;padding-left:25px">
                    <div class="row" style="padding-bottom:12.5px">
                        <a class="btn btn-dark font-weight-bolder btn-sm mr-2" href="javascript:exportGridToExcel3();" title="Export Excel"><span class="image fa fa-file-excel"></span> Export Excel</a>
                        <a class="btn btn-success font-weight-bolder btn-sm mr-2" href="javascript:exportGridToPDF3();" title="Export PDF"><span class="image fa fa-file-pdf"></span> Export PDF</a>
                    </div>
                    <div class="row">
                        <h4 class="headerTable">CP Investor Code</h4>
                    </div>
                    <div class="row">
                        <div id="gridCPInv" style="display: none;">
                            @(Html.DevExtreme().DataGrid()
                                .ID("gridCPInv")
                                .DataSource(d => d.Mvc()
                                .Controller("MarketDriven")
                                .LoadAction("GetCPInvestorGridData")
                                .Key("rowid")
                                )
                                .KeyExpr("rowid")
                                .RemoteOperations(true)
                                .Width("100%")
                                .AllowColumnResizing(true)
                                .Columns(columns =>
                                {
                                    columns.Add().DataField("rowid").Visible(false);
                                    columns.Add().DataField("cpinvestorcode").Caption("CP Investor Code");
                                    columns.Add().DataField("cptradeid").Caption("CP Trade ID");
                                    columns.Add().DataField("value").Caption("Value")
                                    .Alignment(HorizontalAlignment.Right)
                                    .DataType(GridColumnDataType.Number)
                                    .Format(",##0");
                                    columns.Add().DataField("quantity").Caption("Volume")
                                    .Alignment(HorizontalAlignment.Right)
                                    .DataType(GridColumnDataType.Number)
                                    .Format(",##0");
                                })
                                .FilterRow(f => f.Visible(false))
                                .ShowBorders(true)
                                .Scrolling(s => s.ShowScrollbar(ShowScrollbarMode.Always))
                                .Paging(p =>
                                {
                                    p.PageSize(15);
                                    p.Enabled(true);
                                })
                                .Pager(p =>
                                {
                                    p.ShowInfo(true);
                                })
                                )
                                </div>
                    </div>
                </div>
                <!-- disimpan  <div class="col-lg-6 form-group" style="padding-right:25px;padding-left:25px">
                    <div class="row" style="padding-bottom:12.5px">
                        <a class="btn btn-dark font-weight-bolder btn-sm mr-2" href="javascript:ExportToExcel();" title="Export Excel"><span class="image fa fa-file-excel"></span> Export Excel</a>
                        <a class="btn btn-success font-weight-bolder btn-sm mr-2" href="javascript:ExportToPdf2();" title="Export PDF"><span class="image fa fa-file-pdf"></span> Export PDF</a>
                    </div>
                    <div class="row">
                        <h4 class="headerTable">Transaction</h4>
                    </div>
                    <div class="row">
                    </div>
                </div> -->
            </div>
        </div>
    </div>
       


    <!-- The Modal  Detail-->
    <div class="modal fade" id="ModalSimpanPenggunaanData" tabindex="-1" role="document" aria-hidden="true" data-backdrop="static" data-keyboard="false">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header" style="background-color:#0066b2">
                    <h4 class="modal-title" style="text-align:left">
                        <font color="white">Pilih Penggunaan Data</font>
                    </h4>
                </div><!--Modal Header-->
                <!-- Modal body -->
                <div class="modal-body">
                    <form id="StrukturFormDetail" method="POST" action="" class="form-horizontal row-border">
                        <div class="row" style="padding: 0 10px 0 10px;">
                            @(Html.DevExtreme().SelectBox()
                                .ID("penggunaandataid")
                                .DataSource(d => d.Mvc()
                                .Controller("PenggunaanData")
                                .Area("Website")
                                .LoadAction("GetPenggunaanData")
                                .Key("value"))
                                .ValueExpr("value")
                                .DisplayExpr("text")
                                .SearchEnabled(true)
                                .Width("100%")
                                )
                        </div>
                    </form>
                </div>
                <!-- Modal footer -->
                <div class="modal-footer">
                    <button type="button" id="btnSavePenggunaanData" class="btn btn-primary" data-bs-dismiss="modal"><i class='fa fa-save'></i> Save</button>
                </div>
            </div>
        </div>
    </div>
    <!-- The Modal  Detail-->
}



<script>
    window.jsPDF = window.jspdf.jsPDF;
    applyPlugin(window.jsPDF);
</script>

<script>
   

    // Chart type selection handler
    function onChartTypeSelectionChanged(e) {
        var selectedType = e.value;
        console.log("Chart type changed to:", selectedType);

        // Update chart title and series name
        var chart = $("#marketDataChart").dxChart("instance");
        if (chart) {
            var chartTitle;
            var seriesName;

            switch (selectedType) {
                case "Volume":
                    chartTitle = "Trading Volume Chart";
                    seriesName = "Trading Volume";
                    break;
                case "Market Cap":
                    chartTitle = "Market Capitalization Chart";
                    seriesName = "Market Capitalization";
                    break;
                default: // "Value"
                    chartTitle = "Market Value Chart";
                    seriesName = "Market Value";
                    break;
            }

            // Update title and series name
            chart.option("title", { text: chartTitle });
            chart.option("series[0].name", seriesName);

            // **FIX: Get current date parameters and refresh chart**
            var periodType = $("#Periodid").dxSelectBox("instance")?.option("value");
            var dayDate = $("#datePickdID").dxDateBox("instance")?.option("value");
            var monthDate = $("#DatepickmID").dxDateBox("instance")?.option("value");
            var startDate = $("#StartDateID").dxDateBox("instance")?.option("value");
            var endDate = $("#EndDateID").dxDateBox("instance")?.option("value");

            var chartSingleDate = null;
            var chartStartDate = null;
            var chartEndDate = null;

            // Determine current date parameters
            if (periodType === "Daily" && dayDate) {
                chartSingleDate = dateToYYYYMMDD(dayDate).toString();
            } else if (periodType === "Monthly" && monthDate) {
                var firstDayOfMonth = new Date(monthDate.getFullYear(), monthDate.getMonth(), 1);
                var lastDayOfMonth = new Date(monthDate.getFullYear(), monthDate.getMonth() + 1, 0);
                chartStartDate = dateToYYYYMMDD(firstDayOfMonth).toString();
                chartEndDate = dateToYYYYMMDD(lastDayOfMonth).toString();
            } else if (periodType === "Custom Date" && startDate && endDate) {
                chartStartDate = dateToYYYYMMDD(startDate).toString();
                chartEndDate = dateToYYYYMMDD(endDate).toString();
            } else if (dayDate) {
                chartSingleDate = dateToYYYYMMDD(dayDate).toString();
            } else if (startDate && endDate) {
                chartStartDate = dateToYYYYMMDD(startDate).toString();
                chartEndDate = dateToYYYYMMDD(endDate).toString();
            }

            // Refresh chart with current date parameters
            if (chartSingleDate || (chartStartDate && chartEndDate)) {
                refreshChartData(selectedType, chartSingleDate, chartStartDate, chartEndDate);
            } else {
                console.warn("No date parameters available for chart refresh");
            }
        }
    }



    $(document).ready(function () {
        // Hide the confirmation and asing divs initially
        document.getElementById("starttime").style.display = "none";
        document.getElementById("endtime").style.display = "none";
        document.getElementById("datepickday").style.display = "none";
        document.getElementById("datepickmonth").style.display = "none";
        document.getElementById("startdate").style.display = "none";
        document.getElementById("enddate").style.display = "none";
    });


    // Initialize chart on page load
    $(document).ready(function () {
        // **FIX 2: Set default chart type to "Value"**
        setTimeout(function () {
            var chartTypeSelect = $("#ChartType").dxSelectBox("instance");
            if (chartTypeSelect) {
                chartTypeSelect.option("value", "Value");
            }
            console.log("Chart initialized with default type: Value");
        }, 500);
    });
    function onPeriodChanged(e) {
        const selectedValue = e.value;
        const datepickdayDiv = document.getElementById("datepickday");
        const datepickmonthDiv = document.getElementById("datepickmonth");
        const asingDiv = document.getElementById("asingDiv");
        const starttimeDiv = document.getElementById("starttime")
        const endtimeDiv = document.getElementById("endtime")
        const startdateDiv = document.getElementById("startdate")
        const enddateDiv = document.getElementById("enddate")

        if (selectedValue === "Daily") {
            starttimeDiv.style.display = "block";
            endtimeDiv.style.display = "block";
            datepickdayDiv.style.display = "block";
            datepickmonthDiv.style.display = "none";
            startdateDiv.style.display = "none";
            enddateDiv.style.display = "none";

        } else if (selectedValue === "Monthly") {
            datepickmonthDiv.style.display = "block";
            starttimeDiv.style.display = "none";
            endtimeDiv.style.display = "none";
            datepickdayDiv.style.display = "none";
            startdateDiv.style.display = "none";
            enddateDiv.style.display = "none";
        } else {
            starttimeDiv.style.display = "none";
            endtimeDiv.style.display = "none";
            datepickdayDiv.style.display = "none";
            datepickmonthDiv.style.display = "none";
            startdateDiv.style.display = "block";
            enddateDiv.style.display = "block";
        }
    }

    function onButtonFilterClicked(e) {
        console.log("onButtonFilterClicked triggered");

        var periodType = $("#Periodid").dxSelectBox("instance")?.option("value");
        var dayDate = $("#datePickdID").dxDateBox("instance")?.option("value");
        var monthDate = $("#DatepickmID").dxDateBox("instance")?.option("value");
        var startDate = $("#StartDateID").dxDateBox("instance")?.option("value");
        var endDate = $("#EndDateID").dxDateBox("instance")?.option("value");

        // Buy/Sell TagBox returns array
        var buySellValues = $("#Buysellid").dxTagBox("instance")?.option("value") || [];
        // Summarize/Netting SelectBox returns string
        var summarizeNetting = $("#SummarizeNettingid").dxSelectBox("instance")?.option("value") || "";

        console.log("Buy/Sell raw:", buySellValues, "SummarizeNetting raw:", summarizeNetting);

        // Derive transactionCode
        let transactionCode = null;
        if (buySellValues.length === 1) {
            if (buySellValues[0] === "Buy") transactionCode = "B";
            if (buySellValues[0] === "Sell") transactionCode = "S";
        } else if (buySellValues.length > 1) {
            // both selected => no transactionCode filter unless Netting forces override
            transactionCode = null;
        }

        // Netting override
        if (summarizeNetting === "Netting") {
            transactionCode = "B";
            console.log("Netting selected -> forcing transactionCode = B");
        }

        // --- DATE HANDLING (unchanged) ---
        var filterDateInt = null;
        var displayDate = "";
        var chartSingleDate = null;
        var chartStartDate = null;
        var chartEndDate = null;

        if (periodType === "Daily" && dayDate) {
            filterDateInt = dateToYYYYMMDD(dayDate);
            displayDate = formatDateToDDMMYYYY(dayDate);
            chartSingleDate = filterDateInt.toString();
        } else if (periodType === "Monthly" && monthDate) {
            var first = new Date(monthDate.getFullYear(), monthDate.getMonth(), 1);
            var last = new Date(monthDate.getFullYear(), monthDate.getMonth() + 1, 0);
            filterDateInt = dateToYYYYMMDD(first);
            displayDate = formatDateToDDMMYYYY(first) + " - " + formatDateToDDMMYYYY(last);
            chartStartDate = dateToYYYYMMDD(first).toString();
            chartEndDate = dateToYYYYMMDD(last).toString();
        } else if (periodType === "Custom Date" && startDate && endDate) {
            filterDateInt = dateToYYYYMMDD(startDate);
            displayDate = formatDateToDDMMYYYY(startDate) + " - " + formatDateToDDMMYYYY(endDate);
            chartStartDate = dateToYYYYMMDD(startDate).toString();
            chartEndDate = dateToYYYYMMDD(endDate).toString();
        } else if (dayDate) {
            filterDateInt = dateToYYYYMMDD(dayDate);
            displayDate = formatDateToDDMMYYYY(dayDate);
            chartSingleDate = filterDateInt.toString();
        } else if (startDate && endDate) {
            filterDateInt = dateToYYYYMMDD(startDate);
            displayDate = formatDateToDDMMYYYY(startDate) + " - " + formatDateToDDMMYYYY(endDate);
            chartStartDate = dateToYYYYMMDD(startDate).toString();
            chartEndDate = dateToYYYYMMDD(endDate).toString();
        } else {
            alert("Please select period + date(s)");
            return;
        }

        console.log("Final send -> filterDateInt:", filterDateInt,
            "periodType:", periodType,
            "transactionCode:", transactionCode,
            "summarizeNetting:", summarizeNetting);

        $.ajax({
            url: '@Url.Action("SetGridFilterDate", "MarketDriven")',
            type: 'POST',
            data: {
                filterDate: filterDateInt.toString(),
                periodType: periodType,
                transactionCode: transactionCode,
                summarizeNettingOption: summarizeNetting
            },
            dataType: 'json'
        }).done(function (resp) {
            if (resp.success) {
                ["#gridInvestor", "#gridSecurity", "#gridCPInv"].forEach(id => {
                    const inst = $(id).dxDataGrid("instance");
                    if (inst) inst.refresh();
                });
            } else {
                console.warn("SetGridFilterDate failed:", resp.message);
            }
        }).fail(function (xhr, s, err) {
            console.error("SetGridFilterDate AJAX error:", err, xhr.responseText);
        });

        loadSummaryData(filterDateInt.toString(), displayDate);

        var chartType = $("#ChartType").dxSelectBox("instance")?.option("value") || "Value";
        refreshChartData(chartType, chartSingleDate, chartStartDate, chartEndDate);

        showAllComponents();
        $("#marketDataChart").closest(".card").show();
    }

    // New helper function for single date grid filtering
    function setupGridFiltersForSingleDate(filterDateInt, buySell) {
        var filterconditions = ["tradedatesk", "=", filterDateInt];

        var transactionCode = null;
        if (buySell === "Buy") {
            transactionCode = "B";
        } else if (buySell === "Sell") {
            transactionCode = "S";
        }

        if (transactionCode) {
            filterconditions = [filterconditions, "and", ["transactiontypecode", "=", transactionCode]];
        }

        applyGridFilters(filterconditions);
    }

    // New helper function for date range grid filtering
    function setupGridFiltersForDateRange(startDate, endDate, buySell) {
        var startDateInt = dateToYYYYMMDD(startDate);
        var endDateInt = dateToYYYYMMDD(endDate);

        var filterconditions = [
            ["tradedatesk", ">=", startDateInt],
            "and",
            ["tradedatesk", "<=", endDateInt]
        ];

        var transactionCode = null;
        if (buySell === "Buy") {
            transactionCode = "B";
        } else if (buySell === "Sell") {
            transactionCode = "S";
        }

        if (transactionCode) {
            filterconditions = [filterconditions, "and", ["transactiontypecode", "=", transactionCode]];
        }

        applyGridFilters(filterconditions);
    }

    // Helper function to apply filters to all grids
    function applyGridFilters(filterconditions) {
        console.log("Applying grid filters:", filterconditions);

        try {
            var gridInv = $("#gridInvestor").dxDataGrid("instance");
            if (gridInv) {
                gridInv.filter(filterconditions);
                gridInv.refresh();
            }

            var gridSec = $("#gridSecurity").dxDataGrid("instance");
            if (gridSec) {
                gridSec.filter(filterconditions);
                gridSec.refresh();
            }

            var gridCPInv = $("#gridCPInv").dxDataGrid("instance");
            if (gridCPInv) {
                gridCPInv.filter(filterconditions);
                gridCPInv.refresh();
            }
        } catch (error) {
            console.error("Error applying grid filters:", error);
        }
    }

    // Helper function to load summary data for cards
    function loadSummaryData(filterDate, displayDate) {
        console.log("Loading summary data for date:", filterDate);

        $.ajax({
            url: '@Url.Action("GetMarketDrivenSummaryData", "MarketDriven")',
            type: 'GET',
            data: { filterDate: filterDate },
            dataType: 'json'
        }).done(function (response) {
            console.log("Summary data response:", response);

            if (response.success && response.data) {
                // Update the card values with proper formatting
                $("#ihsgValue").text(formatNumber(response.data.closingvalue));
                $("#marketCapValue").text(formatNumber(response.data.marketcapitalizationamount));
                $("#netValueValue").text(formatNumber(response.data.net_value));
                $("#netVolumeValue").text(formatNumber(response.data.net_volume));

                // Update single date info for all cards
                $("#dateInfo").text(displayDate);

                // Show the cards and single date info
                $("#cardGrid1, #cardGrid2, #cardGrid3, #cardGrid4").show();
                $("#cardGridInfo").show();
            } else {
                console.warn("No data found for the selected date:", displayDate);
                // Still show cards with zero values
                $("#ihsgValue, #marketCapValue, #netValueValue, #netVolumeValue").text("0");
                $("#dateInfo").text(displayDate);
                $("#cardGrid1, #cardGrid2, #cardGrid3, #cardGrid4").show();
                $("#cardGridInfo").show();
            }
        }).fail(function (xhr, status, error) {
            console.error("Error loading summary data:", error);
            console.error("Response:", xhr.responseText);
            alert("Error loading summary data: " + error);
        });
    }

    // Updated chart refresh functions
    function refreshChartDataForSingle(chartType, singleDateInt) {
        var singleDateStr = singleDateInt.toString();
        refreshChartData(chartType, singleDateStr, null, null);
    }

    function refreshChartDataForRange(chartType, startDate, endDate) {
        var startDateStr = dateToYYYYMMDD(startDate).toString();
        var endDateStr = dateToYYYYMMDD(endDate).toString();
        refreshChartData(chartType, null, startDateStr, endDateStr);
    }

    // Updated refreshChartData function to handle both modes
    function refreshChartData(chartType, singleDate = null, startDate = null, endDate = null) {
        try {
            console.log("=== CHART REFRESH DEBUG ===");
            console.log("Chart Type:", chartType);
            console.log("Single Date:", singleDate);
            console.log("Start Date:", startDate);
            console.log("End Date:", endDate);

            var params = "?chartType=" + encodeURIComponent(chartType || "Value");

            if (singleDate) {
                params += "&singleDate=" + singleDate;
                console.log("Using single date mode");
            } else if (startDate && endDate) {
                params += "&startDate=" + startDate;
                params += "&endDate=" + endDate;
                console.log("Using date range mode");
            } else {
                console.error("ERROR: No valid date parameters for chart");
                return;
            }

            var baseUrl = '@Url.Action("GetMarketChartData", "MarketDriven")';
            var chartUrl = baseUrl + params;
            console.log("Chart URL:", chartUrl);

            $.ajax({
                url: chartUrl,
                type: 'GET',
                dataType: 'json'
            }).done(function (data) {
                console.log("Chart data received:", data);
                console.log("Data points count:", Array.isArray(data) ? data.length : 'Not an array');

                // Check if data has error
                if (data.error) {
                    console.error("Chart data error:", data.error);
                    return;
                }

                var chart = $("#marketDataChart").dxChart("instance");
                if (chart) {
                    chart.option("dataSource", Array.isArray(data) ? data : []);
                    console.log("Chart updated successfully");
                }
            }).fail(function (xhr, status, error) {
                console.error("Error loading chart data:", error);
                console.error("Response:", xhr.responseText);

                var chart = $("#marketDataChart").dxChart("instance");
                if (chart) {
                    chart.option("dataSource", []);
                }
            });

        } catch (error) {
            console.error("Error refreshing chart data:", error);
        }
    }

    // Helper function to setup grid and chart filters with safety checks
    function setupGridFilters(filterDateInt, transactionCode, startDate, endDate) {
        console.log("Setting up grid filters...");

        // Build filter conditions
        var filterconditionsGrid1d = ["tradedatesk", "=", filterDateInt];

        var filterconditionsGridMd = [];
        if (startDate && endDate) {
            var startDateInt = dateToYYYYMMDD(startDate);
            var endDateInt = dateToYYYYMMDD(endDate);
            filterconditionsGridMd = [
                ["tradedatesk", ">=", startDateInt],
                "and",
                ["tradedatesk", "<=", endDateInt]
            ];
        }

        if (transactionCode) {
            filterconditionsGrid1d.push("and");
            filterconditionsGrid1d.push(["transactiontypecode", "=", transactionCode]);

            if (filterconditionsGridMd.length > 0) {
                filterconditionsGridMd.push("and");
                filterconditionsGridMd.push(["transactiontypecode", "=", transactionCode]);
            }
        }

        console.log("Filter conditions:", { filterconditionsGrid1d, filterconditionsGridMd });

        // Apply filters to grids with safety checks
        try {
            var gridInv = $("#gridInvestor").dxDataGrid("instance");
            if (gridInv) {
                if (filterconditionsGridMd.length > 0 && startDate && endDate) {
                    gridInv.filter(filterconditionsGridMd);
                } else {
                    gridInv.filter(filterconditionsGrid1d);
                }
                gridInv.refresh();
                console.log("Investor grid filtered successfully");
            } else {
                console.warn("Investor grid not found");
            }
        } catch (error) {
            console.error("Error filtering Investor grid:", error);
        }

        try {
            var gridSec = $("#gridSecurity").dxDataGrid("instance");
            if (gridSec) {
                if (filterconditionsGridMd.length > 0 && startDate && endDate) {
                    gridSec.filter(filterconditionsGridMd);
                } else {
                    gridSec.filter(filterconditionsGrid1d);
                }
                gridSec.refresh();
                console.log("Security grid filtered successfully");
            } else {
                console.warn("Security grid not found");
            }
        } catch (error) {
            console.error("Error filtering Security grid:", error);
        }

        try {
            var gridCPInv = $("#gridCPInv").dxDataGrid("instance");
            if (gridCPInv) {
                if (filterconditionsGridMd.length > 0 && startDate && endDate) {
                    gridCPInv.filter(filterconditionsGridMd);
                } else {
                    gridCPInv.filter(filterconditionsGrid1d);
                }
                gridCPInv.refresh();
                console.log("CP Investor grid filtered successfully");
            } else {
                console.warn("CP Investor grid not found");
            }
        } catch (error) {
            console.error("Error filtering CP Investor grid:", error);
        }

        // Handle chart filtering with safety checks
        try {
            var chartView = $("#marketValueChart").dxChart("instance");
            if (chartView && startDate && endDate) {
                var filterconditionsGraph = [
                    ["calendarsk", ">=", dateToYYYYMMDD(startDate)],
                    "and",
                    ["calendarsk", "<=", dateToYYYYMMDD(endDate)]
                ];
                chartView.getDataSource().filter(filterconditionsGraph);
                chartView.getDataSource().load();
                $("#chart1").show();
                console.log("Chart filtered successfully");
            } else if (chartView) {
                $("#chart1").hide();
                console.log("Chart hidden (no date range)");
            } else {
                console.warn("Chart not found");
            }
        } catch (error) {
            console.error("Error filtering chart:", error);
        }
    }

    // Helper function to show all components
    function showAllComponents() {
        console.log("Showing all grid components...");
        $("#gridInv").show();
        $("#gridSec").show();
        $("#gridCPInv").show();
    }

    // Helper function to format numbers with thousand separators
    function formatNumber(value) {
        // Treat null/undefined/empty as 0
        if (value == null || value === '') return '0';

        // Convert to string and split into integer & fractional parts
        const [rawInt = '0', rawFrac = ''] = value.toString().split('.');

        // Insert dots every 3 digits in the integer part
        const intPart = rawInt.replace(/\B(?=(\d{3})+(?!\d))/g, '.');

        // If there’s a fractional part, change the dot to a comma
        const fracPart = rawFrac ? ',' + rawFrac : '';

        // Re‑assemble
        return intPart + fracPart;
    }

    // Helper function to format date to DD-MM-YYYY
    function formatDateToDDMMYYYY(date) {
        if (!date) return "";
        var day = date.getDate().toString().padStart(2, '0');
        var month = (date.getMonth() + 1).toString().padStart(2, '0');
        var year = date.getFullYear();
        return day + "-" + month + "-" + year;
    }

    // Keep your existing dateToYYYYMMDD function
    function dateToYYYYMMDD(date) {
        if (!date) return null;
        var year = date.getFullYear();
        var month = (date.getMonth() + 1).toString().padStart(2, '0');
        var day = date.getDate().toString().padStart(2, '0');
        return parseInt(year + month + day);
    }

    $(function () {
        $("#penggunaandataid").dxValidator({
            validationGroup: "Filter",
            validationRules: [{ type: "required", message: "[Penggunaan Data] harus dipilih" }]
        })
    });

 

    $(window).on('load', function () {
        $("#ModalSimpanPenggunaanData").modal("show");
    });

    $("#btnSavePenggunaanData").click(function () {
        let penggunaandataid = $("#penggunaandataid").dxSelectBox("instance").option("value");
        let penggunaandataText = $("#penggunaandataid").dxSelectBox("instance").option("text");
        let pageTitle = "@reportId";

        if (penggunaandataid == null) {
            alert("Silahkan Pilih Tujuan Penggunaan Data");
            return false;
        } else {
            $.ajax({
                url: '@Url.Action("SimpanPenggunaanData", "MarketDriven")',
                data: {
                    id: penggunaandataid,
                    penggunaanData: penggunaandataText,
                    reportTitle: pageTitle
                },
                dataType: "json",
                type: "POST",
                success: function (data) {
                    if (data.success == true) {
                        $('#ModalSimpanPenggunaanData').modal('hide');
                        return "Saving Success !";
                    }
                    else if (data.success == false) {
                        alert(data.message);
                        $('#ModalSimpanPenggunaanData').modal('hide');
                        return "Saving Failed !";
                    }
                }
            });
        }
    });


    function ExportToPdf() {
        $.ajax({
            type: "POST",
            url: "@Url.Action("LogExportIndex", "MaxMinOverdue")",
            success: function (response) {
                if (response.result == "Success") {
                    const doc = new jsPDF({
                        orientation: "landscape",
                        unit: "cm",
                        format: [21, 60]
                    });
                    var dataGrid = $("#grid1").dxDataGrid("instance");
                    var fileName = "MaxMinOverdue_" + new Date().toISOString().slice(0, 10) + ".pdf";
                    doc.setFontSize("6")
                    //var keys = $("#grid1").dxDataGrid("getSelectedRowsData")
                    //console.log(keys)
                    DevExpress.pdfExporter.exportDataGrid({
                        jsPDFDocument: doc,
                        component: dataGrid,
                        keepColumnWidths: true
                        //selectedRowsOnly: true
                    }).then(function () {
                        doc.save(fileName);
                    });
                }
            }
        });
    }

    

    function onSelectionChanged(e) {
        if (e.addedItems.length > 0) {
            e.component.field().val(""); // Clears the search text. However, search filter is only applied to the widget after focus is lost in the input element
        }
    }



   

    function formatAccountingNumber(value) {
        if (value < 0) {
            return '(' + Globalize.formatNumber(Math.abs(value), {
                minimumFractionDigits: 2,
                maximumFractionDigits: 2,
                useGrouping: true
            }) + ')';
        }
        return Globalize.formatNumber(value, {
            minimumFractionDigits: 2,
            maximumFractionDigits: 2,
            useGrouping: true
        });
    }

    function getCurrentFilterSummary() {
        var periodType = $("#Periodid").dxSelectBox("instance")?.option("value");
        var dayDate = $("#datePickdID").dxDateBox("instance")?.option("value");
        var monthDate = $("#DatepickmID").dxDateBox("instance")?.option("value");
        var startDate = $("#StartDateID").dxDateBox("instance")?.option("value");
        var endDate = $("#EndDateID").dxDateBox("instance")?.option("value");
        var buySellValues = $("#Buysellid").dxTagBox("instance")?.option("value") || [];
        var summarizeNetting = $("#SummarizeNettingid").dxSelectBox("instance")?.option("value");

        return `PeriodType:${periodType}; Day:${dayDate}; Month:${monthDate}; Start:${startDate}; End:${endDate}; BuySell:[${buySellValues.join(",")}]; SummarizeNetting:${summarizeNetting}`;
    }

    function dateToYYYYMMDD(date) {
        var year = date.getFullYear();
        var month = (date.getMonth() + 1).toString().padStart(2, '0');
        var day = date.getDate().toString().padStart(2, '0');
        return parseInt(year + month + day);
    }

     function exportGridToPDF1() {
        const doc = new jsPDF();
        const dataGrid = $("#gridInvestor").dxDataGrid("instance");

        // Gather filter summary (customize this based on your actual filters)
        var filterSummary = getCurrentFilterSummary();

        // Audit trail log
        $.ajax({
            type: "POST",
            url: "@Url.Action("LogExportAuditTrail", "MarketDriven")",
            data: {
                gridName: "gridInvestor",
                exportType: "pdf",
                filterSummary: filterSummary
            }
        });

        // Export DataGrid to PDF
        DevExpress.pdfExporter.exportDataGrid({
            jsPDFDocument: doc,
            component: dataGrid,
            keepColumnWidths: true
        }).then(() => {
            // Save the PDF with a given file name
            doc.save('Grid Investor.pdf');
        });
    }

    function exportGridToExcel2() {
        var dataGrid = $("#gridSecurity").dxDataGrid("instance");
        // Gather filter summary (customize this based on your actual filters)
        var filterSummary = getCurrentFilterSummary();

        // Audit trail log
        $.ajax({
            type: "POST",
            url: "@Url.Action("LogExportAuditTrail", "MarketDriven")",
            data: {
                gridName: "gridSecurity",
                exportType: "excel",
                filterSummary: filterSummary
            }
        });
        if (dataGrid) {
            dataGrid.exportToExcel(false); // 'false' means export all data, not just selected rows
        } else {
            console.error("Security grid not found");
        }
    }

    function exportGridToPDF2() {
        const doc = new jsPDF();

        // Get the DataGrid instance
        const dataGrid = $("#gridSecurity").dxDataGrid("instance");

        // Gather filter summary (customize this based on your actual filters)
        var filterSummary = getCurrentFilterSummary();

        // Audit trail log
        $.ajax({
            type: "POST",
            url: "@Url.Action("LogExportAuditTrail", "MarketDriven")",
            data: {
                gridName: "gridSecurity",
                exportType: "pdf",
                filterSummary: filterSummary
            }
        });

        if (dataGrid) {
            // Export DataGrid to PDF
            DevExpress.pdfExporter.exportDataGrid({
                jsPDFDocument: doc,
                component: dataGrid,
                keepColumnWidths: true
            }).then(() => {
                // Save the PDF with a given file name
                doc.save('SecurityGridData.pdf');
            });
        } else {
            console.error("Security grid not found");
        }
    }

    function exportGridToExcel3() {
        var dataGrid = $("#gridCPInv").dxDataGrid("instance");
        // Gather filter summary (customize this based on your actual filters)
        var filterSummary = getCurrentFilterSummary();

        // Audit trail log
        $.ajax({
            type: "POST",
            url: "@Url.Action("LogExportAuditTrail", "MarketDriven")",
            data: {
                gridName: "gridCPInv",
                exportType: "excel",
                filterSummary: filterSummary
            }
        });

        if (dataGrid) {
            dataGrid.exportToExcel(false); // 'false' means export all data, not just selected rows
        } else {
            console.error("CP Investor grid not found");
        }
    }

    function exportGridToPDF3() {
        const doc = new jsPDF();

        // Get the DataGrid instance
        const dataGrid = $("#gridCPInv").dxDataGrid("instance");

        // Gather filter summary (customize this based on your actual filters)
        var filterSummary = getCurrentFilterSummary();

        // Audit trail log
        $.ajax({
            type: "POST",
            url: "@Url.Action("LogExportAuditTrail", "MarketDriven")",
            data: {
                gridName: "gridCPInv",
                exportType: "pdf",
                filterSummary: filterSummary
            }
        });

        if (dataGrid) {
            // Export DataGrid to PDF
            DevExpress.pdfExporter.exportDataGrid({
                jsPDFDocument: doc,
                component: dataGrid,
                keepColumnWidths: true
            }).then(() => {
                // Save the PDF with a given file name
                doc.save('CPInvestorGridData.pdf');
            });
        } else {
            console.error("CP Investor grid not found");
        }
    }

     function exportGridToExcel1() {
        var dataGrid = $("#gridInvestor").dxDataGrid("instance");
        // Gather filter summary (customize this based on your actual filters)
        var filterSummary = getCurrentFilterSummary();
        // Audit trail log
        $.ajax({
            type: "POST",
            url: "@Url.Action("LogExportAuditTrail", "MarketDriven")",
            data: {
                gridName: "gridInvestor",
                exportType: "excel",
                filterSummary: filterSummary
            }
        });

        if (dataGrid) {
            dataGrid.exportToExcel(false); // 'false' means export all data, not just selected rows
        } else {
            console.error("CP Investor grid not found");
        }
    }

  

    var waitingDialog = (function ($) {

        // Creating modal dialog's DOM
        var $dialog = $(
            '<div class="modal fade" data-backdrop="static" data-keyboard="false" tabindex="-1" role="dialog" aria-hidden="true" style="padding-top:15%; overflow-y:visible;">' +
            '<div class="modal-dialog modal-m">' +
            '<div class="modal-content">' +
            '<div class="modal-header"><h3 style="margin:0;"></h3></div>' +
            '<div class="modal-body">' +
            '<div class="progress progress-striped active" style="margin-bottom:0;"><div class="progress-bar" style="width: 100%"></div></div>' +
            '</div>' +
            '</div></div></div>');

        return {
            show: function (message, options) {
                // Assigning defaults
                var settings = $.extend({
                    dialogSize: 'm',
                    progressType: ''
                }, options);
                if (typeof message === 'undefined') {
                    message = 'Loading';
                }
                if (typeof options === 'undefined') {
                    options = {};
                }
                // Configuring dialog
                $dialog.find('.modal-dialog').attr('class', 'modal-dialog').addClass('modal-' + settings.dialogSize);
                $dialog.find('.progress-bar').attr('class', 'progress-bar');
                if (settings.progressType) {
                    $dialog.find('.progress-bar').addClass('progress-bar-' + settings.progressType);
                }
                $dialog.find('h3').text(message);
                // Opening dialog
                $dialog.modal();
            },
            /**
                * Closes dialog
                */
            hide: function () {
                $dialog.modal('hide');
            }
        }
    })(jQuery);
</script>

<style type="text/css">
    .mandatory {
        color: red;
    }

    .textdashboard {
        text-align: center;
        font-weight: bold;
        padding-top: 50px;
        padding-bottom: 50px;
        padding-left: 10px;
        padding-right: 10px;
        font-size:2rem;
    } 
    .headerTable {
        box-sizing: border-box;
        background-color: #971c1d;
        padding: 10px;
        margin: 0 auto;
        display: block;
        width: 100%;
        color: #fdfdfd;
        text-align: center;
    }

    .grid-header {
        font-size: 16px;
        background-color: #ff0000;
        color: white;
        padding: 8px;
    }

    .grid-cell {
        font-size: 14px;
    }

    .gainer-item {
        border-bottom: 1px solid #dee2e6;
        padding: 0.75rem 1.25rem;
    }

    .gainer-header {
        display: flex;
        /* CHANGED: Aligns header items to the top */
        align-items: flex-start;
        font-weight: bold;
        margin-bottom: 0.5rem;
    }

    .gainer-seq {
        width: 30px;
    }

    .gainer-code {
        width: 70px;
    }

    .gainer-name {
        flex-grow: 1;
    }

    .gainer-volume-label {
        color: #6c757d;
        padding-left: 1rem;
    }

    .gainer-volume-value {
        width: 150px;
        text-align: right;
        color: #28a745;
    }

    /* NEW: Added border and padding for the details section */
    .gainer-details {
        border: 1px solid #e9ecef; /* Light gray border */
        border-radius: 4px; /* Slightly rounded corners */
        padding: 10px; /* Space inside the border */
        margin-top: 10px; /* Space between header and border box */
    }

        .gainer-details table {
            width: 100%;
            font-size: 0.9em;
        }

        .gainer-details td {
            padding: 2px 0;
        }

            .gainer-details td:first-child {
                width: 35%;
                padding-left: 100px;
                color: #6c757d;
            }

            .gainer-details td:last-child {
                text-align: right;
                width: 150px;
                color: #28a745;
                font-weight: bold;
            }
    /* Responsive value styling for cardGrid1 - cardGrid4 */
    #cardGrid1 #ihsgValue,
    #cardGrid2 #marketCapValue,
    #cardGrid3 #netValueValue,
    #cardGrid4 #netVolumeValue {
        font-size: clamp(1.2rem, 5vw, 2.8rem); /* Responsive font size */
        text-align: center;
        font-weight: bold;
        width: 100%;
        display: flex;
        align-items: center;
        justify-content: center;
        word-break: break-word;
        white-space: normal;
        overflow-wrap: break-word;
        padding: 0 10px;
        min-width: 0;
        box-sizing: border-box;
    }
    .negative-value {
        color: #dc3545 !important;
    }
</style>


