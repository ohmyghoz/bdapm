@using DevExtreme.AspNet.Mvc
@{
    Layout = "~/Views/Shared/_LayoutMainMetronic.cshtml";
}

@inject BDA.DataModel.DataEntities db

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="card card-default">
        @*filter*@
        <div class="row filter-panel" style="padding-top:0px;">
            <div class="card-body">
                <h1>Assessment Pasar Equity</h1>
                <div class="row">
                    <div class="col-lg-3 form-group">
                        <label>Jenis Periode@*<span class="mandatory">*</span>*@</label>
                        @(Html.DevExtreme().SelectBox()
                            .ID("Periodid")
                            .DataSource(new[] { "Daily", "Monthly", "Custom Date" })
                            .Width("100%")
                            .OnValueChanged("onPeriodChanged"))
                    </div>

                </div>
                <div class="row">
                    <div class="col-lg-3 form-group" id="datepickday">
                        <label>Periode@*<span class="mandatory">*</span>*@</label>
                        @(Html.DevExtreme().DateBox()
                            .ID("datePickdID")
                            .Type(DateBoxType.Date)
                            .DisplayFormat("dd/MM/yyyy")
                            .Width("100%"))
                    </div>
                    <div class="col-lg-3 form-group" id="datepickmonth">
                        <label>Periode@*<span class="mandatory">*</span>*@</label>
                        @(Html.DevExtreme().DateBox()
                            .ID("DatepickmID")
                            .Type(DateBoxType.Date)
                            .DisplayFormat("monthAndYear")
                            .CalendarOptions(c => c
                            .MaxZoomLevel(CalendarZoomLevel.Year)
                            .MinZoomLevel(CalendarZoomLevel.Century))
                            .Width("100%"))
                    </div>
                    <div class="col-lg-3 form-group" id="starttime">
                        <label>Start Time@*<span class="mandatory">*</span>*@</label>
                        @(Html.DevExtreme().SelectBox()
                            .ID("StartTime")
                            .DataSource(Enumerable.Range(9, 9).Select(h => new { Value = h.ToString("D2") + ":00", Text = h.ToString("D2") + ":00" }))
                            .ValueExpr("Value")
                            .DisplayExpr("Text")
                            .SearchEnabled(true)
                            .Width("100%"))

                    </div>
                    <div class="col-lg-3 form-group" id="endtime">
                        <label>End Time@*<span class="mandatory">*</span>*@</label>
                        @(Html.DevExtreme().SelectBox()
                            .ID("EndTime")
                            .DataSource(Enumerable.Range(9, 9).Select(h => new { Value = h.ToString("D2") + ":00", Text = h.ToString("D2") + ":00" }))
                            .ValueExpr("Value")
                            .DisplayExpr("Text")
                            .SearchEnabled(true)
                            .Width("100%"))

                    </div>
                    <div class="col-lg-3 form-group" id="startdate">
                        <label>Start Date@*<span class="mandatory">*</span>*@</label>
                        @(Html.DevExtreme().DateBox()
                            .ID("StartDateID")
                            .Type(DateBoxType.Date)
                            .DisplayFormat("dd/MM/yyyy")
                            .Width("100%"))
                    </div>
                    <div class="col-lg-3 form-group" id="enddate">
                        <label>End Date@*<span class="mandatory">*</span>*@</label>
                        @(Html.DevExtreme().DateBox()
                            .ID("EndDateID")
                            .Type(DateBoxType.Date)
                            .DisplayFormat("dd/MM/yyyy")
                            .Width("100%"))
                    </div>
                    
                    <div class="col-lg-3 form-group">
                        <label>Lokal/Asing@*<span class="mandatory">*</span>*@</label>
                        @(Html.DevExtreme().TagBox()
                            .ID("LokalAsingid")
                            .DataSource(new[] { "Lokal", "Asing" })
                            .ShowSelectionControls(true)
                            .MaxDisplayedTags(3)
                            .SearchEnabled(true)
                            .OnSelectionChanged("onSelectionChanged")
                            .Width("100%"))
                    </div>

                    <div class="col-lg-3 form-group">
                        <label>Buy/Sell@*<span class="mandatory">*</span>*@</label>
                        @(Html.DevExtreme().TagBox()
                            .ID("Buysellid")
                            .DataSource(new[] { "Buy", "Sell" })
                            .ShowSelectionControls(true)
                            .MaxDisplayedTags(3)
                            .SearchEnabled(true)
                            .OnSelectionChanged("onSelectionChanged")
                            .Width("100%"))
                    </div>

                    <div class="col-lg-3 form-group">
                        <label>Board@*<span class="mandatory">*</span>*@</label>
                        @(Html.DevExtreme().TagBox()
                            .ID("Boardid")
                            .DataSource(new[] { "Tahap I", "Tahap II - Hybrid", "Tahap II - Full Call" })
                            .ShowSelectionControls(true)
                            .MaxDisplayedTags(3)
                            .SearchEnabled(true)
                            .OnSelectionChanged("onSelectionChanged")
                            .Width("100%"))
                    </div>

                    <div class="col-lg-3 form-group">
                        <label>Domestik/Foreign@*<span class="mandatory">*</span>*@</label>
                        @(Html.DevExtreme().TagBox()
                            .ID("DomestikForeignid")
                            .DataSource(new[] { "Domestik", "Foreign" })
                            .ShowSelectionControls(true)
                            .MaxDisplayedTags(3)
                            .SearchEnabled(true)
                            .OnSelectionChanged("onSelectionChanged")
                            .Width("100%"))
                    </div>
                   
                    <div class="col-lg-3 form-group">
                        <label>Market@*<span class="mandatory">*</span>*@</label>
                        @(Html.DevExtreme().TagBox()
                            .ID("Marketid")
                            .DataSource(new[] { "Primary", "Secondary" })
                            .ShowSelectionControls(true)
                            .MaxDisplayedTags(3)
                            .SearchEnabled(true)
                            .OnSelectionChanged("onSelectionChanged")
                            .Width("100%"))
                    </div>
                    
                    <div class="col-lg-3 form-group">
                        <label>Value/Volume/Market@*<span class="mandatory">*</span>*@</label>
                        @(Html.DevExtreme().TagBox()
                            .ID("VVMid")
                            .DataSource(new[] { "Value", "Volume","Market" })
                            .ShowSelectionControls(true)
                            .MaxDisplayedTags(3)
                            .SearchEnabled(true)
                            .OnSelectionChanged("onSelectionChanged")
                            .Width("100%"))
                    </div>

                    <div class="col-lg-3 form-group">
                        <label>Swap APE@*<span class="mandatory">*</span>*@</label>
                        @(Html.DevExtreme().TagBox()
                            .ID("SwapAPEid")
                            .DataSource(new[] { "Value", "Volume", "Market" })
                            .ShowSelectionControls(true)
                            .MaxDisplayedTags(3)
                            .SearchEnabled(true)
                            .OnSelectionChanged("onSelectionChanged")
                            .Width("100%"))
                    </div>
                    <div class="col-lg-3 form-group">
                        <label>Summarize/Netting@*<span class="mandatory">*</span>*@</label>
                        @(Html.DevExtreme().TagBox()
                            .ID("SummarizeNettingid")
                            .DataSource(new[] { "Summarize", "Netting" })
                            .ShowSelectionControls(true)
                            .MaxDisplayedTags(3)
                            .SearchEnabled(true)
                            .OnSelectionChanged("onSelectionChanged")
                            .Width("100%"))
                    </div>
                    <div class="col-lg-3 form-group" id="topDiv">
                        <label>Top@*<span class="mandatory">*</span>*@</label>
                        @(Html.DevExtreme().SelectBox()
                            .ID("ItemsPerPageSelectBox")
                            .DataSource(new[] { "10", "25", "50", "100", "150", "200", "All" })
                            .ValueExpr("this")
                            .DisplayExpr("this")
                            .SearchEnabled(true)
                            .Width("100%"))
                    </div>

                </div>
                <div class="float-left">
                    @(Html.DevExtreme().Button()
                        .ID("filterButton")
                        .Type(ButtonType.Default)
                        .Text("Tampilkan")
                        .OnClick("onButtonFilterClicked")
                        .ValidationGroup("Filter"))
                </div>

                @*                 <div class="float-right">
            @if (ViewBag.Export)
            {
            <a class="btn btn-light-primary font-weight-bolder btn-sm mr-2" href="javascript:ExportToExcel();"><span class="image fa fa-file-excel"></span> Export Excel</a>
            <a class="btn btn-light-primary font-weight-bolder btn-sm mr-2" href="javascript:ExportToPdf2();"><span class="image fa fa-file-pdf"></span> Export PDF</a>
            }
            </div> *@
            </div>
        </div>
 
        <div class="row filter-panel" style="padding-top:0px;">
            <div class="card-body">
                <div class="row">
                    <div class="col-lg-3 form-group" style="padding-right:10px;padding-left:10px;border: 1px solid black">
                        <div class="row">
                            <h4 class="headerTable">IHSG</h4>
                        </div>
                        <div class="row" id="cardGrid1" style="padding-top:50px; padding-bottom:50px; padding-right:5px; padding-left:5px; display: none">
                            @(
                                    Html.DevExtreme().DataGrid()
                                    .ID("gridCard1")
                                    .DataSource(d => d.StaticJson()
                                    .Url("/tempData/md_summary.json")
                                    )
                                    .Columns(columns =>
                                    {
                                        columns.Add().DataField("calendarsk").Visible(false);
                                        columns.Add().DataField("closingvalue").Format(f => f.Type(Format.FixedPoint)
                                    .Precision(0)
                                    )
                                      
                                        .CellTemplate(@<text>
                                        <div style="font-size: 28px; text-align: center; font-weight:bold">
                                            <%- value ? value.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ".").replace(/[.](?=[^.]*$)/, ",") : '0' %>
                                        </div>
                                    </text>);

                                    })
                                .WordWrapEnabled(true)
                                .AllowColumnResizing(true)
                                .ShowBorders(false)
                                .ShowColumnHeaders(false)
                                .Paging(p => p.PageSize(1))  // Set page size to 1
                                .Pager(p => p.Visible(false))  // Hide the pager
                                )
                        </div>
                    </div>
                    <div class="col-lg-3 form-group" style="padding-right:10px;padding-left:10px;border: 1px solid black">
                        <div class="row">
                            <h4 class="headerTable">Market Cap</h4>
                        </div>
                        <div class="row" id="cardGrid2" style="padding-top:50px; padding-bottom:50px; padding-right:5px; padding-left:5px; display: none">
                            @(
                                    Html.DevExtreme().DataGrid()
                                    .ID("gridCard2")
                                    .DataSource(d => d.StaticJson()
                                    .Url("/tempData/md_summary.json")
                                    )
                                    .Columns(columns =>
                                    {
                                        columns.Add().DataField("calendarsk").Visible(false);
                                        columns.Add().DataField("marketcapitalizationamount")
                                    .CellTemplate(@<text>
                                        <div style="font-size: 28px; text-align: center; font-weight:bold">
                                <%- value ? value.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ".").replace(/[.](?=[^.]*$)/, ",") : '0' %>
                                        </div>
                                    </text>);

                                    })
                                 .WordWrapEnabled(true)
                                .ShowBorders(false)
                                .ShowColumnHeaders(false)
                                .Paging(p => p.PageSize(1))  // Set page size to 1
                                .Pager(p => p.Visible(false))  // Hide the pager
                                )
                        </div>
                    </div>
                    <div class="col-lg-3 form-group" style="padding-right:10px;padding-left:10px;border: 1px solid black">
                        <div class="row">
                            <h4 class="headerTable">Net Buy Value</h4>
                        </div>
                        <div class="row" id="cardGrid3" style="padding-top:50px; padding-bottom:50px; padding-right:5px; padding-left:5px; display: none">
                            @(
                                    Html.DevExtreme().DataGrid()
                                    .ID("gridCard3")
                                    .DataSource(d => d.StaticJson()
                                    .Url("/tempData/md_summary.json")
                                    )
                                    .Columns(columns =>
                                    {
                                        columns.Add().DataField("calendarsk").Visible(false);
                                        columns.Add().DataField("net_value")
                                    .CellTemplate(@<text>
                            <div style="font-size: 28px; text-align: center; font-weight:bold">
                                <%- value ? value.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ".").replace(/[.](?=[^.]*$)/, ",") : '0' %>
                            </div>
                        </text>);

                                    })
                                .WordWrapEnabled(true)
                                .ShowBorders(false)
                                .ShowColumnHeaders(false)
                                .Paging(p => p.PageSize(1))  // Set page size to 1
                                .Pager(p => p.Visible(false))  // Hide the pager
                                )
                        </div>
                    </div>
                    <div class="col-lg-3 form-group" style="padding-right:10px;padding-left:10px;border: 1px solid black">
                        <div class="row">
                            <h4 class="headerTable">Net Buy Volume</h4>
                        </div>
                        <div class="row" id="cardGrid4" style="padding-top:50px; padding-bottom:50px; padding-right:5px; padding-left:5px; display: none">
                            @(
                                    Html.DevExtreme().DataGrid()
                                    .ID("gridCard4")
                                    .DataSource(d => d.StaticJson()
                                    .Url("/tempData/md_summary.json")
                                    )
                                    .Columns(columns =>
                                    {
                                        columns.Add().DataField("calendarsk").Visible(false);
                                        columns.Add().DataField("net_volume")
                                    .CellTemplate(@<text>
                            <div style="font-size: 28px; text-align: center; font-weight:bold">
                                <%- value ? value.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ".").replace(/[.](?=[^.]*$)/, ",") : '0' %>
                            </div>
                        </text>);

                                    })
                                .WordWrapEnabled(true)
                                .ShowBorders(false)
                                .ShowColumnHeaders(false)
                                .Paging(p => p.PageSize(1))  // Set page size to 1
                                .Pager(p => p.Visible(false))  // Hide the pager
                                )
                        </div>
                    </div>
                </div>
            </div>
            </div>

            <div style="padding-top:0px;">
        <div class="card-body">
                <div class="row">
                    <h4 class="headerTable">Market Value</h4>
                </div>
                <div id="chart1" style="display:none;">
                    @(Html.DevExtreme().Chart()
                        .ID("marketValueChart")
                        .Palette(VizPalette.Material)
                        .CommonSeriesSettings(s => s
                        .ArgumentField("date")
                        .Type(SeriesType.Spline)
                        )
                        .CommonAxisSettings(s => s
                        .Grid(g => g.Visible(true))
                        )
                        .Margin(m => m.Left(20))
                        .Series(s =>
                        {
                                s.Add().ValueField("closingvalue").Name("Market Value");

                        })
                        .Tooltip(t => t.Enabled(true))
                        .Legend(l => l
                        .VerticalAlignment(VerticalEdge.Top)
                        .HorizontalAlignment(HorizontalAlignment.Right)
                        )
                        
                        
                        .Export(e => e.Enabled(true))
                        .DataSource(d => d.StaticJson()
                                    .Url("/tempData/md_summary_graph.json")
                                    .Key("date")

                                    )
                        )
                </div>
            </div>
        </div>
    </div>
    @*grid*@
    <div class="row filter-panel" style="padding-top:0px;">
        <div class="card-body">
            <div class="row">
                <div class="col-lg-6 form-group" style="padding-right:25px;padding-left:25px">
                    <div class="row" style="padding-bottom:12.5px">
                            <a class="btn btn-dark font-weight-bolder btn-sm mr-2" href="javascript:exportGridToExcel1();" title="Export Excel"><span class="image fa fa-file-excel"></span> Export Excel</a>
                        <a class="btn btn-success font-weight-bolder btn-sm mr-2" href="javascript:exportGridToPDF1();" title="Export PDF"><span class="image fa fa-file-pdf"></span> Export PDF</a>
                    </div>
                    <div class="row">
                        <h4 class="headerTable">Investor Code</h4>
                    </div>
                    <div class="row">
                        <div id="gridInv" style="display: none;">
                            @(Html.DevExtreme().DataGrid()
                                .ID("gridInvestor")
                                .DataSource(d => d.StaticJson().Url("/tempData/md_validasi.json")
                                )
                                .KeyExpr("rowid")
                                .RemoteOperations(true)
                                .Width("100%")
                                .AllowColumnResizing(true)
                                .Columns(columns =>
                                {
                                    columns.Add().DataField("rowid").Visible(false); 
                                    columns.Add().DataField("investorcode").Caption("Investor Code");
                                    columns.Add().DataField("cpinvestorcode").Caption("Trade ID");
                                    columns.Add().DataField("value").Caption("Value").Alignment(HorizontalAlignment.Right).DataType(GridColumnDataType.Number).Format(",##0");
                                    columns.Add().DataField("quantity").Caption("Volume").Alignment(HorizontalAlignment.Right).DataType(GridColumnDataType.Number).Format(",##0");

                                })
                                .FilterRow(f => f.Visible(false))
                                .ShowBorders(true)
                                .Scrolling(s => s.ShowScrollbar(ShowScrollbarMode.Always))
                                .Paging(p =>
                                {
                                    p.PageSize(15);
                                    p.Enabled(true);
                                })
                                .Pager(p =>
                                {
                                    p.ShowInfo(true);
                                }))
                                </div>
                    </div>
                </div>
                <div class="col-lg-6 form-group" style="padding-right:25px;padding-left:25px">
                    <div class="row" style="padding-bottom:12.5px">
                        <a class="btn btn-dark font-weight-bolder btn-sm mr-2" href="javascript:exportGridToExcel2();" title="Export Excel"><span class="image fa fa-file-excel"></span> Export Excel</a>
                        <a class="btn btn-success font-weight-bolder btn-sm mr-2" href="javascript:exportGridToPDF2();" title="Export PDF"><span class="image fa fa-file-pdf"></span> Export PDF</a>
                    </div>
                    <div class="row">
                        <h4 class="headerTable">Security Code </h4>
                    </div>
                    <div class="row">
                        <div id="gridSec" style="display: none;">
                            @(Html.DevExtreme().DataGrid()
                                .ID("gridSecurity")
                                .DataSource(d => d.StaticJson().Url("/tempData/md_validasi.json")
                                )
                                .KeyExpr("rowid")
                                .RemoteOperations(true)
                                .Width("100%")
                                .AllowColumnResizing(true)
                                .Columns(columns =>
                                {
                                    columns.Add().DataField("rowid").Visible(false); 
                                    columns.Add().DataField("securitycode").Caption("Security Code");  
                                    columns.Add().DataField("value").Caption("Value").Alignment(HorizontalAlignment.Right).DataType(GridColumnDataType.Number).Format(",##0");
                                    columns.Add().DataField("quantity").Caption("Volume").Alignment(HorizontalAlignment.Right).DataType(GridColumnDataType.Number).Format(",##0");
                                    columns.Add().DataField("quantity").Caption("Frequency").Alignment(HorizontalAlignment.Right).DataType(GridColumnDataType.Number).Format(",##0");

                                })
                                .FilterRow(f => f.Visible(false))
                                .ShowBorders(true)
                                .Scrolling(s => s.ShowScrollbar(ShowScrollbarMode.Always))
                                .Paging(p =>
                                {
                                    p.PageSize(15);
                                    p.Enabled(true);
                                })
                                .Pager(p =>
                                {
                                    p.ShowInfo(true);
                                }))
                                </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6 form-group" style="padding-right:25px;padding-left:25px">
                    <div class="row" style="padding-bottom:12.5px">
                        <a class="btn btn-dark font-weight-bolder btn-sm mr-2" href="javascript:exportGridToExcel3();" title="Export Excel"><span class="image fa fa-file-excel"></span> Export Excel</a>
                        <a class="btn btn-success font-weight-bolder btn-sm mr-2" href="javascript:exportGridToPDF3();" title="Export PDF"><span class="image fa fa-file-pdf"></span> Export PDF</a>
                    </div>
                    <div class="row">
                        <h4 class="headerTable">CP Investor Code</h4>
                    </div>
                    <div class="row">
                        <div id="gridCPInv" style="display: none;">
                            @(Html.DevExtreme().DataGrid()
                                .ID("gridCPInv")
                                .DataSource(d => d.StaticJson().Url("/tempData/md_validasi.json")
                                )
                                .KeyExpr("rowid")
                                .RemoteOperations(true)
                                .Width("100%")
                                .AllowColumnResizing(true)
                                .Columns(columns =>
                                {
                                    columns.Add().DataField("rowid").Visible(false); 
                                    columns.Add().DataField("cpinvestorcode").Caption("CP Investor Code");
                                    columns.Add().DataField("cpinvestorcode").Caption("CP Trade ID");
                                    columns.Add().DataField("value").Caption("Value").Alignment(HorizontalAlignment.Right).DataType(GridColumnDataType.Number).Format(",##0");
                                    columns.Add().DataField("quantity").Caption("Volume").Alignment(HorizontalAlignment.Right).DataType(GridColumnDataType.Number).Format(",##0");

                                })
                                .FilterRow(f => f.Visible(false))
                                .ShowBorders(true)
                                .Scrolling(s => s.ShowScrollbar(ShowScrollbarMode.Always))
                                .Paging(p =>
                                {
                                    p.PageSize(15);
                                    p.Enabled(true);
                                })
                                .Pager(p =>
                                {
                                    p.ShowInfo(true);
                                }))
                                </div>
                    </div>
                </div>
                <!-- disimpan  <div class="col-lg-6 form-group" style="padding-right:25px;padding-left:25px">
                    <div class="row" style="padding-bottom:12.5px">
                        <a class="btn btn-dark font-weight-bolder btn-sm mr-2" href="javascript:ExportToExcel();" title="Export Excel"><span class="image fa fa-file-excel"></span> Export Excel</a>
                        <a class="btn btn-success font-weight-bolder btn-sm mr-2" href="javascript:ExportToPdf2();" title="Export PDF"><span class="image fa fa-file-pdf"></span> Export PDF</a>
                    </div>
                    <div class="row">
                        <h4 class="headerTable">Transaction</h4>
                    </div>
                    <div class="row">
                    </div>
                </div> -->
            </div>
        </div>
    </div>
       


    <!-- The Modal  Detail-->
    <div class="modal fade" id="ModalSimpanPenggunaanData" tabindex="-1" role="document" aria-hidden="true" data-backdrop="static" data-keyboard="false">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header" style="background-color:#0066b2">
                    <h4 class="modal-title" style="text-align:left">
                        <font color="white">Pilih Penggunaan Data</font>
                    </h4>
                </div><!--Modal Header-->
                <!-- Modal body -->
                <div class="modal-body">
                    <form id="StrukturFormDetail" method="POST" action="" class="form-horizontal row-border">
                        <div class="row" style="padding: 0 10px 0 10px;">
                            @(Html.DevExtreme().SelectBox()
                                .ID("penggunaandataid")
                                .DataSource(d => d.Mvc()
                                .Controller("PenggunaanData")
                                .Area("Website")
                                .LoadAction("GetPenggunaanData")
                                .Key("value"))
                                .ValueExpr("value")
                                .DisplayExpr("text")
                                .SearchEnabled(true)
                                .Width("100%")
                                )
                        </div>
                    </form>
                </div>
                <!-- Modal footer -->
                <div class="modal-footer">
                    <button type="button" id="btnSavePenggunaanData" class="btn btn-primary" data-bs-dismiss="modal"><i class='fa fa-save'></i> Save</button>
                </div>
            </div>
        </div>
    </div>
    <!-- The Modal  Detail-->
}



<script>
    window.jsPDF = window.jspdf.jsPDF;
    applyPlugin(window.jsPDF);
</script>

<script>
    function onPeriodChanged(e) {
        const selectedValue = e.value;
        const datepickdayDiv = document.getElementById("datepickday");
        const datepickmonthDiv = document.getElementById("datepickmonth");
        const asingDiv = document.getElementById("asingDiv");
        const starttimeDiv = document.getElementById("starttime")
        const endtimeDiv = document.getElementById("endtime")
        const startdateDiv = document.getElementById("startdate")
        const enddateDiv = document.getElementById("enddate")

        if (selectedValue === "Daily") {
            starttimeDiv.style.display = "block";
            endtimeDiv.style.display = "block";
            datepickdayDiv.style.display = "block";
            datepickmonthDiv.style.display = "none";
            startdateDiv.style.display = "none";
            enddateDiv.style.display = "none";

        } else if (selectedValue === "Monthly") {
            datepickmonthDiv.style.display = "block";
            starttimeDiv.style.display = "none";
            endtimeDiv.style.display = "none";
            datepickdayDiv.style.display = "none";
            startdateDiv.style.display = "none";
            enddateDiv.style.display = "none";
        } else {
            starttimeDiv.style.display = "none";
            endtimeDiv.style.display = "none";
            datepickdayDiv.style.display = "none";
            datepickmonthDiv.style.display = "none";
            startdateDiv.style.display = "block";
            enddateDiv.style.display = "block";
        }
    }

    $(document).ready(function () {
        // Hide the confirmation and asing divs initially
        document.getElementById("starttime").style.display = "none";
        document.getElementById("endtime").style.display = "none";
        document.getElementById("datepickday").style.display = "none";
        document.getElementById("datepickmonth").style.display = "none";
        document.getElementById("startdate").style.display = "none";
        document.getElementById("enddate").style.display = "none";
    });

    $(function () {
        const startDate = $("#PeriodeAwal").dxDateBox({
            onValueChanged: function (e) {
                endDate.option("min", e.value);
            }
        }).dxDateBox("instance");

        $("#PeriodeAwal").dxValidator({
            validationGroup: "Filter",
            validationRules: [{ type: "required", message: "[Tanggal] harus dipilih" }]
        })
    });

    $(function () {
        $("#penggunaandataid").dxValidator({
            validationGroup: "Filter",
            validationRules: [{ type: "required", message: "[Penggunaan Data] harus dipilih" }]
        })
    });

    $(function () {
        $("#namaPEid").dxValidator({
            validationGroup: "Filter",
            validationRules: [{ type: "required", message: "[Nama PE] harus dipilih" }]
        })
    });

    $(window).on('load', function () {
        $("#ModalSimpanPenggunaanData").modal("show");
    });

    $("#btnSavePenggunaanData").click(function () {
        let penggunaandataid = $("#penggunaandataid").dxSelectBox("instance").option("value");

        if (penggunaandataid == null) {
            alert("Silahkan Pilih Tujuan Penggunaan Data");
            return false;
        } else {
            $.ajax({
                url: '@Url.Action("SimpanPenggunaanData", "SegmentationSummaryClusterMKBD")',
                data: { id: penggunaandataid },
                dataType: "json",
                type: "POST",
                success: function (data) {
                    if (data.success == true) {
                        //alert(data.message);
    @* waitingDialog.hide(); *@
                            $('#ModalSimpanPenggunaanData').modal('hide');
                        return "Saving Success !";
                    }
                    else if (data.success == false) {
    @*  waitingDialog.hide(); *@
                            alert(data.message);
                        $('#ModalSimpanPenggunaanData').modal('hide');
                        return "Saving Failed !";
                    }
                }
            });
        }
    });

    function ExportToPdf() {
        $.ajax({
            type: "POST",
            url: "@Url.Action("LogExportIndex", "MaxMinOverdue")",
            success: function (response) {
                if (response.result == "Success") {
                    const doc = new jsPDF({
                        orientation: "landscape",
                        unit: "cm",
                        format: [21, 60]
                    });
                    var dataGrid = $("#grid1").dxDataGrid("instance");
                    var fileName = "MaxMinOverdue_" + new Date().toISOString().slice(0, 10) + ".pdf";
                    doc.setFontSize("6")
                    //var keys = $("#grid1").dxDataGrid("getSelectedRowsData")
                    //console.log(keys)
                    DevExpress.pdfExporter.exportDataGrid({
                        jsPDFDocument: doc,
                        component: dataGrid,
                        keepColumnWidths: true
                        //selectedRowsOnly: true
                    }).then(function () {
                        doc.save(fileName);
                    });
                }
            }
        });
    }

    function ExportToPdf2() {
        var dataGrid = $("#grid1").dxDataGrid("instance");
        dataGrid.option("onExporting", function (e) { });
        dataGrid.option("onFileSaving", function (e) {
            var fd = new FormData();
            fd.append("file", e.data);
            $.ajax({
                type: "POST",
                url: "@Url.Action("ExportPDF", "SegmentationSummaryClusterMKBD")",
                data: fd,
                processData: false,
                contentType: false
            }).done(function (data) {
                window.location = "@Url.Action("File", "SegmentationSummaryClusterMKBD")"
            });
            e.cancel = true;
        });

        dataGrid.exportToExcel();
    }

    function onSelectionChanged(e) {
        if (e.addedItems.length > 0) {
            e.component.field().val(""); // Clears the search text. However, search filter is only applied to the widget after focus is lost in the input element
        }
    }

    function onButtonFilterClicked(e) {
        const res = e.validationGroup.validate();
        if (res.status === "valid") {
            $("#grid1").dxDataGrid("instance").refresh();
        }
    }

    function onGridBeforeSend(method, ajaxOptions) {
        let namaPE = $("#namaPEid").dxSelectBox("instance").option("value");
        let tempPeriodeAwal = $("#PeriodeAwal").dxDateBox("instance").option("value");
        let status = $("#Statusid").dxTagBox("instance").option("value");

        let periodeAwal = null;
        if (tempPeriodeAwal != null) {
            periodeAwal = tempPeriodeAwal.getFullYear() + '-' + (tempPeriodeAwal.getMonth() + 1) + '-' + tempPeriodeAwal.getDate();
        }
        ajaxOptions.data.namaPE = JSON.stringify(namaPE);
        ajaxOptions.data.periodeAwal = periodeAwal;
        ajaxOptions.data.status = JSON.stringify(status);
    }

    function onLJKOpened(e) {
        e.component.content().find('.dx-list-select-all').hide();
    }

    function Detail(e) {
        var keys = e.row.key;
        if (typeof (keys) !== "undefined" && typeof (keys) !== null) {
            window.open('@Url.Action("Detail", "SegmentationSummaryClusterMKBD")?id=' + keys.toString());
        }
    }

    function formatAccountingNumber(value) {
        if (value < 0) {
            return '(' + Globalize.formatNumber(Math.abs(value), {
                minimumFractionDigits: 2,
                maximumFractionDigits: 2,
                useGrouping: true
            }) + ')';
        }
        return Globalize.formatNumber(value, {
            minimumFractionDigits: 2,
            maximumFractionDigits: 2,
            useGrouping: true
        });
    }


    $(document).ready(function () {
        $("#filterButton").dxButton({
            onClick: function (e) {

                // Get filter values
                var dayDate = $("#datePickdID").dxDateBox("instance").option("value");
                var startDate = $("#StartDateID").dxDateBox("instance").option("value");
                var endDate = $("#EndDateID").dxDateBox("instance").option("value");
                var buySell = $("#Buysellid").dxTagBox("instance").option("value");

                console.log(buySell);

                if (buySell == "Buy")
                {
                    var beli = "B";
                }
                else if (buySell == "Sell")
                {
                    var beli = "S";
                }
              
               console.log(beli);

                if (dayDate) {
                var dayDateInt = dateToYYYYMMDD(dayDate);
                }

            if (startDate && endDate) {
                var startDateInt = dateToYYYYMMDD(startDate);
                var endDateInt = dateToYYYYMMDD(endDate);
                }
              
                console.log(startDateInt);
                console.log(endDateInt);
               
                //filter gridCard
                var filterconditionsCard = 
                    ["calendarsk", "=", dayDateInt]
                    
                ;

                var filterconditionsGraph =[
                    ["calendarsk", ">=", startDateInt],
                   "and",
                   ["calendarsk", "<=", endDateInt]
                ];

                var filterconditionsGrid1d = 
                 ["tradedatesk", "=", dayDateInt]

                ;

                var filterconditionsGridMd =[
                    ["tradedatesk", ">=", startDateInt],
                   "and",
                   ["tradedatesk", "<=", endDateInt]
                ];
                
                 if (beli) {
                    filterconditionsGrid1d.push("and");
                    filterconditionsGrid1d.push(["transactiontypecode", "=", beli]);
                    
                }

                $("#cardGrid1").show();
                $("#cardGrid2").show();
                $("#cardGrid3").show();
                $("#cardGrid4").show();
                $("#chart1").show();

                $("#gridInv").show();
                $("#gridSec").show();
                $("#gridCPInv").show();
               
                //filter grid1
               
               
              

                var dataGrid1 = $("#gridCard1").dxDataGrid("instance");
                dataGrid1.filter(filterconditionsCard);

                var dataGrid2 = $("#gridCard2").dxDataGrid("instance");
                dataGrid2.filter(filterconditionsCard);

                var dataGrid3 = $("#gridCard3").dxDataGrid("instance");
                dataGrid3.filter(filterconditionsCard);

                var dataGrid4 = $("#gridCard4").dxDataGrid("instance");
                dataGrid4.filter(filterconditionsCard);
               
                var chartView = $("#marketValueChart").dxChart("instance");
               

                if (startDateInt && endDateInt) {
                        chartView.getDataSource().filter(filterconditionsGraph);
                        chartView.getDataSource().load();
                    } else if (dayDateInt) {
                        $("#chart1").hide();
                    }

              
                

                var gridInv = $("#gridInvestor").dxDataGrid("instance");
                if (startDateInt && endDateInt) {
                    gridInv.filter(filterconditionsGridMd);
                } else if (dayDateInt) {
                    gridInv.filter(filterconditionsGrid1d);
                }

                var gridSec = $("#gridSecurity").dxDataGrid("instance");
                if (startDateInt && endDateInt) {
                    gridSec.filter(filterconditionsGridMd);
                } else if (dayDateInt) {
                    gridSec.filter(filterconditionsGrid1d);
                }

                var gridCPInv = $("#gridCPInv").dxDataGrid("instance");
                if (startDateInt && endDateInt) {
                    gridCPInv.filter(filterconditionsGridMd);
                } else if (dayDateInt) {
                    gridCPInv.filter(filterconditionsGrid1d);
                }

                dataGrid1.refresh();
                dataGrid2.refresh();
                dataGrid3.refresh();
                dataGrid4.refresh();

                chartView.refresh();
                gridInv.refresh();
                gridSec.refresh();
                gridCPInv.refresh();


            }
        });
    });

    function dateToYYYYMMDD(date) {
        var year = date.getFullYear();
        var month = (date.getMonth() + 1).toString().padStart(2, '0');
        var day = date.getDate().toString().padStart(2, '0');
        return parseInt(year + month + day);
    }

     function exportGridToPDF1() {
        const doc = new jsPDF();

        // Get the DataGrid instance
        const dataGrid = $("#gridInvestor").dxDataGrid("instance");

        // Export DataGrid to PDF
        DevExpress.pdfExporter.exportDataGrid({
            jsPDFDocument: doc,
            component: dataGrid,
            keepColumnWidths: true
        }).then(() => {
            // Save the PDF with a given file name
            doc.save('GridData.pdf');
        });
    }

     function exportGridToPDF2() {
        const doc = new jsPDF();

        // Get the DataGrid instance
        const dataGrid = $("#gridSecurity").dxDataGrid("instance");

        // Export DataGrid to PDF
        DevExpress.pdfExporter.exportDataGrid({
            jsPDFDocument: doc,
            component: dataGrid,
            keepColumnWidths: true
        }).then(() => {
            // Save the PDF with a given file name
            doc.save('GridData.pdf');
        });
    }

     function exportGridToPDF3() {
        const doc = new jsPDF();

        // Get the DataGrid instance
        const dataGrid = $("#gridCPInv").dxDataGrid("instance");

        // Export DataGrid to PDF
        DevExpress.pdfExporter.exportDataGrid({
            jsPDFDocument: doc,
            component: dataGrid,
            keepColumnWidths: true
        }).then(() => {
            // Save the PDF with a given file name
            doc.save('GridData.pdf');
        });
    }

     function exportGridToExcel1() {
        var dataGrid = $("#gridInvestor").dxDataGrid("instance");
        dataGrid.exportToExcel(false); // 'false' means export all data, not just selected rows
    }

     function exportGridToExcel1() {
        var dataGrid = $("#gridSecurity").dxDataGrid("instance");
        dataGrid.exportToExcel(false); // 'false' means export all data, not just selected rows
    }

     function exportGridToExcel1() {
        var dataGrid = $("#gridCPInv").dxDataGrid("instance");
        dataGrid.exportToExcel(false); // 'false' means export all data, not just selected rows
    }

    var waitingDialog = (function ($) {

        // Creating modal dialog's DOM
        var $dialog = $(
            '<div class="modal fade" data-backdrop="static" data-keyboard="false" tabindex="-1" role="dialog" aria-hidden="true" style="padding-top:15%; overflow-y:visible;">' +
            '<div class="modal-dialog modal-m">' +
            '<div class="modal-content">' +
            '<div class="modal-header"><h3 style="margin:0;"></h3></div>' +
            '<div class="modal-body">' +
            '<div class="progress progress-striped active" style="margin-bottom:0;"><div class="progress-bar" style="width: 100%"></div></div>' +
            '</div>' +
            '</div></div></div>');

        return {
            show: function (message, options) {
                // Assigning defaults
                var settings = $.extend({
                    dialogSize: 'm',
                    progressType: ''
                }, options);
                if (typeof message === 'undefined') {
                    message = 'Loading';
                }
                if (typeof options === 'undefined') {
                    options = {};
                }
                // Configuring dialog
                $dialog.find('.modal-dialog').attr('class', 'modal-dialog').addClass('modal-' + settings.dialogSize);
                $dialog.find('.progress-bar').attr('class', 'progress-bar');
                if (settings.progressType) {
                    $dialog.find('.progress-bar').addClass('progress-bar-' + settings.progressType);
                }
                $dialog.find('h3').text(message);
                // Opening dialog
                $dialog.modal();
            },
            /**
                * Closes dialog
                */
            hide: function () {
                $dialog.modal('hide');
            }
        }
    })(jQuery);
</script>

<style type="text/css">
    .mandatory {
        color: red;
    }

    .textdashboard {
        text-align: center;
        font-weight: bold;
        padding-top: 50px;
        padding-bottom: 50px;
        padding-left: 10px;
        padding-right: 10px;
        font-size:2rem;
    } 
    .headerTable {
        box-sizing: border-box;
        background-color: #971c1d;
        padding: 10px;
        margin: 0 auto;
        display: block;
        width: 100%;
        color: #fdfdfd;
        text-align: center;
    }

    .grid-header {
        font-size: 16px;
        background-color: #ff0000;
        color: white;
        padding: 8px;
    }

    .grid-cell {
        font-size: 14px;
    }

</style>


