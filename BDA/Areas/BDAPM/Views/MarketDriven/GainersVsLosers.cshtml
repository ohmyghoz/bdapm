@using DevExtreme.AspNet.Mvc
@{
    Layout = "~/Views/Shared/_LayoutMainMetronic.cshtml";
    string reportId = "GainersVSLosers";
    var p = (string[])ViewBag.period;
    var maxItems = db.GetSetting("LimitFilterLJK");
    int sequenceCounter = 1;
}
@inject BDA.DataModel.DataEntities db

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="card card-default">
        @*filter*@
        <div class="row filter-panel" style="padding-top:0px;">
            <div class="card-body">
                <h1>Gainers Vs Losers</h1>
                <div class="row">
                    <div class="col-lg-3 form-group">
                        <label>Jenis Periode@*<span class="mandatory">*</span>*@</label>
                        @(Html.DevExtreme().SelectBox()
                            .ID("Periodid")
                            .DataSource(new[] { "Daily", "Monthly", "Custom Date" })
                            .Width("100%")
                            .OnValueChanged("onPeriodChanged"))
                    </div>

                </div>
                <div class="row">
                    <div class="col-lg-3 form-group" id="datepickday">
                        <label>Periode@*<span class="mandatory">*</span>*@</label>
                        @(Html.DevExtreme().DateBox()
                            .ID("DatepickdID")
                            .Type(DateBoxType.Date)
                            .DisplayFormat("dd/MM/yyyy")
                            .Width("100%"))
                    </div>
                    <div class="col-lg-3 form-group" id="datepickmonth">
                        <label>Periode@*<span class="mandatory">*</span>*@</label>
                        @(Html.DevExtreme().DateBox()
                            .ID("DatepickmID")
                            .Type(DateBoxType.Date)
                            .DisplayFormat("monthAndYear")
                            .CalendarOptions(c => c
                            .MaxZoomLevel(CalendarZoomLevel.Year)
                            .MinZoomLevel(CalendarZoomLevel.Century))
                            .Width("100%"))
                    </div>
                    <div class="col-lg-3 form-group" id="starttime">
                        <label>Start Time@*<span class="mandatory">*</span>*@</label>
                        @(Html.DevExtreme().SelectBox()
                            .ID("StartTime")
                            .DataSource(Enumerable.Range(9, 9).Select(h => new { Value = h.ToString("D2") + ":00", Text = h.ToString("D2") + ":00" }))
                            .ValueExpr("Value")
                            .DisplayExpr("Text")
                            .SearchEnabled(true)
                            .Width("100%"))

                    </div>
                    <div class="col-lg-3 form-group" id="endtime">
                        <label>End Time@*<span class="mandatory">*</span>*@</label>
                        @(Html.DevExtreme().SelectBox()
                            .ID("EndTime")
                            .DataSource(Enumerable.Range(9, 9).Select(h => new { Value = h.ToString("D2") + ":00", Text = h.ToString("D2") + ":00" }))
                            .ValueExpr("Value")
                            .DisplayExpr("Text")
                            .SearchEnabled(true)
                            .Width("100%"))

                    </div>
                    <div class="col-lg-3 form-group" id="startdate">
                        <label>Start Date@*<span class="mandatory">*</span>*@</label>
                        @(Html.DevExtreme().DateBox()
                            .ID("StartDateID")
                            .Type(DateBoxType.Date)
                            .DisplayFormat("dd/MM/yyyy")
                            .Width("100%"))
                    </div>
                    <div class="col-lg-3 form-group" id="enddate">
                        <label>End Date@*<span class="mandatory">*</span>*@</label>
                        @(Html.DevExtreme().DateBox()
                            .ID("EndDateID")
                            .Type(DateBoxType.Date)
                            .DisplayFormat("dd/MM/yyyy")
                            .Width("100%"))
                    </div>
                    <div class="col-lg-3 form-group" id="topDiv">
                        <label>Top@*<span class="mandatory">*</span>*@</label>
                        @(Html.DevExtreme().SelectBox()
                            .ID("ItemsPerPageSelectBox")
                            .DataSource(new[] { "10", "25", "50", "100", "150", "200", "All" })
                            .ValueExpr("this")
                            .DisplayExpr("this")
                            .SearchEnabled(true)
                            .Width("100%"))
                    </div>

                </div>
                <div class="float-left">
                    @(Html.DevExtreme().Button()
                        .ID("Filter")
                        .Type(ButtonType.Default)
                        .Text("Tampilkan")
                        .OnClick("onButtonFilterClicked")
                        .ValidationGroup("Filter"))
                </div>

                @*                 <div class="float-right">
            @if (ViewBag.Export)
            {
            <a class="btn btn-light-primary font-weight-bolder btn-sm mr-2" href="javascript:ExportToExcel();"><span class="image fa fa-file-excel"></span> Export Excel</a>
            <a class="btn btn-light-primary font-weight-bolder btn-sm mr-2" href="javascript:ExportToPdf2();"><span class="image fa fa-file-pdf"></span> Export PDF</a>
            }
            </div> *@
            </div>
        </div>
        <div class="row">
        </div>
        <br />

        <div id="gainerLoserContent"></div>

    </div>


    <!-- The Modal  Detail-->
    <div class="modal fade" id="ModalSimpanPenggunaanData" tabindex="-1" role="document" aria-hidden="true" data-backdrop="static" data-keyboard="false">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header" style="background-color:#0066b2">
                    <h4 class="modal-title" style="text-align:left">
                        <font color="white">Pilih Penggunaan Data</font>
                    </h4>
                </div><!--Modal Header-->
                <!-- Modal body -->
                <div class="modal-body">
                    <form id="StrukturFormDetail" method="POST" action="" class="form-horizontal row-border">
                        <div class="row" style="padding: 0 10px 0 10px;">
                            @(Html.DevExtreme().SelectBox()
                                .ID("penggunaandataid")
                                .DataSource(d => d.Mvc()
                                .Controller("PenggunaanData")
                                .Area("Website")
                                .LoadAction("GetPenggunaanData")
                                .Key("value"))
                                .ValueExpr("value")
                                .DisplayExpr("text")
                                .SearchEnabled(true)
                                .Width("100%")
                                )
                        </div>
                    </form>
                </div>
                <!-- Modal footer -->
                <div class="modal-footer">
                    <button type="button" id="btnSavePenggunaanData" class="btn btn-primary" data-bs-dismiss="modal"><i class='fa fa-save'></i> Save</button>
                </div>
            </div>
        </div>
    </div>
    <!-- The Modal  Detail-->
}




<script>
    window.jsPDF = window.jspdf.jsPDF;
    applyPlugin(window.jsPDF);

    // Define all functions in global scope
    window.onButtonFilterClicked = function () {
        console.log("onButtonFilterClicked triggered!");

        try {
            var periodType = $("#Periodid").dxSelectBox("instance").option("value");
            console.log("Period Type:", periodType);

            var selectedDate = null;
            var endDate = null;

            // For Custom Date, we need both start and end date
            if (periodType === "Custom Date") {
                var startDateValue = $("#StartDateID").dxDateBox("instance").option("value");
                var endDateValue = $("#EndDateID").dxDateBox("instance").option("value");
                selectedDate = window.formatDateYYYYMMDD(startDateValue);
                endDate = window.formatDateYYYYMMDD(endDateValue);
                console.log("Custom period start date:", startDateValue, selectedDate);
                console.log("Custom period end date:", endDateValue, endDate);

                if (!selectedDate || !endDate) {
                    DevExpress.ui.notify("Please select both start and end date.", "warning", 3000);
                    return;
                }
                if (selectedDate > endDate) {
                    DevExpress.ui.notify("Start date cannot be after end date.", "warning", 3000);
                    return;
                }
            } else {
                selectedDate = window.getFormattedDateByPeriod(periodType);
            }

            var topN = $("#ItemsPerPageSelectBox").dxSelectBox("instance").option("value");
            console.log("Top N:", topN);

            // Validate inputs
            if (!periodType) {
                DevExpress.ui.notify("Please select a period type.", "warning", 3000);
                return;
            }

            if (!selectedDate) {
                DevExpress.ui.notify("Please select a valid date.", "warning", 3000);
                return;
            }

            // Convert topN to number, default to 10
            var topCount = topN === "All" ? 500 : (parseInt(topN) || 10);

            // Show loading indicator
            showLoadingIndicator();

            var ajaxData = {
                selectedDate: selectedDate,
                topN: topCount,
                periodType: periodType
            };
            if (periodType === "Custom Date") {
                ajaxData.endDate = endDate;
            }

            $.ajax({
                url: '@Url.Action("_GetGainersAndLosersData", "MarketDriven")',
                type: 'POST',
                data: ajaxData,
                success: function (responseHtml) {
                    console.log("AJAX Success");
                    $('#gainerLoserContent').html(responseHtml);
                    hideLoadingIndicator();
                    DevExpress.ui.notify("Data loaded successfully.", "success", 2000);
                },
                error: function (xhr, status, error) {
                    console.error('AJAX Error:', error);
                    console.error('Status:', status);
                    console.error('Response:', xhr.responseText);

                    hideLoadingIndicator();

                    var errorMessage = 'An error occurred while loading data.';
                    if (xhr.responseText) {
                        try {
                            var errorData = JSON.parse(xhr.responseText);
                            errorMessage = errorData.message || errorMessage;
                        } catch (e) {
                            errorMessage = xhr.responseText.substring(0, 200) + '...';
                        }
                    }

                    $('#gainerLoserContent').html(`
                                <div class="alert alert-danger">
                                    <i class="fa fa-exclamation-triangle"></i> ${errorMessage}
                                    <br><small>Error Code: ${xhr.status}</small>
                                </div>
                            `);

                    DevExpress.ui.notify(errorMessage, "error", 5000);
                }
            });
        } catch (e) {
            console.error("Error in onButtonFilterClicked:", e);
            alert("Error: " + e.message);
        }
    };

    window.getFormattedDateByPeriod = function (periodType) {
        console.log("getFormattedDateByPeriod called with:", periodType);

        var dateValue = null;

        try {
            switch (periodType) {
                case "Daily":
                    dateValue = $("#DatepickdID").dxDateBox("instance").option("value");
                    console.log("Daily date value:", dateValue);
                    return window.formatDateYYYYMMDD(dateValue);

                case "Monthly":
                    dateValue = $("#DatepickmID").dxDateBox("instance").option("value");
                    console.log("Monthly date value:", dateValue);
                    return window.formatDateYYYYMM(dateValue);

                default:
                    // For custom, use separate logic in onButtonFilterClicked
                    console.log("Unknown or Custom period type:", periodType);
                    return null;
            }
        } catch (e) {
            console.error("Error in getFormattedDateByPeriod:", e);
            return null;
        }
    };

    // Utility: Format JS Date to YYYYMMDD
    window.formatDateYYYYMMDD = function (dateValue) {
        if (!dateValue) return null;
        var year = dateValue.getFullYear();
        var month = ('0' + (dateValue.getMonth() + 1)).slice(-2);
        var day = ('0' + dateValue.getDate()).slice(-2);
        return year + month + day;
    };

    // Utility: Format JS Date to YYYYMM
    window.formatDateYYYYMM = function (dateValue) {
        if (!dateValue) return null;
        var year = dateValue.getFullYear();
        var month = ('0' + (dateValue.getMonth() + 1)).slice(-2);
        return year + month;
    };

    window.showLoadingIndicator = function () {
        $('#gainerLoserContent').html(`
                    <div class="text-center p-5">
                        <div class="spinner-border text-primary mb-3" role="status" style="width: 3rem; height: 3rem;">
                            <span class="sr-only">Loading...</span>
                        </div>
                        <h5 class="text-muted">Loading Gainers & Losers Data</h5>
                        <p class="text-muted">Please wait...</p>
                    </div>
                `);
    };

    window.hideLoadingIndicator = function () {
        // Loading indicator will be replaced by the actual content
    };

    window.onPeriodChanged = function (e) {
        console.log("onPeriodChanged called with:", e.value);

        const selectedValue = e.value;
        const datepickdayDiv = document.getElementById("datepickday");
        const datepickmonthDiv = document.getElementById("datepickmonth");
        const starttimeDiv = document.getElementById("starttime")
        const endtimeDiv = document.getElementById("endtime")
        const startdateDiv = document.getElementById("startdate")
        const enddateDiv = document.getElementById("enddate")

        if (selectedValue === "Daily") {
            starttimeDiv.style.display = "block";
            endtimeDiv.style.display = "block";
            datepickdayDiv.style.display = "block";
            datepickmonthDiv.style.display = "none";
            startdateDiv.style.display = "none";
            enddateDiv.style.display = "none";
        } else if (selectedValue === "Monthly") {
            datepickmonthDiv.style.display = "block";
            starttimeDiv.style.display = "none";
            endtimeDiv.style.display = "none";
            datepickdayDiv.style.display = "none";
            startdateDiv.style.display = "none";
            enddateDiv.style.display = "none";
        } else {
            starttimeDiv.style.display = "none";
            endtimeDiv.style.display = "none";
            datepickdayDiv.style.display = "none";
            datepickmonthDiv.style.display = "none";
            startdateDiv.style.display = "block";
            enddateDiv.style.display = "block";
        }
    };

    // Export functions for Gainers and Losers
    window.exportGainersToExcel = function () {
        try {
            console.log("Exporting Gainers to Excel...");

            // Get current filter parameters
            var periodType = $("#Periodid").dxSelectBox("instance").option("value");
            var selectedDate = null;
            var endDate = null;

            if (periodType === "Custom Date") {
                selectedDate = window.formatDateYYYYMMDD($("#StartDateID").dxDateBox("instance").option("value"));
                endDate = window.formatDateYYYYMMDD($("#EndDateID").dxDateBox("instance").option("value"));
            } else {
                selectedDate = window.getFormattedDateByPeriod(periodType);
            }

            var topN = $("#ItemsPerPageSelectBox").dxSelectBox("instance").option("value");
            var topCount = topN === "All" ? 500 : (parseInt(topN) || 10);

            // Build export URL
            var exportUrl = '@Url.Action("ExportGainersToExcel", "MarketDriven")' +
                '?selectedDate=' + encodeURIComponent(selectedDate) +
                '&topN=' + topCount +
                '&periodType=' + encodeURIComponent(periodType);

            if (endDate) {
                exportUrl += '&endDate=' + encodeURIComponent(endDate);
            }

            // Trigger download
            window.open(exportUrl, '_blank');

            DevExpress.ui.notify("Excel export started...", "success", 2000);
        } catch (e) {
            console.error("Error exporting Gainers to Excel:", e);
            DevExpress.ui.notify("Error exporting to Excel: " + e.message, "error", 3000);
        }
    };

    window.exportGainersToPDF = function () {
        try {
            console.log("Exporting Gainers to PDF...");

            // Get current filter parameters
            var periodType = $("#Periodid").dxSelectBox("instance").option("value");
            var selectedDate = null;
            var endDate = null;

            if (periodType === "Custom Date") {
                selectedDate = window.formatDateYYYYMMDD($("#StartDateID").dxDateBox("instance").option("value"));
                endDate = window.formatDateYYYYMMDD($("#EndDateID").dxDateBox("instance").option("value"));
            } else {
                selectedDate = window.getFormattedDateByPeriod(periodType);
            }

            var topN = $("#ItemsPerPageSelectBox").dxSelectBox("instance").option("value");
            var topCount = topN === "All" ? 500 : (parseInt(topN) || 10);

            // Build export URL
            var exportUrl = '@Url.Action("ExportGainersToPDF", "MarketDriven")' +
                '?selectedDate=' + encodeURIComponent(selectedDate) +
                '&topN=' + topCount +
                '&periodType=' + encodeURIComponent(periodType);

            if (endDate) {
                exportUrl += '&endDate=' + encodeURIComponent(endDate);
            }

            // Trigger download
            window.open(exportUrl, '_blank');

            DevExpress.ui.notify("PDF export started...", "success", 2000);
        } catch (e) {
            console.error("Error exporting Gainers to PDF:", e);
            DevExpress.ui.notify("Error exporting to PDF: " + e.message, "error", 3000);
        }
    };

    window.exportLosersToExcel = function () {
        try {
            console.log("Exporting Losers to Excel...");

            // Get current filter parameters
            var periodType = $("#Periodid").dxSelectBox("instance").option("value");
            var selectedDate = null;
            var endDate = null;

            if (periodType === "Custom Date") {
                selectedDate = window.formatDateYYYYMMDD($("#StartDateID").dxDateBox("instance").option("value"));
                endDate = window.formatDateYYYYMMDD($("#EndDateID").dxDateBox("instance").option("value"));
            } else {
                selectedDate = window.getFormattedDateByPeriod(periodType);
            }

            var topN = $("#ItemsPerPageSelectBox").dxSelectBox("instance").option("value");
            var topCount = topN === "All" ? 500 : (parseInt(topN) || 10);

            // Build export URL
            var exportUrl = '@Url.Action("ExportLosersToExcel", "MarketDriven")' +
                '?selectedDate=' + encodeURIComponent(selectedDate) +
                '&topN=' + topCount +
                '&periodType=' + encodeURIComponent(periodType);

            if (endDate) {
                exportUrl += '&endDate=' + encodeURIComponent(endDate);
            }

            // Trigger download
            window.open(exportUrl, '_blank');

            DevExpress.ui.notify("Excel export started...", "success", 2000);
        } catch (e) {
            console.error("Error exporting Losers to Excel:", e);
            DevExpress.ui.notify("Error exporting to Excel: " + e.message, "error", 3000);
        }
    };

    window.exportLosersToPDF = function () {
        try {
            console.log("Exporting Losers to PDF...");

            // Get current filter parameters
            var periodType = $("#Periodid").dxSelectBox("instance").option("value");
            var selectedDate = null;
            var endDate = null;

            if (periodType === "Custom Date") {
                selectedDate = window.formatDateYYYYMMDD($("#StartDateID").dxDateBox("instance").option("value"));
                endDate = window.formatDateYYYYMMDD($("#EndDateID").dxDateBox("instance").option("value"));
            } else {
                selectedDate = window.getFormattedDateByPeriod(periodType);
            }

            var topN = $("#ItemsPerPageSelectBox").dxSelectBox("instance").option("value");
            var topCount = topN === "All" ? 500 : (parseInt(topN) || 10);

            // Build export URL
            var exportUrl = '@Url.Action("ExportLosersToPDF", "MarketDriven")' +
                '?selectedDate=' + encodeURIComponent(selectedDate) +
                '&topN=' + topCount +
                '&periodType=' + encodeURIComponent(periodType);

            if (endDate) {
                exportUrl += '&endDate=' + encodeURIComponent(endDate);
            }

            // Trigger download
            window.open(exportUrl, '_blank');

            DevExpress.ui.notify("PDF export started...", "success", 2000);
        } catch (e) {
            console.error("Error exporting Losers to PDF:", e);
            DevExpress.ui.notify("Error exporting to PDF: " + e.message, "error", 3000);
        }
    };

    // Alternative global function definitions for DevExtreme compatibility
    function onButtonFilterClicked() {
        window.onButtonFilterClicked();
    }

    function getFormattedDateByPeriod(periodType) {
        return window.getFormattedDateByPeriod(periodType);
    }

    function showLoadingIndicator() {
        window.showLoadingIndicator();
    }

    function hideLoadingIndicator() {
        window.hideLoadingIndicator();
    }

    function onPeriodChanged(e) {
        window.onPeriodChanged(e);
    }

    function exportGainersToExcel() {
        window.exportGainersToExcel();
    }

    function exportGainersToPDF() {
        window.exportGainersToPDF();
    }

    function exportLosersToExcel() {
        window.exportLosersToExcel();
    }

    function exportLosersToPDF() {
        window.exportLosersToPDF();
    }

    $(document).ready(function () {
        console.log("Document ready - initializing...");

        try {
            // Hide all date divs initially
            document.getElementById("starttime").style.display = "none";
            document.getElementById("endtime").style.display = "none";
            document.getElementById("datepickday").style.display = "none";
            document.getElementById("datepickmonth").style.display = "none";
            document.getElementById("startdate").style.display = "none";
            document.getElementById("enddate").style.display = "none";

            // Set default values (wait for DevExtreme to initialize)
            setTimeout(function () {
                try {
                    $("#Periodid").dxSelectBox("instance").option("value", "Daily");
                    $("#ItemsPerPageSelectBox").dxSelectBox("instance").option("value", "10");
                    $("#DatepickdID").dxDateBox("instance").option("value", new Date());

                    // Trigger the period change to show the correct date picker
                    onPeriodChanged({ value: "Daily" });

                    console.log("Initialization complete");
                } catch (e) {
                    console.error("Error in delayed initialization:", e);
                }
            }, 500);

        } catch (e) {
            console.error("Error in document ready:", e);
        }
    });

    // Keep all your existing functions below this line
    $(function () {
        const startDate = $("#PeriodeAwal").dxDateBox({
            onValueChanged: function (e) {
                endDate.option("min", e.value);
            }
        }).dxDateBox("instance");

        $("#PeriodeAwal").dxValidator({
            validationGroup: "Filter",
            validationRules: [{ type: "required", message: "[Tanggal] harus dipilih" }]
        })
    });

    $(function () {
        $("#penggunaandataid").dxValidator({
            validationGroup: "Filter",
            validationRules: [{ type: "required", message: "[Penggunaan Data] harus dipilih" }]
        })
    });

    $(function () {
        $("#namaPEid").dxValidator({
            validationGroup: "Filter",
            validationRules: [{ type: "required", message: "[Nama PE] harus dipilih" }]
        })
    });

    $(window).on('load', function () {
        $("#ModalSimpanPenggunaanData").modal("show");
    });

    $("#btnSavePenggunaanData").click(function () {
        let penggunaandataid = $("#penggunaandataid").dxSelectBox("instance").option("value");

        if (penggunaandataid == null) {
            alert("Silahkan Pilih Tujuan Penggunaan Data");
            return false;
        } else {
            $.ajax({
                url: '@Url.Action("SimpanPenggunaanData", "MarketDriven")',
                data: { id: penggunaandataid },
                dataType: "json",
                type: "POST",
                success: function (data) {
                    if (data.success == true) {
                        $('#ModalSimpanPenggunaanData').modal('hide');
                        return "Saving Success !";
                    }
                    else if (data.success == false) {
                        alert(data.message);
                        $('#ModalSimpanPenggunaanData').modal('hide');
                        return "Saving Failed !";
                    }
                }
            });
        }
    });



    function onSelectionChanged(e) {
        if (e.addedItems.length > 0) {
            e.component.field().val("");
        }
    }

    function onLJKOpened(e) {
        e.component.content().find('.dx-list-select-all').hide();
    }

    function Detail(e) {
        var keys = e.row.key;
        if (typeof (keys) !== "undefined" && typeof (keys) !== null) {
            window.open('@Url.Action("Detail", "SegmentationSummaryClusterMKBD")?id=' + keys.toString());
        }
    }

    var waitingDialog = (function ($) {
        var $dialog = $(
            '<div class="modal fade" data-backdrop="static" data-keyboard="false" tabindex="-1" role="dialog" aria-hidden="true" style="padding-top:15%; overflow-y:visible;">' +
            '<div class="modal-dialog modal-m">' +
            '<div class="modal-content">' +
            '<div class="modal-header"><h3 style="margin:0;"></h3></div>' +
            '<div class="modal-body">' +
            '<div class="progress progress-striped active" style="margin-bottom:0;"><div class="progress-bar" style="width: 100%"></div></div>' +
            '</div>' +
            '</div></div></div>');

        return {
            show: function (message, options) {
                var settings = $.extend({
                    dialogSize: 'm',
                    progressType: ''
                }, options);
                if (typeof message === 'undefined') {
                    message = 'Loading';
                }
                if (typeof options === 'undefined') {
                    options = {};
                }
                $dialog.find('.modal-dialog').attr('class', 'modal-dialog').addClass('modal-' + settings.dialogSize);
                $dialog.find('.progress-bar').attr('class', 'progress-bar');
                if (settings.progressType) {
                    $dialog.find('.progress-bar').addClass('progress-bar-' + settings.progressType);
                }
                $dialog.find('h3').text(message);
                $dialog.modal();
            },
            hide: function () {
                $dialog.modal('hide');
            }
        }
    })(jQuery);
</script>

<style type="text/css">
    .gainer-item {
        border-bottom: 1px solid #dee2e6;
        padding: 0.75rem 1.25rem;
    }

    .gainer-header {
        display: flex;
        align-items: center;
        font-weight: bold;
        margin-bottom: 0.5rem;
    }

    .gainer-seq {
        width: 30px;
    }

    .gainer-code {
        width: 70px;
    }

    .gainer-name {
        flex-grow: 1; /* Takes up remaining space */
    }


    .gainer-volume-label {
        color: #6c757d; /* Gray text color */
        padding-left: 1rem;
    }

    .gainer-volume-value {
        width: 150px;
        text-align: right;
        color: #28a745; /* Green color */
    }

    .gainer-details table {
        width: 300px;
        font-size: 0.9em;
    }

    .loser-details table {
        width: 300px;
        font-size: 0.9em;
    }

    .gainer-details td {
        padding: 2px 0;
        width: 200px;
    }

    .loser-details td {
        padding: 2px 0;
        width: 200px;
    }

    .gainer-details td:first-child {
        width: 35%%;
        color: #6c757d;
        text-align: left;
    }

    .gainer-details td:last-child {
        text-align: right;
        width: 150px;
        color: #28a745; /* Green color */
        font-weight: bold;
    }

    .loser-details td:first-child {
        width: 35%;
        color: #6c757d;
    }

    .loser-details td:last-child {
        text-align: right;
        width: 150px;
        color: #dc3545; /* Red color */
        font-weight: bold;
    }

    .export-buttons {
        position: absolute;
        top: 10px;
        right: 15px;
        z-index: 10;
    }

    .export-btn {
        margin-left: 5px;
        padding: 4px 8px;
        font-size: 12px;
        border-radius: 3px;
        text-decoration: none;
        color: white;
        display: inline-block;
    }

    .export-excel {
        background-color: #28a745;
    }

        .export-excel:hover {
            background-color: #218838;
            color: white;
            text-decoration: none;
        }

    .export-pdf {
        background-color: #dc3545;
    }

        .export-pdf:hover {
            background-color: #c82333;
            color: white;
            text-decoration: none;
        }

    .section-container {
        position: relative;
        margin-bottom: 30px;
    }

    .mandatory {
        color: red;
    }
</style>