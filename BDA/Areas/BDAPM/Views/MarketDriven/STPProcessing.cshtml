@using DevExtreme.AspNet.Mvc
@{
    Layout = "~/Views/Shared/_LayoutMainMetronic.cshtml";
}

@inject BDA.DataModel.DataEntities db

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="card card-default">
        @*filter*@
        <div class="row filter-panel" style="padding-top:0px;">
            <div class="card-body">
                <h1>STP Processing</h1>

                <div class="row">
                    <div class="col-lg-3 form-group">
                        <label>Periode Awal<span class="mandatory">*</span></label>
                        @(Html.DevExtreme().DateBox()
                            .ID("periodeAwalID")
                            .Type(DateBoxType.Date)
                            .DisplayFormat("dd/MM/yyyy")
                            .Width("100%"))
                    </div>
                    <div class="col-lg-3 form-group">
                        <label>Periode Akhir<span class="mandatory">*</span></label>
                        @(Html.DevExtreme().DateBox()
                            .ID("periodeAkhirID")
                            .Type(DateBoxType.Date)
                            .DisplayFormat("dd/MM/yyyy")
                            .Width("100%"))
                    </div>
                    <div class="col-lg-3 form-group">
                        <label>SID<span class="mandatory">*</span></label>
                        @(Html.DevExtreme().TextBox()
                            .ID("SID")
                            .Placeholder("Enter SID here...")
                            .InputAttr("aria-label", "SID")
                            .Width("100%"))
                    </div>

                    <div class="col-lg-3 form-group" id="topDiv">
                        <label>Efek</label>
                        @(Html.DevExtreme().TextBox()
                            .ID("EfekID")
                            .Placeholder("Enter Efek here...")
                            .InputAttr("aria-label", "EfekID")
                            .Width("100%"))
                    </div>
                </div>
                <div class="float-left">
                    @(Html.DevExtreme().Button()
                        .ID("filterButton")
                        .Type(ButtonType.Default)
                        .Text("Tampilkan")
                        .OnClick("onButtonFilterClicked")
                        .ValidationGroup("Filter"))
                </div>
            </div>
        </div>

        <br />
        @*grid*@
        <div class="row filter-panel" style="padding-top:0px;">
            <div class="card-body">
                <div class="row">
                    <div class="col-lg-6 form-group" style="padding-right:25px;padding-left:25px">
                        <div class="row" style="padding-bottom:12.5px">
                            <a class="btn btn-dark font-weight-bolder btn-sm mr-2" href="javascript:exportGridToExcel1();" title="Export Excel"><span class="image fa fa-file-excel"></span> Export Excel</a>
                            <a class="btn btn-success font-weight-bolder btn-sm mr-2" href="javascript:exportGridToPDF1();" title="Export PDF"><span class="image fa fa-file-pdf"></span> Export PDF</a>
                        </div>
                        <div class="row">
                            <h4 class="headerTable">Balance</h4>
                        </div>
                        <div class="row">
                            <div id="grid1Container" style="display: none;">
                                <div id="grid1"></div>
                            </div>
                        </div>
                    </div>
                    <!-- Settlement grid placeholder -->
                    <div class="col-lg-6 form-group" style="padding-right:25px;padding-left:25px">
                        <div class="row" style="padding-bottom:12.5px">
                            <a class="btn btn-dark font-weight-bolder btn-sm mr-2" href="javascript:exportGridToExcel2();" title="Export Excel"><span class="image fa fa-file-excel"></span> Export Excel</a>
                            <a class="btn btn-success font-weight-bolder btn-sm mr-2" href="javascript:exportGridToPDF2();" title="Export PDF"><span class="image fa fa-file-pdf"></span> Export PDF</a>
                        </div>
                        <div class="row">
                            <h4 class="headerTable">Settlement</h4>
                        </div>
                        <div class="row">
                            <div id="grid2Container" style="display: none;">
                                <div id="grid2"></div>
                            </div>
                        </div>
                    </div>
                </div>
                <!-- Second row for additional grids -->
                <div class="row">
                    <div class="col-lg-6 form-group" style="padding-right:25px;padding-left:25px">
                        <div class="row" style="padding-bottom:12.5px">
                            <a class="btn btn-dark font-weight-bolder btn-sm mr-2" href="javascript:exportGridToExcel3();" title="Export Excel"><span class="image fa fa-file-excel"></span> Export Excel</a>
                            <a class="btn btn-success font-weight-bolder btn-sm mr-2" href="javascript:exportGridToPDF3();" title="Export PDF"><span class="image fa fa-file-pdf"></span> Export PDF</a>
                        </div>
                        <div class="row">
                            <h4 class="headerTable">Clearing</h4>
                        </div>
                        <div class="row">
                            <div id="grid3Container" style="display: none;">
                                <div id="grid3"></div>
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-6 form-group" style="padding-right:25px;padding-left:25px">
                        <div class="row" style="padding-bottom:12.5px">
                            <a class="btn btn-dark font-weight-bolder btn-sm mr-2" href="javascript:exportGridToExcel4();" title="Export Excel"><span class="image fa fa-file-excel"></span> Export Excel</a>
                            <a class="btn btn-success font-weight-bolder btn-sm mr-2" href="javascript:exportGridToPDF4();" title="Export PDF"><span class="image fa fa-file-pdf"></span> Export PDF</a>
                        </div>
                        <div class="row">
                            <h4 class="headerTable">Transaction</h4>
                        </div>
                        <div class="row">
                            <div id="grid4Container" style="display: none;">
                                <div id="grid4"></div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal remains the same -->
    <div class="modal fade" id="ModalSimpanPenggunaanData" tabindex="-1" role="document" aria-hidden="true" data-backdrop="static" data-keyboard="false">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header" style="background-color:#0066b2">
                    <h4 class="modal-title" style="text-align:left">
                        <font color="white">Pilih Penggunaan Data</font>
                    </h4>
                </div>
                <div class="modal-body">
                    <form id="StrukturFormDetail" method="POST" action="" class="form-horizontal row-border">
                        <div class="row" style="padding: 0 10px 0 10px;">
                            @(Html.DevExtreme().SelectBox()
                                .ID("penggunaandataid")
                                .DataSource(d => d.Mvc()
                                .Controller("PenggunaanData")
                                .Area("Website")
                                .LoadAction("GetPenggunaanData")
                                .Key("value"))
                                .ValueExpr("value")
                                .DisplayExpr("text")
                                .SearchEnabled(true)
                                .Width("100%")
                                )
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" id="btnSavePenggunaanData" class="btn btn-primary" data-bs-dismiss="modal"><i class='fa fa-save'></i> Save</button>
                </div>
            </div>
        </div>
    </div>
}

<script>
    window.jsPDF = window.jspdf.jsPDF;
    applyPlugin(window.jsPDF);
</script>

<script>
    // Global variables to store filter values
    var currentFilterParams = {
        startDate: null,
        endDate: null,
        SID: null,
        Efek: null
    };

    $(function () {
        // Add validation for mandatory fields
        $("#periodeAwalID").dxValidator({
            validationGroup: "Filter",
            validationRules: [{ type: "required", message: "Periode Awal harus dipilih" }]
        });

        $("#periodeAkhirID").dxValidator({
            validationGroup: "Filter",
            validationRules: [{ type: "required", message: "Periode Akhir harus dipilih" }]
        });

        $("#SID").dxValidator({
            validationGroup: "Filter",
            validationRules: [{ type: "required", message: "SID harus diisi" }]
        });

        // Set up date validation
        const startDate = $("#periodeAwalID").dxDateBox({
            onValueChanged: function (e) {
                const endDateBox = $("#periodeAkhirID").dxDateBox("instance");
                endDateBox.option("min", e.value);
            }
        }).dxDateBox("instance");

        const endDate = $("#periodeAkhirID").dxDateBox({
            onValueChanged: function (e) {
                const startDateBox = $("#periodeAwalID").dxDateBox("instance");
                startDateBox.option("max", e.value);
            }
        }).dxDateBox("instance");

        $("#penggunaandataid").dxValidator({
            validationGroup: "Filter",
            validationRules: [{ type: "required", message: "[Penggunaan Data] harus dipilih" }]
        });

        // Initialize the DataGrid with custom data source
        $("#grid1").dxDataGrid({
            dataSource: {
                load: function (loadOptions) {
                    console.log("DataGrid load called with params:", currentFilterParams);

                    // Only load data if we have the required filters
                    if (!currentFilterParams.startDate || !currentFilterParams.endDate || !currentFilterParams.SID) {
                        return {
                            data: [],
                            totalCount: 0
                        };
                    }

                    // Prepare parameters for the controller
                    var params = {
                        skip: loadOptions.skip || 0,
                        take: loadOptions.take || 10,
                        requireTotalCount: loadOptions.requireTotalCount || true,
                        startDate: currentFilterParams.startDate,
                        endDate: currentFilterParams.endDate,
                        SID: currentFilterParams.SID,
                        Efek: currentFilterParams.Efek
                    };

                    // Add sorting if specified
                    if (loadOptions.sort) {
                        params.sort = JSON.stringify(loadOptions.sort);
                    }

                    // Add filtering if specified
                    if (loadOptions.filter) {
                        params.filter = JSON.stringify(loadOptions.filter);
                    }

                    console.log("Sending params to controller:", params);

                    return $.ajax({
                        url: '@Url.Action("GetSTPBalanceData", "MarketDriven")',
                        type: 'GET',
                        data: params,
                        dataType: 'json'
                    }).done(function (result) {
                        console.log("Received data:", result);
                    }).fail(function (xhr, status, error) {
                        console.error("Error loading data:", error);
                        console.error("Response:", xhr.responseText);
                    });
                }
            },
            remoteOperations: true,
            keyExpr: "rowid",
            showBorders: true,
            columns: [
                { dataField: "rowid", visible: false },
                {
                    dataField: "tanggal_balance",
                    caption: "Tgl. Balance",
                    dataType: "date",
                    format: "dd/MM/yyyy",
                    calculateCellValue: function (data) {
                        return convertDateFromYYYYMMDD(data.tanggal_balance);
                    }
                },
                { dataField: "sid", caption: "SID" },
                { dataField: "trading_id", caption: "Trading ID" },
                { dataField: "efek", caption: "Efek" },
                { dataField: "subrekening_efek", caption: "Subrekening Efek" },
                {
                    dataField: "quantity",
                    caption: "Quantity",
                    alignment: "right",
                    dataType: "number",
                    format: ",##0"
                },
                {
                    dataField: "price",
                    caption: "Price",
                    alignment: "right",
                    dataType: "number",
                    format: ",##0"
                }
            ],
            paging: {
                pageSize: 10,
                enabled: true
            },
            pager: {
                showInfo: true
            },
            scrolling: {
                showScrollbar: "always"
            },
            filterRow: {
                visible: false
            },
            allowColumnResizing: true,
            width: "100%"
        });

        // Initialize the Settlement DataGrid (Grid2) with custom data source
        $("#grid2").dxDataGrid({
            dataSource: {
                load: function (loadOptions) {
                    console.log("Settlement DataGrid load called with params:", currentFilterParams);

                    // Only load data if we have the required filters
                    if (!currentFilterParams.startDate || !currentFilterParams.endDate || !currentFilterParams.SID) {
                        return {
                            data: [],
                            totalCount: 0
                        };
                    }

                    // Prepare parameters for the controller
                    var params = {
                        skip: loadOptions.skip || 0,
                        take: loadOptions.take || 10,
                        requireTotalCount: loadOptions.requireTotalCount || true,
                        startDate: currentFilterParams.startDate,
                        endDate: currentFilterParams.endDate,
                        SID: currentFilterParams.SID,
                        Efek: currentFilterParams.Efek
                    };

                    // Add sorting if specified
                    if (loadOptions.sort) {
                        params.sort = JSON.stringify(loadOptions.sort);
                    }

                    // Add filtering if specified
                    if (loadOptions.filter) {
                        params.filter = JSON.stringify(loadOptions.filter);
                    }

                    console.log("Sending Settlement params to controller:", params);

                    return $.ajax({
                        url: '@Url.Action("GetSTPSettlementData", "MarketDriven")',
                        type: 'GET',
                        data: params,
                        dataType: 'json'
                    }).done(function (result) {
                        console.log("Received Settlement data:", result);
                    }).fail(function (xhr, status, error) {
                        console.error("Error loading Settlement data:", error);
                        console.error("Settlement Response:", xhr.responseText);
                    });
                }
            },
            remoteOperations: true,
            keyExpr: "rowid",
            showBorders: true,
            columns: [
                { dataField: "rowid", visible: false },
                {
                    dataField: "settlementtransactiondatesk",
                    caption: "Tgl. Settlement",
                    dataType: "date",
                    format: "dd/MM/yyyy",
                    calculateCellValue: function (data) {
                        return convertDateFromYYYYMMDD(data.settlementtransactiondatesk);
                    }
                },
                {
                    dataField: "tradingdatesk",
                    caption: "Trading Date",
                    dataType: "date",
                    format: "dd/MM/yyyy",
                    calculateCellValue: function (data) {
                        return convertDateFromYYYYMMDD(data.tradingdatesk);
                    }
                },
                { dataField: "fpinvestorid", caption: "SID" },
                { dataField: "cpinvestorid", caption: "SID CP" },
                { dataField: "fpsettlementaccountcode", caption: "FP Settlement Account Code" },
                { dataField: "cpsettlementaccountcode", caption: "CP Settlement Account Code" }
            ],
            paging: {
                pageSize: 10,
                enabled: true
            },
            pager: {
                showInfo: true
            },
            scrolling: {
                showScrollbar: "always"
            },
            filterRow: {
                visible: false
            },
            allowColumnResizing: true,
            width: "100%"
        });

        // Initialize the Clearing DataGrid (Grid3) with custom data source
        $("#grid3").dxDataGrid({
            dataSource: {
                load: function (loadOptions) {
                    console.log("Clearing DataGrid load called with params:", currentFilterParams);

                    // Only load data if we have the required filters
                    if (!currentFilterParams.startDate || !currentFilterParams.endDate || !currentFilterParams.SID) {
                        return {
                            data: [],
                            totalCount: 0
                        };
                    }

                    // Prepare parameters for the controller
                    var params = {
                        skip: loadOptions.skip || 0,
                        take: loadOptions.take || 10,
                        requireTotalCount: loadOptions.requireTotalCount || true,
                        startDate: currentFilterParams.startDate,
                        endDate: currentFilterParams.endDate,
                        SID: currentFilterParams.SID,
                        Efek: currentFilterParams.Efek
                    };

                    // Add sorting if specified
                    if (loadOptions.sort) {
                        params.sort = JSON.stringify(loadOptions.sort);
                    }

                    // Add filtering if specified
                    if (loadOptions.filter) {
                        params.filter = JSON.stringify(loadOptions.filter);
                    }

                    console.log("Sending Clearing params to controller:", params);

                    return $.ajax({
                        url: '@Url.Action("GetSTPClearingData", "MarketDriven")',
                        type: 'GET',
                        data: params,
                        dataType: 'json'
                    }).done(function (result) {
                        console.log("Received Clearing data:", result);
                    }).fail(function (xhr, status, error) {
                        console.error("Error loading Clearing data:", error);
                        console.error("Clearing Response:", xhr.responseText);
                    });
                }
            },
            remoteOperations: true,
            keyExpr: "rowid",
            showBorders: true,
            columns: [
                { dataField: "rowid", visible: false },
                {
                    dataField: "settlementdatesk",
                    caption: "Tgl. Settlement",
                    dataType: "date",
                    format: "dd/MM/yyyy",
                    calculateCellValue: function (data) {
                        return convertDateFromYYYYMMDD(data.settlementdatesk);
                    }
                },
                {
                    dataField: "clearingdatesk",
                    caption: "Tgl. Clearing",
                    dataType: "date",
                    format: "dd/MM/yyyy",
                    calculateCellValue: function (data) {
                        return convertDateFromYYYYMMDD(data.clearingdatesk);
                    }
                },
                { dataField: "investorid", caption: "SID" },
                { dataField: "securitycompanycode", caption: "Security Company Code" },
                {
                    dataField: "clearingobligationquantity",
                    caption: "Clearing Obligation Quantity",
                    alignment: "right",
                    dataType: "number",
                    format: ",##0"
                }
            ],
            paging: {
                pageSize: 10,
                enabled: true
            },
            pager: {
                showInfo: true
            },
            scrolling: {
                showScrollbar: "always"
            },
            filterRow: {
                visible: false
            },
            allowColumnResizing: true,
            width: "100%"
        });

        // Initialize the Transaction DataGrid (Grid4) with custom data source
        $("#grid4").dxDataGrid({
            dataSource: {
                load: function (loadOptions) {
                    console.log("Transaction DataGrid load called with params:", currentFilterParams);

                    // Only load data if we have the required filters
                    if (!currentFilterParams.startDate || !currentFilterParams.endDate || !currentFilterParams.SID) {
                        return {
                            data: [],
                            totalCount: 0
                        };
                    }

                    // Prepare parameters for the controller
                    var params = {
                        skip: loadOptions.skip || 0,
                        take: loadOptions.take || 10,
                        requireTotalCount: loadOptions.requireTotalCount || true,
                        startDate: currentFilterParams.startDate,
                        endDate: currentFilterParams.endDate,
                        SID: currentFilterParams.SID,
                        Efek: currentFilterParams.Efek
                    };

                    // Add sorting if specified
                    if (loadOptions.sort) {
                        params.sort = JSON.stringify(loadOptions.sort);
                    }

                    // Add filtering if specified
                    if (loadOptions.filter) {
                        params.filter = JSON.stringify(loadOptions.filter);
                    }

                    console.log("Sending Transaction params to controller:", params);

                    return $.ajax({
                        url: '@Url.Action("GetSTPTransactionData", "MarketDriven")',
                        type: 'GET',
                        data: params,
                        dataType: 'json'
                    }).done(function (result) {
                        console.log("Received Transaction data:", result);
                    }).fail(function (xhr, status, error) {
                        console.error("Error loading Transaction data:", error);
                        console.error("Transaction Response:", xhr.responseText);
                    });
                }
            },
            remoteOperations: true,
            keyExpr: "rowid",
            showBorders: true,
            columns: [
                { dataField: "rowid", visible: false },
                {
                    dataField: "settledate",
                    caption: "Tgl. Settlement",
                    dataType: "date",
                    format: "dd/MM/yyyy",
                    calculateCellValue: function (data) {
                        return convertDateFromYYYYMMDD(data.settledate);
                    }
                },
                {
                    dataField: "tradedatesk",
                    caption: "Tgl. Trading",
                    dataType: "date",
                    format: "dd/MM/yyyy",
                    calculateCellValue: function (data) {
                        return convertDateFromYYYYMMDD(data.tradedatesk);
                    }
                },
                { dataField: "sid", caption: "SID" },
                { dataField: "investorcode", caption: "Trading ID" },
                { dataField: "cpinvestorcode", caption: "CP Trading ID" },
                { dataField: "securitycode", caption: "Security Code" },
                {
                    dataField: "transactiontypedesc",
                    caption: "Transaction Type Code",
                    calculateCellValue: function (data) {
                        // Display the translated description (Buy/Sell) but keep original code for sorting
                        return data.transactiontypedesc || data.transactiontypecode;
                    }
                },
                {
                    dataField: "volume",
                    caption: "Volume",
                    alignment: "right",
                    dataType: "number",
                    format: ",##0"
                }
            ],
            paging: {
                pageSize: 10,
                enabled: true
            },
            pager: {
                showInfo: true
            },
            scrolling: {
                showScrollbar: "always"
            },
            filterRow: {
                visible: false
            },
            allowColumnResizing: true,
            width: "100%"
        });
    });

    $(window).on('load', function () {
        $("#ModalSimpanPenggunaanData").modal("show");
    });

    $("#btnSavePenggunaanData").click(function () {
        let penggunaandataid = $("#penggunaandataid").dxSelectBox("instance").option("value");

        if (penggunaandataid == null) {
            alert("Silahkan Pilih Tujuan Penggunaan Data");
            return false;
        } else {
            $.ajax({
                url: '@Url.Action("SimpanPenggunaanDataSTP", "MarketDriven")',
                data: { id: penggunaandataid },
                dataType: "json",
                type: "POST",
                success: function (data) {
                    if (data.success == true) {
                        $('#ModalSimpanPenggunaanData').modal('hide');
                        return "Saving Success !";
                    }
                    else if (data.success == false) {
                        alert(data.message);
                        $('#ModalSimpanPenggunaanData').modal('hide');
                        return "Saving Failed !";
                    }
                }
            });
        }
    });


    // Replace your existing onButtonFilterClicked function with this final version

    function onButtonFilterClicked(e) {
        const result = e.validationGroup.validate();

        if (result.status === "valid") {
            // Get filter values
            var startDate = $("#periodeAwalID").dxDateBox("instance").option("value");
            var endDate = $("#periodeAkhirID").dxDateBox("instance").option("value");
            var SID = $("#SID").dxTextBox("instance").option("value");
            var Efek = $("#EfekID").dxTextBox("instance").option("value");

            // Convert dates to YYYYMMDD format
            currentFilterParams = {
                startDate: dateToYYYYMMDD(startDate),
                endDate: dateToYYYYMMDD(endDate),
                SID: SID,
                Efek: Efek || null
            };

            console.log("Filter applied:", currentFilterParams);

            // Show all four grids
            $("#grid1Container").show();
            $("#grid2Container").show();
            $("#grid3Container").show();
            $("#grid4Container").show();

            // Reload all four DataGrids with new parameters
            var dataGrid1 = $("#grid1").dxDataGrid("instance");
            var dataGrid2 = $("#grid2").dxDataGrid("instance");
            var dataGrid3 = $("#grid3").dxDataGrid("instance");
            var dataGrid4 = $("#grid4").dxDataGrid("instance");

            dataGrid1.refresh();
            dataGrid2.refresh();
            dataGrid3.refresh();
            dataGrid4.refresh();
        } else {
            console.log("Validation failed:", result);
            // Show validation errors
            result.brokenRules.forEach(function (rule) {
                console.log("Validation error:", rule.message);
            });
        }
    }

    function dateToYYYYMMDD(date) {
        if (!date) return null;
        var year = date.getFullYear();
        var month = (date.getMonth() + 1).toString().padStart(2, '0');
        var day = date.getDate().toString().padStart(2, '0');
        return year + month + day;
    }

    function convertDateFromYYYYMMDD(dateInt) {
        if (!dateInt) return null;
        try {
            var dateStr = dateInt.toString();
            if (dateStr.length === 8) {
                var year = parseInt(dateStr.substring(0, 4));
                var month = parseInt(dateStr.substring(4, 6)) - 1; // Month is 0-based in JavaScript
                var day = parseInt(dateStr.substring(6, 8));
                return new Date(year, month, day);
            }
        } catch (e) {
            console.error("Error converting date:", e);
        }
        return null;
    }

    function exportGridToPDF1() {
        const doc = new jsPDF();
        const dataGrid = $("#grid1").dxDataGrid("instance");
        DevExpress.pdfExporter.exportDataGrid({
            jsPDFDocument: doc,
            component: dataGrid,
            keepColumnWidths: true
        }).then(() => {
            doc.save('STP_Balance_Data.pdf');
        });
    }

    function exportGridToExcel1() {
        var dataGrid = $("#grid1").dxDataGrid("instance");
        dataGrid.exportToExcel(false);
    }

    function exportGridToPDF2() {
        const doc = new jsPDF();
        const dataGrid = $("#grid2").dxDataGrid("instance");
        DevExpress.pdfExporter.exportDataGrid({
            jsPDFDocument: doc,
            component: dataGrid,
            keepColumnWidths: true
        }).then(() => {
            doc.save('STP_Settlement_Data.pdf');
        });
    }

    function exportGridToExcel2() {
        var dataGrid = $("#grid2").dxDataGrid("instance");
        dataGrid.exportToExcel(false);
    }


    function exportGridToPDF3() {
        const doc = new jsPDF();
        const dataGrid = $("#grid3").dxDataGrid("instance");
        DevExpress.pdfExporter.exportDataGrid({
            jsPDFDocument: doc,
            component: dataGrid,
            keepColumnWidths: true
        }).then(() => {
            doc.save('STP_Clearing_Data.pdf');
        });
    }

    function exportGridToExcel3() {
        var dataGrid = $("#grid3").dxDataGrid("instance");
        dataGrid.exportToExcel(false);
    }

    // Update these export functions for Transaction grid (replace the placeholder functions)

    function exportGridToPDF4() {
        const doc = new jsPDF();
        const dataGrid = $("#grid4").dxDataGrid("instance");
        DevExpress.pdfExporter.exportDataGrid({
            jsPDFDocument: doc,
            component: dataGrid,
            keepColumnWidths: true
        }).then(() => {
            doc.save('STP_Transaction_Data.pdf');
        });
    }

    function exportGridToExcel4() {
        var dataGrid = $("#grid4").dxDataGrid("instance");
        dataGrid.exportToExcel(false);
    }

    // Placeholder export functions for other grids
    function exportGridToPDF2() { console.log("PDF export for grid2"); }
    function exportGridToExcel2() { console.log("Excel export for grid2"); }
    function exportGridToPDF3() { console.log("PDF export for grid3"); }
    function exportGridToExcel3() { console.log("Excel export for grid3"); }
    function exportGridToPDF4() { console.log("PDF export for grid4"); }
    function exportGridToExcel4() { console.log("Excel export for grid4"); }
</script>

<style type="text/css">
    .mandatory {
        color: red;
    }

    .filter-panel {
        margin-bottom: 10px;
    }

    .headerTable {
        box-sizing: border-box;
        background-color: #971c1d;
        padding: 10px;
        margin: 0 auto;
        display: block;
        width: 100%;
        color: #fdfdfd;
        text-align: center;
    }
</style>