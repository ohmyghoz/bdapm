@using DevExtreme.AspNet.Mvc
@{
    Layout = "~/Views/Shared/_LayoutMainMetronic.cshtml";
  
}

@inject BDA.DataModel.DataEntities db

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="card card-default">
        @*filter*@
        <div class="row filter-panel" style="padding-top:0px;">
            <div class="card-body">
                <h1>STP Processing</h1>

                <div class="row">
                    <div class="col-lg-3 form-group">
                        <label>Periode Awal@*<span class="mandatory">*</span>*@</label>
                        @(Html.DevExtreme().DateBox()
                            .ID("PeriodeAwalID")
                            .Type(DateBoxType.Date)
                            .DisplayFormat("dd/MM/yyyy")
                            .Width("100%"))
                    </div>
                    <div class="col-lg-3 form-group">
                        <label>Periode Akhir@*<span class="mandatory">*</span>*@</label>
                        @(Html.DevExtreme().DateBox()
                            .ID("PeriodeAkhirID")
                            .Type(DateBoxType.Date)
                            .DisplayFormat("dd/MM/yyyy")
                            .Width("100%"))
                    </div>
                    <div class="col-lg-3 form-group">
                        <label>SID@*<span class="mandatory">*</span>*@</label>
                        @(Html.DevExtreme().TextBox()
                            .ID("SID")
                            .Placeholder("Enter SID here...")
                            .InputAttr("aria-label", "SID")
                            .Width("100%"))
                    </div>

                    <div class="col-lg-3 form-group" id="topDiv">
                        <label>Efek@*<span class="mandatory">*</span>*@</label>
                        @(Html.DevExtreme().SelectBox()
                            .ID("EfekID")
                            .DataSource(new[] { "AALI", "TLKM", "BBRI", "BMRI" })
                            .ValueExpr("this")
                            .DisplayExpr("this")
                            .SearchEnabled(true)
                            .Width("100%"))
                    </div>
                </div>
                <div class="float-left">
                    @(Html.DevExtreme().Button()
                        .ID("Filter")
                        .Type(ButtonType.Default)
                        .Text("Tampilkan")
                        .OnClick("onButtonFilterClicked")
                        .ValidationGroup("Filter"))
                </div>

                @*                 <div class="float-right">
            @if (ViewBag.Export)
            {
            <a class="btn btn-light-primary font-weight-bolder btn-sm mr-2" href="javascript:ExportToExcel();"><span class="image fa fa-file-excel"></span> Export Excel</a>
            <a class="btn btn-light-primary font-weight-bolder btn-sm mr-2" href="javascript:ExportToPdf2();"><span class="image fa fa-file-pdf"></span> Export PDF</a>
            }
            </div> *@
            </div>
        </div>
       
        <br />
        @*grid*@
        <div class="row filter-panel" style="padding-top:0px;"> 
            <div class="card-body">
                <div class="row">
                    <div class="col-lg-6 form-group" style="padding-right:25px;padding-left:25px">
                        <div class="row" style="padding-bottom:12.5px">
                            <a class="btn btn-dark font-weight-bolder btn-sm mr-2" href="javascript:ExportToExcel();" title="Export Excel"><span class="image fa fa-file-excel"></span> Export Excel</a>
                            <a class="btn btn-success font-weight-bolder btn-sm mr-2" href="javascript:ExportToPdf2();" title="Export PDF"><span class="image fa fa-file-pdf"></span> Export PDF</a>
                        </div>
                        <div class="row">
                            <h4 class="headerTable">Balance</h4>
                        </div>
                        <div class="row">
                            @(Html.DevExtreme().DataGrid()
                                .ID("grid1")
                                .DataSource(d => d.StaticJson().Url("/tempData/md_stp_balance.json")
                                )
                                .KeyExpr("rowid")
                                .RemoteOperations(true)
                                .Width("100%")
                                .AllowColumnResizing(true)
                                .ColumnAutoWidth(true)
                                .Columns(columns =>
                                {
                                    columns.Add().DataField("rowid").Visible(false);
                                    columns.Add().DataField("tanggal_balance").Caption("Tanggal Balance").DataType(GridColumnDataType.Date)
                                    .Format("dd/MM/yyyy").CalculateCellValue("calculateDateCell"); ;
                                    columns.Add().DataField("sid").Caption("SID");
                                    columns.Add().DataField("trading_id").Caption("Trading ID");
                                    columns.Add().DataField("efek").Caption("Efek");
                                    columns.Add().DataField("subrekening_efek").Caption("Subrekening Efek");
                                    columns.Add().DataField("quantity").Caption("Quantity").Alignment(HorizontalAlignment.Right).DataType(GridColumnDataType.Number).Format(",##0");
                                    columns.Add().DataField("price").Caption("Price").Alignment(HorizontalAlignment.Right).DataType(GridColumnDataType.Number).Format(",##0");
                                })
                                .FilterRow(f => f.Visible(false))
                                .ShowBorders(true)
                                .Scrolling(s => s.ShowScrollbar(ShowScrollbarMode.Always))
                                .Paging(p =>
                                {
                                    p.PageSize(10);
                                    p.Enabled(true);
                                })
                                .Pager(p =>
                                {
                                    p.ShowInfo(true);
                                }))
                        </div>
                    </div>
                    <div class="col-lg-6 form-group" style="padding-right:25px;padding-left:25px">
                        <div class="row" style="padding-bottom:12.5px">
                            <a class="btn btn-dark font-weight-bolder btn-sm mr-2" href="javascript:ExportToExcel();" title="Export Excel"><span class="image fa fa-file-excel"></span> Export Excel</a>
                            <a class="btn btn-success font-weight-bolder btn-sm mr-2" href="javascript:ExportToPdf2();" title="Export PDF"><span class="image fa fa-file-pdf"></span> Export PDF</a>
                        </div>
                        <div class="row">
                            <h4 class="headerTable">Settlement</h4>
                        </div>
                        <div class="row">
                            @(Html.DevExtreme().DataGrid()
                                .ID("grid2")
                                .DataSource(d => d.StaticJson().Url("/tempData/md_stp_settlement.json")
                                )
                                .KeyExpr("rowid")
                                .RemoteOperations(true)
                                .Width("100%")
                                .AllowColumnResizing(true)
                                .ColumnAutoWidth(true)
                                .Columns(columns =>
                                               {
                                columns.Add().DataField("rowid").Visible(false);
                                    columns.Add().DataField("settlementtransactiondatesk").Caption("Tanggal Settlement").DataType(GridColumnDataType.Date)
                                    .Format("dd/MM/yyyy").CalculateCellValue("calculateDateCell3");
                                columns.Add().DataField("tradingdatesk").Caption("Tanggal Trading").DataType(GridColumnDataType.Date)
                                .Format("dd/MM/yyyy").CalculateCellValue("calculateDateCell2"); ;
                                columns.Add().DataField("fpinvestorid").Caption("SID");
                                columns.Add().DataField("cpinvestorid").Caption("SID CP");
                                columns.Add().DataField("fpsettlementaccountcode").Caption("FP Settlement Account Code");

                            })
                                .KeyExpr("rowid")
                                .RemoteOperations(true)
                                .Width("100%")
                                .AllowColumnResizing(true)
                                .ColumnAutoWidth(true)
                                .Columns(columns =>
                                {
                                    columns.Add().DataField("rowid").Visible(false);
                                    columns.Add().DataField("fpinvestorid").Caption("SID");
                                })
                                .FilterRow(f => f.Visible(false))
                                .ShowBorders(true)
                                .Scrolling(s => s.ShowScrollbar(ShowScrollbarMode.Always))
                                .Paging(p =>
                                {
                                    p.PageSize(10);
                                    p.Enabled(true);
                                })
                                .Pager(p =>
                                {
                                    p.ShowInfo(true);
                                }))
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-6 form-group" style="padding-right:25px;padding-left:25px">
                        <div class="row" style="padding-bottom:12.5px">
                            <a class="btn btn-dark font-weight-bolder btn-sm mr-2" href="javascript:ExportToExcel();" title="Export Excel"><span class="image fa fa-file-excel"></span> Export Excel</a>
                            <a class="btn btn-success font-weight-bolder btn-sm mr-2" href="javascript:ExportToPdf2();" title="Export PDF"><span class="image fa fa-file-pdf"></span> Export PDF</a>
                        </div>
                        <div class="row">
                            <h4 class="headerTable">Clearing</h4>
                        </div>
                        <div class="row">
                            @(Html.DevExtreme().DataGrid()
                                .ID("grid3")
                                .DataSource(new[] {
                        new { rowid = 1, date = "06/10/2023", date3 = "03/10/2023", sid = "IDD260110001523", companycode = "DH", clearingobli = 275000 },
                        new { rowid = 2, date = "06/10/2023", date3 = "03/10/2023", sid = "IDD260110001523", companycode = "DH", clearingobli = 242500 },
                        new { rowid = 3, date = "06/10/2023", date3 = "03/10/2023", sid = "IDD260110001523", companycode = "DH", clearingobli = 298000 }
                        })
                        
                                .KeyExpr("rowid")
                                .RemoteOperations(true)
                                .Width("100%")
                                .AllowColumnResizing(true)
                                .ColumnAutoWidth(true)
                                .Columns(columns =>
                                {
                                    columns.Add().DataField("rowid").Visible(false);
                                    columns.Add().DataField("date").Caption("Tanggal Settlement");
                                    columns.Add().DataField("date3").Caption("Tanggal Clearing");
                                    columns.Add().DataField("sid").Caption("SID");
                                    columns.Add().DataField("companycode").Caption("Security Company Code");
                                    columns.Add().DataField("clearingobli").Caption("Clearing Obligation");
                                })
                                .FilterRow(f => f.Visible(true))
                                .ShowBorders(true)
                                .Scrolling(s => s.ShowScrollbar(ShowScrollbarMode.Always))
                                .Paging(p =>
                                {
                                    p.PageSize(5);
                                    p.Enabled(true);
                                })
                                .Pager(p =>
                                {
                                    p.ShowInfo(true);
                                }))
                        </div>
                    </div>
                    <div class="col-lg-6 form-group" style="padding-right:25px;padding-left:25px">
                        <div class="row" style="padding-bottom:12.5px">
                            <a class="btn btn-dark font-weight-bolder btn-sm mr-2" href="javascript:ExportToExcel();" title="Export Excel"><span class="image fa fa-file-excel"></span> Export Excel</a>
                            <a class="btn btn-success font-weight-bolder btn-sm mr-2" href="javascript:ExportToPdf2();" title="Export PDF"><span class="image fa fa-file-pdf"></span> Export PDF</a>
                        </div>
                        <div class="row">
                            <h4 class="headerTable">Transaction</h4>
                        </div>
                        <div class="row">
                        </div>
                    </div>
                </div>
            </div>
        </div>
       

    </div> <!-- Closing the card div -->
    <!-- The Modal  Detail-->
    <div class="modal fade" id="ModalSimpanPenggunaanData" tabindex="-1" role="document" aria-hidden="true" data-backdrop="static" data-keyboard="false">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header" style="background-color:#0066b2">
                    <h4 class="modal-title" style="text-align:left">
                        <font color="white">Pilih Penggunaan Data</font>
                    </h4>
                </div><!--Modal Header-->
                <!-- Modal body -->
                <div class="modal-body">
                    <form id="StrukturFormDetail" method="POST" action="" class="form-horizontal row-border">
                        <div class="row" style="padding: 0 10px 0 10px;">
                            @(Html.DevExtreme().SelectBox()
                                .ID("penggunaandataid")
                                .DataSource(d => d.Mvc()
                                .Controller("PenggunaanData")
                                .Area("Website")
                                .LoadAction("GetPenggunaanData")
                                .Key("value"))
                                .ValueExpr("value")
                                .DisplayExpr("text")
                                .SearchEnabled(true)
                                .Width("100%")
                                )
                        </div>
                    </form>
                </div>
                <!-- Modal footer -->
                <div class="modal-footer">
                    <button type="button" id="btnSavePenggunaanData" class="btn btn-primary" data-bs-dismiss="modal"><i class='fa fa-save'></i> Save</button>
                </div>
            </div>
        </div>
    </div>
    <!-- The Modal  Detail-->
} <!-- Closing the using block -->

<script>
    window.jsPDF = window.jspdf.jsPDF;
    applyPlugin(window.jsPDF);
</script>

<script>
    $(function () {
        const startDate = $("#PeriodeAwal").dxDateBox({
            onValueChanged: function (e) {
                endDate.option("min", e.value);
            }
        }).dxDateBox("instance");

        $("#PeriodeAwal").dxValidator({
            validationGroup: "Filter",
            validationRules: [{ type: "required", message: "[Tanggal] harus dipilih" }]
        })
    });

    $(function () {
        $("#penggunaandataid").dxValidator({
            validationGroup: "Filter",
            validationRules: [{ type: "required", message: "[Penggunaan Data] harus dipilih" }]
        })
    });

    $(function () {
        $("#namaPEid").dxValidator({
            validationGroup: "Filter",
            validationRules: [{ type: "required", message: "[Nama PE] harus dipilih" }]
        })
    });

    $(window).on('load', function () {
        $("#ModalSimpanPenggunaanData").modal("show");
    });

    $("#btnSavePenggunaanData").click(function () {
        let penggunaandataid = $("#penggunaandataid").dxSelectBox("instance").option("value");

        if (penggunaandataid == null) {
            alert("Silahkan Pilih Tujuan Penggunaan Data");
            return false;
        } else {
            $.ajax({
                url: '@Url.Action("SimpanPenggunaanData", "SegmentationSummaryClusterMKBD")',
                data: { id: penggunaandataid },
                dataType: "json",
                type: "POST",
                success: function (data) {
                    if (data.success == true) {
                        //alert(data.message);
    @* waitingDialog.hide(); *@
                            $('#ModalSimpanPenggunaanData').modal('hide');
                        return "Saving Success !";
                    }
                    else if (data.success == false) {
    @*  waitingDialog.hide(); *@
                            alert(data.message);
                        $('#ModalSimpanPenggunaanData').modal('hide');
                        return "Saving Failed !";
                    }
                }
            });
        }
    });

    function calculateDateCell(rowData) {
        if (rowData.tanggal_balance) {
            var dateStr = rowData.tanggal_balance.toString();
            var year = dateStr.substring(0, 4);
            var month = dateStr.substring(4, 6);
            var day = dateStr.substring(6, 8);
            return new Date(year, month - 1, day);
        }

        return null;
    }

    function calculateDateCell2(rowData) {
        if (rowData.tradingdatesk) {
            var dateStr = rowData.tradingdatesk.toString();
            var year = dateStr.substring(0, 4);
            var month = dateStr.substring(4, 6);
            var day = dateStr.substring(6, 8);
            return new Date(year, month - 1, day);
        }

        return null;
    }

    function calculateDateCell3(rowData) {
        if (rowData.settlementtransactiondatesk) {
            var dateStr = rowData.settlementtransactiondatesk.toString();
            var year = dateStr.substring(0, 4);
            var month = dateStr.substring(4, 6);
            var day = dateStr.substring(6, 8);
            return new Date(year, month - 1, day);
        }

        return null;
    }

    function ExportToPdf() {
        $.ajax({
            type: "POST",
            url: "@Url.Action("LogExportIndex", "MaxMinOverdue")",
            success: function (response) {
                if (response.result == "Success") {
                    const doc = new jsPDF({
                        orientation: "landscape",
                        unit: "cm",
                        format: [21, 60]
                    });
                    var dataGrid = $("#grid1").dxDataGrid("instance");
                    var fileName = "MaxMinOverdue_" + new Date().toISOString().slice(0, 10) + ".pdf";
                    doc.setFontSize("6")
                    //var keys = $("#grid1").dxDataGrid("getSelectedRowsData")
                    //console.log(keys)
                    DevExpress.pdfExporter.exportDataGrid({
                        jsPDFDocument: doc,
                        component: dataGrid,
                        keepColumnWidths: true
                        //selectedRowsOnly: true
                    }).then(function () {
                        doc.save(fileName);
                    });
                }
            }
        });
    }

    function ExportToPdf2() {
        var dataGrid = $("#grid1").dxDataGrid("instance");
        dataGrid.option("onExporting", function (e) { });
        dataGrid.option("onFileSaving", function (e) {
            var fd = new FormData();
            fd.append("file", e.data);
            $.ajax({
                type: "POST",
                url: "@Url.Action("ExportPDF", "SegmentationSummaryClusterMKBD")",
                data: fd,
                processData: false,
                contentType: false
            }).done(function (data) {
                window.location = "@Url.Action("File", "SegmentationSummaryClusterMKBD")"
            });
            e.cancel = true;
        });

        dataGrid.exportToExcel();
    }

    function onSelectionChanged(e) {
        if (e.addedItems.length > 0) {
            e.component.field().val(""); // Clears the search text. However, search filter is only applied to the widget after focus is lost in the input element
        }
    }

    function onButtonFilterClicked(e) {
        const res = e.validationGroup.validate();
        if (res.status === "valid") {
            $("#grid1").dxDataGrid("instance").refresh();
        }
    }

    function onGridBeforeSend(method, ajaxOptions) {
        let namaPE = $("#namaPEid").dxSelectBox("instance").option("value");
        let tempPeriodeAwal = $("#PeriodeAwal").dxDateBox("instance").option("value");
        let status = $("#Statusid").dxTagBox("instance").option("value");

        let periodeAwal = null;
        if (tempPeriodeAwal != null) {
            periodeAwal = tempPeriodeAwal.getFullYear() + '-' + (tempPeriodeAwal.getMonth() + 1) + '-' + tempPeriodeAwal.getDate();
        }
        ajaxOptions.data.namaPE = JSON.stringify(namaPE);
        ajaxOptions.data.periodeAwal = periodeAwal;
        ajaxOptions.data.status = JSON.stringify(status);
    }

    function onLJKOpened(e) {
        e.component.content().find('.dx-list-select-all').hide();
    }

    function Detail(e) {
        var keys = e.row.key;
        if (typeof (keys) !== "undefined" && typeof (keys) !== null) {
            window.open('@Url.Action("Detail", "SegmentationSummaryClusterMKBD")?id=' + keys.toString());
        }
    }

    var waitingDialog = (function ($) {

        // Creating modal dialog's DOM
        var $dialog = $(
            '<div class="modal fade" data-backdrop="static" data-keyboard="false" tabindex="-1" role="dialog" aria-hidden="true" style="padding-top:15%; overflow-y:visible;">' +
            '<div class="modal-dialog modal-m">' +
            '<div class="modal-content">' +
            '<div class="modal-header"><h3 style="margin:0;"></h3></div>' +
            '<div class="modal-body">' +
            '<div class="progress progress-striped active" style="margin-bottom:0;"><div class="progress-bar" style="width: 100%"></div></div>' +
            '</div></div></div></div>');

        return {
            show: function (message, options) {
                // Assigning defaults
                var settings = $.extend({
                    dialogSize: 'm',
                    progressType: ''
                }, options);
                if (typeof message === 'undefined') {
                    message = 'Loading';
                }
                if (typeof options === 'undefined') {
                    options = {};
                }
                // Configuring dialog
                $dialog.find('.modal-dialog').attr('class', 'modal-dialog').addClass('modal-' + settings.dialogSize);
                $dialog.find('.progress-bar').attr('class', 'progress-bar');
                if (settings.progressType) {
                    $dialog.find('.progress-bar').addClass('progress-bar-' + settings.progressType);
                }
                $dialog.find('h3').text(message);
                // Opening dialog
                $dialog.modal();
            },
            /**
                * Closes dialog
                */
            hide: function () {
                $dialog.modal('hide');
            }
        }
    })(jQuery);
</script>

<style type="text/css">
    .mandatory {
        color: red;
    }
    .filter-panel {
        margin-bottom: 10px;
    }
    .headerTable {
        box-sizing: border-box;
        background-color: #971c1d;
        padding: 10px;
        margin: 0 auto;
        display: block;
        width: 100%;
        color: #fdfdfd;
        text-align: center;
    }
</style>
