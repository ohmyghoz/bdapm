@using DevExtreme.AspNet.Mvc
@{
    Layout = "~/Views/Shared/_LayoutMainMetronic.cshtml";
  
}

@inject BDA.DataModel.DataEntities db

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="card card-default">
        @*filter*@
        <div class="row filter-panel" style="padding-top:0px;">
            <div class="card-body">
                <h1>STP Processing</h1>

                <div class="row">
                    <div class="col-lg-3 form-group">
                        <label>Periode Awal@*<span class="mandatory">*</span>*@</label>
                        @(Html.DevExtreme().DateBox()
                            .ID("periodeAwalID")
                            .Type(DateBoxType.Date)
                            .DisplayFormat("dd/MM/yyyy")
                            .Width("100%"))
                    </div>
                    <div class="col-lg-3 form-group">
                        <label>Periode Akhir@*<span class="mandatory">*</span>*@</label>
                        @(Html.DevExtreme().DateBox()
                            .ID("periodeAkhirID")
                            .Type(DateBoxType.Date)
                            .DisplayFormat("dd/MM/yyyy")
                            .Width("100%"))
                    </div>
                    <div class="col-lg-3 form-group">
                        <label>SID@*<span class="mandatory">*</span>*@</label>
                        @(Html.DevExtreme().TextBox()
                            .ID("SID")
                            .Placeholder("Enter SID here...")
                            .InputAttr("aria-label", "SID")
                            .Width("100%"))
                    </div>

                    <div class="col-lg-3 form-group" id="topDiv">
                        <label>Efek@*<span class="mandatory">*</span>*@</label>
                        @(Html.DevExtreme().TextBox()
                            .ID("EfekID")
                            .Placeholder("Enter SID here...")
                            .InputAttr("aria-label", "EfekID")
                            .Width("100%"))
                    </div>
                </div>
                <div class="float-left">
                    @(Html.DevExtreme().Button()
                        .ID("filterButton")
                        .Type(ButtonType.Default)
                        .Text("Tampilkan")
                        .OnClick("onButtonFilterClicked")
                        .ValidationGroup("Filter"))
                </div>

                @*                 <div class="float-right">
            @if (ViewBag.Export)
            {
            <a class="btn btn-light-primary font-weight-bolder btn-sm mr-2" href="javascript:ExportToExcel();"><span class="image fa fa-file-excel"></span> Export Excel</a>
            <a class="btn btn-light-primary font-weight-bolder btn-sm mr-2" href="javascript:ExportToPdf2();"><span class="image fa fa-file-pdf"></span> Export PDF</a>
            }
            </div> *@
            </div>
        </div>
       
        <br />
        @*grid*@
        <div class="row filter-panel" style="padding-top:0px;"> 
            <div class="card-body">
                <div class="row">
                    <div class="col-lg-6 form-group" style="padding-right:25px;padding-left:25px">
                        <div class="row" style="padding-bottom:12.5px">
                            <a class="btn btn-dark font-weight-bolder btn-sm mr-2" href="javascript:exportGridToExcel1;" title="Export Excel"><span class="image fa fa-file-excel"></span> Export Excel</a>
                            <a class="btn btn-success font-weight-bolder btn-sm mr-2" href="javascript:exportGridToPDF1();" title="Export PDF"><span class="image fa fa-file-pdf"></span> Export PDF</a>
                        </div>
                        <div class="row">
                            <h4 class="headerTable">Balance</h4>
                        </div>
                        <div class="row">
                            <div id="grid1Container" style="display: none;">
                            @(Html.DevExtreme().DataGrid()
                                .ID("grid1")
                                .DataSource(d => d.StaticJson().Url("/tempData/md_stp_balance.json")
                                )
                                .KeyExpr("rowid")
                                .RemoteOperations(true)
                                .Width("100%")
                                .AllowColumnResizing(true)
                                .ColumnAutoWidth(true)
                                .Columns(columns =>
                                {
                                    columns.Add().DataField("rowid").Visible(false);
                                    columns.Add().DataField("tanggal_balance").Caption("Tanggal Balance").DataType(GridColumnDataType.Date)
                                    .Format("dd/MM/yyyy").CalculateCellValue("calculateDateCell"); ;
                                    columns.Add().DataField("sid").Caption("SID");
                                    columns.Add().DataField("trading_id").Caption("Trading ID");
                                    columns.Add().DataField("efek").Caption("Efek");
                                    columns.Add().DataField("subrekening_efek").Caption("Subrekening Efek");
                                    columns.Add().DataField("quantity").Caption("Quantity").Alignment(HorizontalAlignment.Right).DataType(GridColumnDataType.Number).Format(",##0");
                                    columns.Add().DataField("price").Caption("Price").Alignment(HorizontalAlignment.Right).DataType(GridColumnDataType.Number).Format(",##0");
                                })
                                .FilterRow(f => f.Visible(false))
                                .ShowBorders(true)
                                .Scrolling(s => s.ShowScrollbar(ShowScrollbarMode.Always))
                                .Paging(p =>
                                {
                                    p.PageSize(10);
                                    p.Enabled(true);
                                })
                                .Pager(p =>
                                {
                                    p.ShowInfo(true);
                                }))
                                </div>
                        </div>
                    </div>
                    <div class="col-lg-6 form-group" style="padding-right:25px;padding-left:25px">
                        <div class="row" style="padding-bottom:12.5px">
                            <a class="btn btn-dark font-weight-bolder btn-sm mr-2" href="javascript:exportGridToExcel2();" title="Export Excel"><span class="image fa fa-file-excel"></span> Export Excel</a>
                            <a class="btn btn-success font-weight-bolder btn-sm mr-2" href="javascript:exportGridToPDF2();" title="Export PDF"><span class="image fa fa-file-pdf"></span> Export PDF</a>
                        </div>
                        <div class="row">
                            <h4 class="headerTable">Settlement</h4>
                        </div>
                        <div class="row">
                            <div id="grid2Container" style="display: none;">
                            @(Html.DevExtreme().DataGrid()
                                .ID("grid2")
                                .DataSource(d => d.StaticJson().Url("/tempData/md_stp_settlement.json")
                                )
                                .KeyExpr("rowid")
                                .RemoteOperations(true)
                                .Width("100%")
                                .AllowColumnResizing(true)
                                .ColumnAutoWidth(true)
                                .Columns(columns =>
                                               {
                                columns.Add().DataField("rowid").Visible(false);
                                    columns.Add().DataField("settlementtransactiondatesk").Caption("Tanggal Settlement").DataType(GridColumnDataType.Date)
                                    .Format("dd/MM/yyyy").CalculateCellValue("calculateDateCell3");
                                columns.Add().DataField("tradingdatesk").Caption("Tanggal Trading").DataType(GridColumnDataType.Date)
                                .Format("dd/MM/yyyy").CalculateCellValue("calculateDateCell2"); ;
                                columns.Add().DataField("fpinvestorid").Caption("SID");
                                columns.Add().DataField("cpinvestorid").Caption("SID CP");
                                columns.Add().DataField("fpsettlementaccountcode").Caption("FP Settlement Account Code");

                            })
                                .FilterRow(f => f.Visible(false))
                                .ShowBorders(true)
                                .Scrolling(s => s.ShowScrollbar(ShowScrollbarMode.Always))
                                .Paging(p =>
                                {
                                    p.PageSize(10);
                                    p.Enabled(true);
                                })
                                .Pager(p =>
                                {
                                    p.ShowInfo(true);
                                }))
                                </div>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-6 form-group" style="padding-right:25px;padding-left:25px">
                        <div class="row" style="padding-bottom:12.5px">
                            <a class="btn btn-dark font-weight-bolder btn-sm mr-2" href="javascript:exportGridToExcel3();" title="Export Excel"><span class="image fa fa-file-excel"></span> Export Excel</a>
                            <a class="btn btn-success font-weight-bolder btn-sm mr-2" href="javascript:exportGridToPDF3()();" title="Export PDF"><span class="image fa fa-file-pdf"></span> Export PDF</a>
                        </div>
                        <div class="row">
                            <h4 class="headerTable">Clearing</h4>
                        </div>
                        <div class="row">
                            <div id="grid3Container" style="display: none;">
                            @(Html.DevExtreme().DataGrid()
                                .ID("grid3")
                                .DataSource(d => d.StaticJson().Url("/tempData/md_stp_clearing.json")
                                )
                                .KeyExpr("rowid")
                                .RemoteOperations(true)
                                .Width("100%")
                                .AllowColumnResizing(true)
                                .ColumnAutoWidth(true)
                                .Columns(columns =>
                                {
                                    columns.Add().DataField("rowid").Visible(false);
                                    columns.Add().DataField("settlementdatesk").Caption("Tanggal Settlement").DataType(GridColumnDataType.Date)
                                    .Format("dd/MM/yyyy").CalculateCellValue("calculateDateCell4");
                                    columns.Add().DataField("clearingdatesk").Caption("Tanggal Clearing").DataType(GridColumnDataType.Date)
                                    .Format("dd/MM/yyyy").CalculateCellValue("calculateDateCell5"); ;
                                    columns.Add().DataField("investorid").Caption("SID");
                                    columns.Add().DataField("securitycompanycode").Caption("Security Company Code");
                                    columns.Add().DataField("clearingobligationquantity").Caption("Clearing Obligation").Alignment(HorizontalAlignment.Right).DataType(GridColumnDataType.Number).Format(",##0");

                                })                    
                                .FilterRow(f => f.Visible(false))
                                .ShowBorders(true)
                                .Scrolling(s => s.ShowScrollbar(ShowScrollbarMode.Always))
                                .Paging(p =>
                                {
                                    p.PageSize(10);
                                    p.Enabled(true);
                                })
                                .Pager(p =>
                                {
                                    p.ShowInfo(true);
                                }))
                                </div>
                        </div>
                    </div>
                    <div class="col-lg-6 form-group" style="padding-right:25px;padding-left:25px">
                        <div class="row" style="padding-bottom:12.5px">
                            <a class="btn btn-dark font-weight-bolder btn-sm mr-2" href="javascript:exportGridToExcel4();" title="Export Excel"><span class="image fa fa-file-excel"></span> Export Excel</a>
                            <a class="btn btn-success font-weight-bolder btn-sm mr-2" href="javascript:exportGridToPDF4()();" title="Export PDF"><span class="image fa fa-file-pdf"></span> Export PDF</a>
                        </div>
                        <div class="row">
                            <h4 class="headerTable">Transaction</h4>
                        </div>
                        <div class="row">
                            <div id="grid4Container" style="display: none;">
                            @(Html.DevExtreme().DataGrid()
                                .ID("grid4")
                                .DataSource(d => d.StaticJson().Url("/tempData/md_stp_tra.json")
                                )
                                .KeyExpr("rowid")
                                .RemoteOperations(true)
                                .Width("100%")
                                .AllowColumnResizing(true)
                                .ColumnAutoWidth(true)
                                .Columns(columns =>
                                {
                                    columns.Add().DataField("rowid").Visible(false);
                                    columns.Add().DataField("settledate").Caption("Tgl. Settlement").DataType(GridColumnDataType.Date)
                                    .Format("dd/MM/yyyy").CalculateCellValue("calculateDateCell6");
                                    columns.Add().DataField("tradedatesk").Caption("Tgl. Trading").DataType(GridColumnDataType.Date)
                                    .Format("dd/MM/yyyy").CalculateCellValue("calculateDateCell7"); ;
                                    columns.Add().DataField("sid").Caption("SID");
                                    columns.Add().DataField("investorcode").Caption("Trading ID");
                                    columns.Add().DataField("cpinvestorcode").Caption("CP Trading ID");
                                    columns.Add().DataField("securitycode").Caption("Security Code");
                                    columns.Add().DataField("transactiontypecode").Caption("Transaction Type Code");
                                    columns.Add().DataField("volume").Caption("Volume").Alignment(HorizontalAlignment.Right).DataType(GridColumnDataType.Number).Format(",##0");

                                })
                                .FilterRow(f => f.Visible(false))
                                .ShowBorders(true)
                                .Scrolling(s => s.ShowScrollbar(ShowScrollbarMode.Always))
                                .Paging(p =>
                                {
                                    p.PageSize(10);
                                    p.Enabled(true);
                                })
                                .Pager(p =>
                                {
                                    p.ShowInfo(true);
                                }))
                                </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
       

    </div> <!-- Closing the card div -->
    <!-- The Modal  Detail-->
    <div class="modal fade" id="ModalSimpanPenggunaanData" tabindex="-1" role="document" aria-hidden="true" data-backdrop="static" data-keyboard="false">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header" style="background-color:#0066b2">
                    <h4 class="modal-title" style="text-align:left">
                        <font color="white">Pilih Penggunaan Data</font>
                    </h4>
                </div><!--Modal Header-->
                <!-- Modal body -->
                <div class="modal-body">
                    <form id="StrukturFormDetail" method="POST" action="" class="form-horizontal row-border">
                        <div class="row" style="padding: 0 10px 0 10px;">
                            @(Html.DevExtreme().SelectBox()
                                .ID("penggunaandataid")
                                .DataSource(d => d.Mvc()
                                .Controller("PenggunaanData")
                                .Area("Website")
                                .LoadAction("GetPenggunaanData")
                                .Key("value"))
                                .ValueExpr("value")
                                .DisplayExpr("text")
                                .SearchEnabled(true)
                                .Width("100%")
                                )
                        </div>
                    </form>
                </div>
                <!-- Modal footer -->
                <div class="modal-footer">
                    <button type="button" id="btnSavePenggunaanData" class="btn btn-primary" data-bs-dismiss="modal"><i class='fa fa-save'></i> Save</button>
                </div>
            </div>
        </div>
    </div>
    <!-- The Modal  Detail-->
} <!-- Closing the using block -->

<script>
    window.jsPDF = window.jspdf.jsPDF;
    applyPlugin(window.jsPDF);
</script>

<script>
    $(function () {
        const startDate = $("#PeriodeAwal").dxDateBox({
            onValueChanged: function (e) {
                endDate.option("min", e.value);
            }
        }).dxDateBox("instance");

        $("#PeriodeAwal").dxValidator({
            validationGroup: "Filter",
            validationRules: [{ type: "required", message: "[Tanggal] harus dipilih" }]
        })
    });

    $(function () {
        $("#penggunaandataid").dxValidator({
            validationGroup: "Filter",
            validationRules: [{ type: "required", message: "[Penggunaan Data] harus dipilih" }]
        })
    });

    $(function () {
        $("#namaPEid").dxValidator({
            validationGroup: "Filter",
            validationRules: [{ type: "required", message: "[Nama PE] harus dipilih" }]
        })
    });

    $(window).on('load', function () {
        $("#ModalSimpanPenggunaanData").modal("show");
    });

    $("#btnSavePenggunaanData").click(function () {
        let penggunaandataid = $("#penggunaandataid").dxSelectBox("instance").option("value");

        if (penggunaandataid == null) {
            alert("Silahkan Pilih Tujuan Penggunaan Data");
            return false;
        } else {
            $.ajax({
                url: '@Url.Action("SimpanPenggunaanData", "SegmentationSummaryClusterMKBD")',
                data: { id: penggunaandataid },
                dataType: "json",
                type: "POST",
                success: function (data) {
                    if (data.success == true) {
                        //alert(data.message);
    @* waitingDialog.hide(); *@
                            $('#ModalSimpanPenggunaanData').modal('hide');
                        return "Saving Success !";
                    }
                    else if (data.success == false) {
    @*  waitingDialog.hide(); *@
                            alert(data.message);
                        $('#ModalSimpanPenggunaanData').modal('hide');
                        return "Saving Failed !";
                    }
                }
            });
        }
    });

    function calculateDateCell(rowData) {
        if (rowData.tanggal_balance) {
            var dateStr = rowData.tanggal_balance.toString();
            var year = dateStr.substring(0, 4);
            var month = dateStr.substring(4, 6);
            var day = dateStr.substring(6, 8);
            return new Date(year, month - 1, day);
        }

        return null;
    }

    function calculateDateCell2(rowData) {
        if (rowData.tradingdatesk) {
            var dateStr = rowData.tradingdatesk.toString();
            var year = dateStr.substring(0, 4);
            var month = dateStr.substring(4, 6);
            var day = dateStr.substring(6, 8);
            return new Date(year, month - 1, day);
        }

        return null;
    }

    function calculateDateCell3(rowData) {
        if (rowData.settlementtransactiondatesk) {
            var dateStr = rowData.settlementtransactiondatesk.toString();
            var year = dateStr.substring(0, 4);
            var month = dateStr.substring(4, 6);
            var day = dateStr.substring(6, 8);
            return new Date(year, month - 1, day);
        }

        return null;
    }

    function calculateDateCell4(rowData) {
        if (rowData.settlementdatesk) {
            var dateStr = rowData.settlementdatesk.toString();
            var year = dateStr.substring(0, 4);
            var month = dateStr.substring(4, 6);
            var day = dateStr.substring(6, 8);
            return new Date(year, month - 1, day);
        }

        return null;
    }

    function calculateDateCell5(rowData) {
        if (rowData.clearingdatesk) {
            var dateStr = rowData.clearingdatesk.toString();
            var year = dateStr.substring(0, 4);
            var month = dateStr.substring(4, 6);
            var day = dateStr.substring(6, 8);
            return new Date(year, month - 1, day);
        }

        return null;
    }

    function calculateDateCell6(rowData) {
        if (rowData.settledate) {
            var dateStr = rowData.settledate.toString();
            var year = dateStr.substring(0, 4);
            var month = dateStr.substring(4, 6);
            var day = dateStr.substring(6, 8);
            return new Date(year, month - 1, day);
        }

        return null;
    }

    function calculateDateCell7(rowData) {
        if (rowData.tradedatesk) {
            var dateStr = rowData.tradedatesk.toString();
            var year = dateStr.substring(0, 4);
            var month = dateStr.substring(4, 6);
            var day = dateStr.substring(6, 8);
            return new Date(year, month - 1, day);
        }

        return null;
    }

  
    function onButtonFilterClicked(e) {
        console.log("Filter button clicked"); // Add this to verify the function is called
        var calc = 2 + 3;
        console.log(calc); // Add this to verify the function is called
        $("#grid1Container").show();

        // Get the DataGrid instance
        var dataGrid = $("#grid1").dxDataGrid("instance");

        // Refresh the grid data
        dataGrid.refresh();
    }

    

    function formatDateToYYYYMMDD(date) {
        var d = new Date(date);
        var year = d.getFullYear();
        var month = ("0" + (d.getMonth() + 1)).slice(-2);
        var day = ("0" + d.getDate()).slice(-2);
        return year + month + day;
    }

    function onSelectionChanged(e) {
        if (e.addedItems.length > 0) {
            e.component.field().val(""); // Clears the search text. However, search filter is only applied to the widget after focus is lost in the input element
        }
    }

    function onButtonFilterClicked(e) {
        const res = e.validationGroup.validate();
        if (res.status === "valid") {
            $("#grid1").dxDataGrid("instance").refresh();
        }
    }

    function exportGridToPDF1() {
        const doc = new jsPDF();

        // Get the DataGrid instance
        const dataGrid = $("#grid1").dxDataGrid("instance");

        // Export DataGrid to PDF
        DevExpress.pdfExporter.exportDataGrid({
            jsPDFDocument: doc,
            component: dataGrid,
            keepColumnWidths: true
        }).then(() => {
            // Save the PDF with a given file name
            doc.save('GridData.pdf');
        });
    }

    function exportGridToExcel1() {
        var dataGrid = $("#grid1").dxDataGrid("instance");
        dataGrid.exportToExcel(false); // 'false' means export all data, not just selected rows
    }

    function exportGridToPDF2() {
        const doc = new jsPDF();

        // Get the DataGrid instance
        const dataGrid = $("#grid2").dxDataGrid("instance");

        // Export DataGrid to PDF
        DevExpress.pdfExporter.exportDataGrid({
            jsPDFDocument: doc,
            component: dataGrid,
            keepColumnWidths: true
        }).then(() => {
            // Save the PDF with a given file name
            doc.save('GridData.pdf');
        });
    }

    function exportGridToExcel2() {
        var dataGrid = $("#grid2").dxDataGrid("instance");
        dataGrid.exportToExcel(false); // 'false' means export all data, not just selected rows
    }

    function exportGridToPDF3() {
        const doc = new jsPDF();

        // Get the DataGrid instance
        const dataGrid = $("#grid3").dxDataGrid("instance");

        // Export DataGrid to PDF
        DevExpress.pdfExporter.exportDataGrid({
            jsPDFDocument: doc,
            component: dataGrid,
            keepColumnWidths: true
        }).then(() => {
            // Save the PDF with a given file name
            doc.save('GridData.pdf');
        });
    }

    function exportGridToExcel3() {
        var dataGrid = $("#grid3").dxDataGrid("instance");
        dataGrid.exportToExcel(false); // 'false' means export all data, not just selected rows
    }

    function exportGridToPDF4() {
        const doc = new jsPDF();

        // Get the DataGrid instance
        const dataGrid = $("#grid4").dxDataGrid("instance");

        // Export DataGrid to PDF
        DevExpress.pdfExporter.exportDataGrid({
            jsPDFDocument: doc,
            component: dataGrid,
            keepColumnWidths: true
        }).then(() => {
            // Save the PDF with a given file name
            doc.save('GridData.pdf');
        });
    }

    function exportGridToExcel4() {
        var dataGrid = $("#grid4").dxDataGrid("instance");
        dataGrid.exportToExcel(false); // 'false' means export all data, not just selected rows
    }

    var waitingDialog = (function ($) {

        // Creating modal dialog's DOM
        var $dialog = $(
            '<div class="modal fade" data-backdrop="static" data-keyboard="false" tabindex="-1" role="dialog" aria-hidden="true" style="padding-top:15%; overflow-y:visible;">' +
            '<div class="modal-dialog modal-m">' +
            '<div class="modal-content">' +
            '<div class="modal-header"><h3 style="margin:0;"></h3></div>' +
            '<div class="modal-body">' +
            '<div class="progress progress-striped active" style="margin-bottom:0;"><div class="progress-bar" style="width: 100%"></div></div>' +
            '</div></div></div></div>');

        return {
            show: function (message, options) {
                // Assigning defaults
                var settings = $.extend({
                    dialogSize: 'm',
                    progressType: ''
                }, options);
                if (typeof message === 'undefined') {
                    message = 'Loading';
                }
                if (typeof options === 'undefined') {
                    options = {};
                }
                // Configuring dialog
                $dialog.find('.modal-dialog').attr('class', 'modal-dialog').addClass('modal-' + settings.dialogSize);
                $dialog.find('.progress-bar').attr('class', 'progress-bar');
                if (settings.progressType) {
                    $dialog.find('.progress-bar').addClass('progress-bar-' + settings.progressType);
                }
                $dialog.find('h3').text(message);
                // Opening dialog
                $dialog.modal();
            },
            /**
                * Closes dialog
                */
            hide: function () {
                $dialog.modal('hide');
            }
        }
    })(jQuery);

    $(document).ready(function () {
        $("#filterButton").dxButton({
            onClick: function (e) {

                // Get filter values
                var startDate = $("#periodeAwalID").dxDateBox("instance").option("value");
                var endDate = $("#periodeAkhirID").dxDateBox("instance").option("value");
                var SID = $("#SID").dxTextBox("instance").option("value");
                var Efek = $("#EfekID").dxTextBox("instance").option("value");

                var startDateInt = dateToYYYYMMDD(startDate);
                var endDateInt = dateToYYYYMMDD(endDate);


                console.log("Filter button clicked");
                console.log(startDate);
                console.log(endDate);
                console.log(SID);
                console.log(Efek);

                $("#grid1Container").show();
                $("#grid2Container").show();
                $("#grid3Container").show();
                $("#grid4Container").show();

               
                //filter grid1
                var filterconditions1 =[
                    ["tanggal_balance", ">=", startDateInt],
                    "and",
                    ["tanggal_balance", "<=", endDateInt]
                ];

                if (SID) {
                    filterconditions1.push("and");
                    filterconditions1.push(["sid", "=", SID]);
                }

                if (Efek) {
                    filterconditions1.push("and");
                    filterconditions1.push(["efek", "=", Efek]);
                }

                //filtergrid2
                var filterconditions2 = [
                    ["settlementtransactiondatesk", ">=", startDateInt],
                    "and",
                    ["settlementtransactiondatesk", "<=", endDateInt]
                ];

                if (SID) {
                    filterconditions2.push("and");
                    filterconditions2.push(["fpinvestorid", "=", SID]);
                }

                if (Efek) {
                    filterconditions2.push("and");
                    filterconditions2.push(["securitycode", "=", Efek]);
                }

                //filtergrid3
                var filterconditions3 = [
                    ["clearingdatesk", ">=", startDateInt],
                    "and",
                    ["clearingdatesk", "<=", endDateInt]
                ];

                if (SID) {
                    filterconditions3.push("and");
                    filterconditions3.push(["investorid", "=", SID]);
                }

                if (Efek) {
                    filterconditions3.push("and");
                    filterconditions3.push(["securitycode", "=", Efek]);
                }

                //filtergrid4
                var filterconditions4 = [
                    ["tradedatesk", ">=", startDateInt],
                    "and",
                    ["tradedatesk", "<=", endDateInt]
                ];

                if (SID) {
                    filterconditions4.push("and");
                    filterconditions4.push(["sid", "=", SID]);
                }

                if (Efek) {
                    filterconditions4.push("and");
                    filterconditions4.push(["securitycode", "=", Efek]);
                }

                var dataGrid1 = $("#grid1").dxDataGrid("instance");
                dataGrid1.filter(filterconditions1);

                var dataGrid2 = $("#grid2").dxDataGrid("instance");
                dataGrid2.filter(filterconditions2);

                var dataGrid3 = $("#grid3").dxDataGrid("instance");
                dataGrid3.filter(filterconditions3);


                var dataGrid4 = $("#grid4").dxDataGrid("instance");
                dataGrid4.filter(filterconditions4);

                dataGrid1.refresh();
                dataGrid2.refresh();
                dataGrid3.refresh();
                dataGrid4.refresh();
            }
        });
    });

    function dateToYYYYMMDD(date) {
        var year = date.getFullYear();
        var month = (date.getMonth() + 1).toString().padStart(2, '0');
        var day = date.getDate().toString().padStart(2, '0');
        return parseInt(year + month + day);
    }
</script>

<style type="text/css">
    .mandatory {
        color: red;
    }
    .filter-panel {
        margin-bottom: 10px;
    }
    .headerTable {
        box-sizing: border-box;
        background-color: #971c1d;
        padding: 10px;
        margin: 0 auto;
        display: block;
        width: 100%;
        color: #fdfdfd;
        text-align: center;
    }
</style>
