@using DevExtreme.AspNet.Mvc
@{
    Layout = "~/Views/Shared/_LayoutMainMetronic.cshtml";
    string reportId = "Validasi_Data_Transaksi";
    var p = (string[])ViewBag.period;
    var maxItems = db.GetSetting("LimitFilterLJK");
}

@inject BDA.DataModel.DataEntities db

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="card card-default">
        @*filter*@
        <div class="row filter-panel" style="padding-top:0px;">
            <div class="card-body">
                <h1>Validasi Data Transaksi</h1>
                <div class="row">
                    <div class="col-lg-3 form-group">
                        <label>Jenis Periode<span class="mandatory">*</span></label>
                        @(Html.DevExtreme().SelectBox()
                            .ID("Periodid")
                            .DataSource(new[] { "Daily", "Monthly", "Custom Date" })
                            .Width("100%")
                            .OnValueChanged("onPeriodChanged"))
                    </div>

                </div>
                <div class="row">
                    <div class="col-lg-3 form-group" id="datepickday">
                        <label>Periode@*<span class="mandatory">*</span>*@</label>
                        @(Html.DevExtreme().DateBox()
                            .ID("DatepickdID")
                            .Type(DateBoxType.Date)
                            .DisplayFormat("dd/MM/yyyy")
                            .Width("100%"))
                    </div>
                    <div class="col-lg-3 form-group" id="datepickmonth">
                        <label>Periode@*<span class="mandatory">*</span>*@</label>
                        @(Html.DevExtreme().DateBox()
                            .ID("datePickM")
                            .Type(DateBoxType.Date)
                            .DisplayFormat("monthAndYear")
                            .CalendarOptions(c => c
                            .MaxZoomLevel(CalendarZoomLevel.Year)
                            .MinZoomLevel(CalendarZoomLevel.Century))
                            .Width("100%"))
                    </div>
                    <div class="col-lg-3 form-group" id="starttime">
                        <label>Start Time@*<span class="mandatory">*</span>*@</label>
                        @(Html.DevExtreme().SelectBox()
                            .ID("StartTime")
                            .DataSource(Enumerable.Range(9, 9).Select(h => new { Value = h.ToString("D2") + ":00", Text = h.ToString("D2") + ":00" }))
                            .ValueExpr("Value")
                            .DisplayExpr("Text")
                            .SearchEnabled(true)
                            .Width("100%"))

                    </div>
                    <div class="col-lg-3 form-group" id="endtime">
                        <label>End Time@*<span class="mandatory">*</span>*@</label>
                        @(Html.DevExtreme().SelectBox()
                            .ID("EndTime")
                            .DataSource(Enumerable.Range(9, 9).Select(h => new { Value = h.ToString("D2") + ":00", Text = h.ToString("D2") + ":00" }))
                            .ValueExpr("Value")
                            .DisplayExpr("Text")
                            .SearchEnabled(true)
                            .Width("100%"))

                    </div>
                    <div class="col-lg-3 form-group" id="startdate">
                        <label>Start Date@*<span class="mandatory">*</span>*@</label>
                        @(Html.DevExtreme().DateBox()
                            .ID("StartDateID")
                            .Type(DateBoxType.Date)
                            .DisplayFormat("dd/MM/yyyy")
                            .Width("100%"))
                    </div>
                    <div class="col-lg-3 form-group" id="enddate">
                        <label>End Date@*<span class="mandatory">*</span>*@</label>
                        @(Html.DevExtreme().DateBox()
                            .ID("EndDateID")
                            .Type(DateBoxType.Date)
                            .DisplayFormat("dd/MM/yyyy")
                            .Width("100%"))
                    </div>
                    <div class="col-lg-3 form-group">
                        <label>Confirmation@*<span class="mandatory">*</span>*@</label>
                        @(Html.DevExtreme().TagBox()
                            .ID("Confirmationid")
                            .DataSource(new[] { "True", "False" })
                            .ShowSelectionControls(true)
                            .MaxDisplayedTags(3)
                            .SearchEnabled(true)
                            .OnSelectionChanged("onSelectionChanged")
                            .Width("100%"))
                    </div>
                    <div class="col-lg-3 form-group">
                        <label>Lokal/Asing@*<span class="mandatory">*</span>*@</label>
                        @(Html.DevExtreme().TagBox()
                            .ID("LokalAsingid")
                            .DataSource(new[] { "Lokal", "Asing" })
                            .ShowSelectionControls(true)
                            .MaxDisplayedTags(3)
                            .SearchEnabled(true)
                            .OnSelectionChanged("onSelectionChanged")
                            .Width("100%"))
                    </div>
                    <div class="col-lg-3 form-group">
                        <label>Domestik/Foreign@*<span class="mandatory">*</span>*@</label>
                        @(Html.DevExtreme().TagBox()
                            .ID("DomestikForeignid")
                            .DataSource(new[] { "Domestik", "Foreign" })
                            .ShowSelectionControls(true)
                            .MaxDisplayedTags(3)
                            .SearchEnabled(true)
                            .OnSelectionChanged("onSelectionChanged")
                            .Width("100%"))
                    </div>
                    <div class="col-lg-3 form-group" id="endtime">
                        <label>Country Investor@*<span class="mandatory">*</span>*@</label>
                        @(Html.DevExtreme().TagBox()
                            .ID("CountryInvestorid")
                            .DataSource(new[] {
                                    "Indonesia",
                                    "Philippines",
                                    "Singapore",
                                    "Japan",
                                    "Other",
                                    "Hong Kong",
                                    "British Virgin Islands",
                                    "Malaysia",
                                    "Australia"
                                })
                            .ShowSelectionControls(true)
                            .MaxDisplayedTags(3)
                            .SearchEnabled(true)
                            .OnSelectionChanged("onSelectionChanged")
                            .Width("100%"))

                    </div>
                    <div class="col-lg-3 form-group">
                        <label>Type Investor@*<span class="mandatory">*</span>*@</label>
                        @(Html.DevExtreme().TagBox()
                            .ID("TypeInvestorid")
                            .DataSource(new[] { "IB", "OT", "PF", "ID", "SC", "FD", "CP", "IS" })
                            .ShowSelectionControls(true)
                            .MaxDisplayedTags(3)
                            .SearchEnabled(true)
                            .OnSelectionChanged("onSelectionChanged")
                            .Width("100%"))
                    </div>
                  
                    <div class="col-lg-3 form-group">
                        <label>AB Code@*<span class="mandatory">*</span>*@</label>
                        @(Html.DevExtreme().TagBox()
                            .ID("ABcodeid")
                            .DataSource(new[] {
                                    "NI", "MK", "IU", "DR", "PD", "MI", "SS", "MU", "IF", "AI", "OK", "II",
                                    "EP", "BQ", "PS", "KI", "YU", "SQ", "RS", "BF", "LG", "GA", "LS", "IN",
                                    "BZ", "IH", "FS", "XA", "GR", "EL", "AT", "CC", "PC", "AR", "PK", "FZ",
                                    "RB", "BS", "OD", "DH", "YP", "ID", "TP", "TX", "YB", "HP", "AO", "RO",
                                    "ES", "RG", "IP", "XC", "CP", "ZR", "SH", "HD", "PO", "CD", "AN", "YJ",
                                    "DP", "MG", "IT", "SA", "AG", "AD", "DX", "KS", "TF", "PG", "KK", "ZP",
                                    "LH", "AP", "AZ", "RF"
                                })
                            .ShowSelectionControls(true)
                            .MaxDisplayedTags(3)
                            .SearchEnabled(true)
                            .OnSelectionChanged("onSelectionChanged")
                            .Width("100%"))
                    </div>
                    <div class="col-lg-3 form-group">
                        <label>Market@*<span class="mandatory">*</span>*@</label>
                        @(Html.DevExtreme().TagBox()
                            .ID("Marketid")
                            .DataSource(new[] { "TN", "NG", "RG" })
                            .ShowSelectionControls(true)
                            .MaxDisplayedTags(3)
                            .SearchEnabled(true)
                            .OnSelectionChanged("onSelectionChanged")
                            .Width("100%"))
                    </div>


                    <div class="col-lg-3 form-group" id="topDiv">
                        <label>Top@*<span class="mandatory">*</span>*@</label>
                        @(Html.DevExtreme().SelectBox()
                            .ID("itemsPerPage")
                            .DataSource(new[] { "10", "25", "50", "100", "150", "200", "All" })
                            .ValueExpr("this")
                            .DisplayExpr("this")
                            .Width("100%"))
                    </div>

                </div>
                <div class="float-left">
                    @(Html.DevExtreme().Button()
                        .ID("Filter")
                        .Type(ButtonType.Default)
                        .Text("Tampilkan")
                        .OnClick("onButtonFilterClicked")
                        .ValidationGroup("Filter"))
                </div>

       
            </div>
        </div>
    </div>
    <div class="row">
     @*<div class="card-body">
            @(Html.DevExtreme().DataGrid()
                .ID("gridValidasiData")
                .DataSource(d => d.Mvc()
                .Controller("MarketDriven") // Targets the correct controller
                .LoadAction("GetMarketData") // Calls the new data action
                .Area("BDAPM")
                .LoadParams(new { selectedDate = new JS("getFilterDate") })
                )
                .RemoteOperations(false) // Set to false as data is loaded into a list first
                .Paging(p => p.PageSize(20))
                .Pager(p =>
                {
                    p.ShowPageSizeSelector(true);
                    p.AllowedPageSizes(new[] { 10, 20, 50 });
                    p.ShowInfo(true);
                })
                .FilterRow(f => f.Visible(true))
                .HeaderFilter(h => h.Visible(true))
                .ColumnAutoWidth(true)
                .AllowColumnResizing(true)
                .ShowBorders(true)
                .Scrolling(s => s.Mode(GridScrollingMode.Standard))
                .Columns(columns =>
                {
                    columns.Add()
                    .DataField("TransactionDates")
                    .Caption("Transaction Date");

                    columns.Add()
                    .DataField("sid_ori")
                    .Caption("SID");

                    columns.Add()
                    .DataField("cpinvestorcode")
                    .Caption("SID Name");

                    columns.Add()
                    .DataField("investorcode")
                    .Caption("Investor Code");

                    columns.Add()
                    .DataField("securitycode")
                    .Caption("Security Code");

                    columns.Add()
                    .DataField("value")
                    .Caption("Value");

                    columns.Add()
                    .DataField("quantity")
                    .Caption("Quantity");
                })
                )
    </div>*@
    </div> 
    <div class="card-body">
        @(Html.DevExtreme().PivotGrid()
            .ID("pivotgrid")
            .ShowRowGrandTotals(false)
            .ShowRowTotals(false)
            .AllowSortingBySummary(true)
            .AllowSorting(true)
            .AllowFiltering(true)
            .Scrolling(s => s.Mode(PivotGridScrollingMode.Virtual))
            .Height(800)
            .ShowBorders(true)
            .FieldPanel(p => p
                .ShowRowFields(true)
                .Visible(true)
                )
            .DataSource(d => d
             .Store(s => s.Mvc() // Create a Store and use .Mvc() on the Store builder
             .Controller("MarketDriven")
             .LoadAction("GetMarketData")
             .Area("BDAPM")
            // 2. Define fields that match your data source
            .Fields(f =>
            {
                f.Add()
                .Caption("Transaction Date")
                .DataField("tradedatesk") // Corrected field name
                .Expanded(true)
                .Width(200)
                .Area(PivotGridArea.Row);

                f.Add()
                .Caption("SID")
                .DataField("sid_ori") // Corrected field name
                .Expanded(true)
                .Width(200)
                .Area(PivotGridArea.Row);

                f.Add()
                .Caption("SID Name")
                .DataField("cpinvestorcode") // Corrected field name
                .Width(200)
                .Expanded(true)
                .Area(PivotGridArea.Row);

                f.Add()
                .Caption("Investor Code")
                .DataField("investorcode") // Corrected field name
                .Width(200)
                .Expanded(true)
                .Area(PivotGridArea.Row);

                f.Add()
                .Caption("Security Code")
                .DataField("securitycode") // Corrected field name
                .Width(200)
                .Expanded(true)
                .Area(PivotGridArea.Row);

                f.Add()
                .Caption("Quantity")
                .DataField("quantity") // This field name was correct
                .Width(50)
                .SummaryType(SummaryType.Sum).Format("#,##0")
                .Area(PivotGridArea.Data);

                f.Add()
                .Caption("Value")
                .DataField("value") // This field name was correct
                .Width(50)
                .SummaryType(SummaryType.Sum).Format("#,##0")
                .Area(PivotGridArea.Data);
            })
            )
            )
    </div>

   
    <!-- The Modal  Detail-->
    <div class="modal fade" id="ModalSimpanPenggunaanData" tabindex="-1" role="document" aria-hidden="true" data-backdrop="static" data-keyboard="false">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header" style="background-color:#0066b2">
                    <h4 class="modal-title" style="text-align:left">
                        <font color="white">Pilih Penggunaan Data</font>
                    </h4>
                </div><!--Modal Header-->
                <!-- Modal body -->
                <div class="modal-body">
                    <form id="StrukturFormDetail" method="POST" action="" class="form-horizontal row-border">
                        <div class="row" style="padding: 0 10px 0 10px;">
                            @(Html.DevExtreme().SelectBox()
                                .ID("penggunaandataid")
                                .DataSource(d => d.Mvc()
                                .Controller("PenggunaanData")
                                .Area("Website")
                                .LoadAction("GetPenggunaanData")
                                .Key("value"))
                                .ValueExpr("value")
                                .DisplayExpr("text")
                                .SearchEnabled(true)
                                .Width("100%")
                                )
                        </div>
                    </form>
                </div>
                <!-- Modal footer -->
                <div class="modal-footer">
                    <button type="button" id="btnSavePenggunaanData" class="btn btn-primary" data-bs-dismiss="modal"><i class='fa fa-save'></i> Save</button>
                </div>
            </div>
        </div>
    </div>
    <!-- The Modal  Detail-->
}



<script>
    window.jsPDF = window.jspdf.jsPDF;
    applyPlugin(window.jsPDF);
</script>

<script>
    function onButtonFilterClicked() {
        // Find the DataGrid instance
        var dataGridInstance = $("#gridValidasiData").data("dxDataGrid");
        // If it exists, refresh it
        if (dataGridInstance) {
            dataGridInstance.refresh();
        }

        // Find the PivotGrid instance
        var pivotGridInstance = $("#pivotgrid").data("dxPivotGrid");
        // If it exists, reload its data source
        if (pivotGridInstance) {
            pivotGridInstance.getDataSource().reload();
        }
    }

    function getFilterDate() {
        var dateBox = $("#DatepickdID").dxDateBox("instance");
        var dateValue = dateBox.option("value");

        console.log("Original DateBox Value:", dateValue);

        if (!dateValue) {
            return null;
        }

        // Format the date directly to 'yyyymmdd'
        var year = dateValue.getFullYear();
        var month = ('0' + (dateValue.getMonth() + 1)).slice(-2);
        var day = ('0' + dateValue.getDate()).slice(-2);

        // This now creates the yyyymmdd string directly
        var formattedString = year + month + day;

        console.log("Formatted String Sent to Server:", formattedString);

        return formattedString;
    }
</script>

<script>
    function onPeriodChanged(e) {
        const selectedValue = e.value;
        const datepickdayDiv = document.getElementById("datepickday");
        const datepickmonthDiv = document.getElementById("datepickmonth");
        const asingDiv = document.getElementById("asingDiv");
        const starttimeDiv = document.getElementById("starttime")
        const endtimeDiv = document.getElementById("endtime")
        const startdateDiv = document.getElementById("startdate")
        const enddateDiv = document.getElementById("enddate")

        if (selectedValue === "Daily") {
            starttimeDiv.style.display = "block";
            endtimeDiv.style.display = "block";
            datepickdayDiv.style.display = "block";
            datepickmonthDiv.style.display = "none";
            startdateDiv.style.display = "none";
            enddateDiv.style.display = "none";

        } else if (selectedValue === "Monthly") {
            datepickmonthDiv.style.display = "block";
            starttimeDiv.style.display = "none";
            endtimeDiv.style.display = "none";
            datepickdayDiv.style.display = "none";
            startdateDiv.style.display = "none";
            enddateDiv.style.display = "none";
        } else {
            starttimeDiv.style.display = "none";
            endtimeDiv.style.display = "none";
            datepickdayDiv.style.display = "none";
            datepickmonthDiv.style.display = "none";
            startdateDiv.style.display = "block";
            enddateDiv.style.display = "block";
        }
    }

    $(document).ready(function () {
        // Hide the confirmation and asing divs initially
        document.getElementById("starttime").style.display = "none";
        document.getElementById("endtime").style.display = "none";
        document.getElementById("datepickday").style.display = "none";
        document.getElementById("datepickmonth").style.display = "none";
        document.getElementById("startdate").style.display = "none";
        document.getElementById("enddate").style.display = "none";
    });

    $(function () {
        const startDate = $("#PeriodeAwal").dxDateBox({
            onValueChanged: function (e) {
                endDate.option("min", e.value);
            }
        }).dxDateBox("instance");

        $("#PeriodeAwal").dxValidator({
            validationGroup: "Filter",
            validationRules: [{ type: "required", message: "[Tanggal] harus dipilih" }]
        })
    });

    $(function () {
        $("#penggunaandataid").dxValidator({
            validationGroup: "Filter",
            validationRules: [{ type: "required", message: "[Penggunaan Data] harus dipilih" }]
        })
    });


    $(window).on('load', function () {
        $("#ModalSimpanPenggunaanData").modal("show");
    });

    $("#btnSavePenggunaanData").click(function () {
        let penggunaandataid = $("#penggunaandataid").dxSelectBox("instance").option("value");

        if (penggunaandataid == null) {
            alert("Silahkan Pilih Tujuan Penggunaan Data");
            return false;
        } else {
            $.ajax({
                url: '@Url.Action("SimpanPenggunaanDataVDT", "MarketDriven")',
                data: { id: penggunaandataid },
                dataType: "json",
                type: "POST",
                success: function (data) {
                    if (data.success == true) {
                        //alert(data.message);
                         @* waitingDialog.hide(); *@
                            $('#ModalSimpanPenggunaanData').modal('hide');
                        return "Saving Success !";
                    }
                    else if (data.success == false) {
            @*  waitingDialog.hide(); *@
            alert(data.message);
                $('#ModalSimpanPenggunaanData').modal('hide');
            return "Saving Failed !";
        }
    }
            });
        }
    });

   

    function onSelectionChanged(e) {
        if (e.addedItems.length > 0) {
            e.component.field().val(""); // Clears the search text. However, search filter is only applied to the widget after focus is lost in the input element
        }
    }

   
        function onButtonFilterClicked() {
            $("#gridValidasiData").dxDataGrid("instance").refresh();
            $("#pivotgrid").dxPivotGrid("instance").getDataSource().reload();
        }

        function getFilterDate() {
            var dateBox = $("#DatepickdID").dxDateBox("instance");
            var dateValue = dateBox.option("value");

            console.log("Original DateBox Value:", dateValue);

            if (!dateValue) {
                return null;
            }

            // Format the date directly to 'yyyymmdd'
            var year = dateValue.getFullYear();
            var month = ('0' + (dateValue.getMonth() + 1)).slice(-2);
            var day = ('0' + dateValue.getDate()).slice(-2);

            // This now creates the yyyymmdd string directly
            var formattedString = year + month + day;

            console.log("Formatted String Sent to Server:", formattedString);

            return formattedString;
        }
  

    function onGridBeforeSend(method, ajaxOptions) {
        let namaPE = $("#namaPEid").dxSelectBox("instance").option("value");
        let tempPeriodeAwal = $("#PeriodeAwal").dxDateBox("instance").option("value");
        let status = $("#Statusid").dxTagBox("instance").option("value");

        let periodeAwal = null;
        if (tempPeriodeAwal != null) {
            periodeAwal = tempPeriodeAwal.getFullYear() + '-' + (tempPeriodeAwal.getMonth() + 1) + '-' + tempPeriodeAwal.getDate();
        }
        ajaxOptions.data.namaPE = JSON.stringify(namaPE);
        ajaxOptions.data.periodeAwal = periodeAwal;
        ajaxOptions.data.status = JSON.stringify(status);
    }

    function onLJKOpened(e) {
        e.component.content().find('.dx-list-select-all').hide();
    }

   
    var waitingDialog = (function ($) {

        // Creating modal dialog's DOM
        var $dialog = $(
    '<div class="modal fade" data-backdrop="static" data-keyboard="false" tabindex="-1" role="dialog" aria-hidden="true" style="padding-top:15%; overflow-y:visible;">' +
    '<div class="modal-dialog modal-m">' +
    '<div class="modal-content">' +
    '<div class="modal-header"><h3 style="margin:0;"></h3></div>' +
    '<div class="modal-body">' +
    '<div class="progress progress-striped active" style="margin-bottom:0;"><div class="progress-bar" style="width: 100%"></div></div>' +
    '</div>' +
    '</div></div></div>');

        return {
            show: function (message, options) {
                // Assigning defaults
                var settings = $.extend({
                    dialogSize: 'm',
            progressType: ''
        }, options);
                if (typeof message === 'undefined') {
    message = 'Loading';
                }
                if (typeof options === 'undefined') {
    options = {};
                }
        // Configuring dialog
        $dialog.find('.modal-dialog').attr('class', 'modal-dialog').addClass('modal-' + settings.dialogSize);
        $dialog.find('.progress-bar').attr('class', 'progress-bar');
                if (settings.progressType) {
            $dialog.find('.progress-bar').addClass('progress-bar-' + settings.progressType);
                }
        $dialog.find('h3').text(message);
        // Opening dialog
        $dialog.modal();
            },
    /**
        * Closes dialog
        */
    hide: function () {
        $dialog.modal('hide');
            }
        }
    })(jQuery);

</script>

<style type="text/css">
    .mandatory {
        color: red;
    }
</style>


