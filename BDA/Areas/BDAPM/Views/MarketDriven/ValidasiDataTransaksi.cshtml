@using DevExtreme.AspNet.Mvc
@{
    Layout = "~/Views/Shared/_LayoutMainMetronic.cshtml";
    string reportId = "Validasi Data Transaksi";
    var p = (string[])ViewBag.period;
    var maxItems = db.GetSetting("LimitFilterLJK");
}

@inject BDA.DataModel.DataEntities db

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="card card-default">
        <div class="row filter-panel" style="padding-top:0px;">
            <div class="card-body">
                <h1>Validasi Data Transaksi</h1>
                <div class="row">
                    <div class="col-lg-3 form-group">
                        <label>Jenis Periode<span class="mandatory">*</span></label>
                        @(Html.DevExtreme().SelectBox()
                            .ID("Periodid")
                            .DataSource(new[] { "Daily", "Monthly", "Custom Date" })
                            .Width("100%")
                            .OnValueChanged("onPeriodChanged"))
                    </div>
                </div>

                <div class="row">
                    <div class="col-lg-3 form-group" id="datepickday">
                        <label>Periode</label>
                        @(Html.DevExtreme().DateBox()
                            .ID("DatepickdID")
                            .Type(DateBoxType.Date)
                            .DisplayFormat("dd/MM/yyyy")
                            .Width("100%"))
                    </div>
                    <div class="col-lg-3 form-group" id="datepickmonth">
                        <label>Periode</label>
                        @(Html.DevExtreme().DateBox()
                            .ID("datePickM")
                            .Type(DateBoxType.Date)
                            .DisplayFormat("monthAndYear")
                            .CalendarOptions(c => c
                            .MaxZoomLevel(CalendarZoomLevel.Year)
                            .MinZoomLevel(CalendarZoomLevel.Century))
                            .Width("100%"))
                    </div>
                    <div class="col-lg-3 form-group" id="starttime">
                        <label>Start Time</label>
                        @(Html.DevExtreme().SelectBox()
                            .ID("StartTime")
                            .DataSource(Enumerable.Range(9, 9).Select(h => new { Value = h.ToString("D2") + ":00", Text = h.ToString("D2") + ":00" }))
                            .ValueExpr("Value")
                            .DisplayExpr("Text")
                            .SearchEnabled(true)
                            .Width("100%"))
                    </div>
                    <div class="col-lg-3 form-group" id="endtime">
                        <label>End Time</label>
                        @(Html.DevExtreme().SelectBox()
                            .ID("EndTime")
                            .DataSource(Enumerable.Range(9, 9).Select(h => new { Value = h.ToString("D2") + ":00", Text = h.ToString("D2") + ":00" }))
                            .ValueExpr("Value")
                            .DisplayExpr("Text")
                            .SearchEnabled(true)
                            .Width("100%"))
                    </div>
                    <div class="col-lg-3 form-group" id="startdate">
                        <label>Start Date</label>
                        @(Html.DevExtreme().DateBox()
                            .ID("StartDateID")
                            .Type(DateBoxType.Date)
                            .DisplayFormat("dd/MM/yyyy")
                            .Value(DateTime.Now)
                            .Max(DateTime.Now)
                            .Width("100%"))
                    </div>
                    <div class="col-lg-3 form-group" id="enddate">
                        <label>End Date</label>
                        @(Html.DevExtreme().DateBox()
                            .ID("EndDateID")
                            .Type(DateBoxType.Date)
                            .DisplayFormat("dd/MM/yyyy")
                            .Value(DateTime.Now)
                            .Min(DateTime.Now)
                            .Width("100%"))
                    </div>

                    <div class="col-lg-3 form-group">
                        <label>Confirmation</label>
                        @(Html.DevExtreme().TagBox()
                            .ID("Confirmationid")
                            .DataSource(new[] {
                    new { Value = "B", Text = "Buy" },
                    new { Value = "S", Text = "Sell" }
                    })
                            .ValueExpr("Value")
                            .DisplayExpr("Text")
                            .ShowSelectionControls(true)
                            .MaxDisplayedTags(3)
                            .SearchEnabled(true)
                            .OnSelectionChanged("onSelectionChanged")
                            .Width("100%"))
                    </div>
                    <div class="col-lg-3 form-group">
                        <label>Lokal/Asing</label>
                        @(Html.DevExtreme().TagBox()
                            .ID("LokalAsingid")
                            .DataSource(new[] {
                    new { Value = "L", Text = "Lokal" },
                    new { Value = "A", Text = "Asing" }
                    })
                            .ValueExpr("Value")
                            .DisplayExpr("Text")
                            .ShowSelectionControls(true)
                            .MaxDisplayedTags(3)
                            .SearchEnabled(true)
                            .OnSelectionChanged("onSelectionChanged")
                            .Width("100%"))
                    </div>
                    <div class="col-lg-3 form-group">
                        <label>Domestik/Foreign</label>
                        @(Html.DevExtreme().TagBox()
                            .ID("DomestikForeignid")
                            .DataSource(new[] { "Domestik", "Foreign" })
                            .ShowSelectionControls(true)
                            .MaxDisplayedTags(3)
                            .SearchEnabled(true)
                            .OnSelectionChanged("onSelectionChanged")
                            .Width("100%"))
                    </div>
                    <div class="col-lg-3 form-group" id="countryInvestorDiv">
                        <label>Country Investor</label>
                        @(Html.DevExtreme().TagBox()
                            .ID("CountryInvestorid")
                            .DataSource(new[] {
                    "Indonesia","Philippines","Singapore","Japan","Other",
                    "Hong Kong","British Virgin Islands","Malaysia","Australia"
                    })
                            .ValueExpr("this")
                            .DisplayExpr("this")
                            .ShowSelectionControls(true)
                            .MaxDisplayedTags(3)
                            .SearchEnabled(true)
                            .OnSelectionChanged("onSelectionChanged")
                            .Width("100%"))
                    </div>
                    <div class="col-lg-3 form-group">
                        <label>Type Investor</label>
                        @(Html.DevExtreme().TagBox()
                        .ID("TypeInvestorid")
                        .DataSource(new[] { "IB", "OT", "PF", "ID", "SC", "FD", "CP", "IS" })
                        .ValueExpr("this")
                        .DisplayExpr("this")
                        .ShowSelectionControls(true)
                        .MaxDisplayedTags(3)
                        .SearchEnabled(true)
                        .OnSelectionChanged("onSelectionChanged")
                        .Width("100%"))
                    </div>

                    <div class="col-lg-3 form-group">
                        <label>AB Code</label>
                        @(Html.DevExtreme().TagBox()
                            .ID("ABcodeid")
                            .DataSource(new[] {
                    "NI","MK","IU","DR","PD","MI","SS","MU","IF","AI","OK","II",
                    "EP","BQ","PS","KI","YU","SQ","RS","BF","LG","GA","LS","IN",
                    "BZ","IH","FS","XA","GR","EL","AT","CC","PC","AR","PK","FZ",
                    "RB","BS","OD","DH","YP","ID","TP","TX","YB","HP","AO","RO",
                    "ES","RG","IP","XC","CP","ZR","SH","HD","PO","CD","AN","YJ",
                    "DP","MG","IT","SA","AG","AD","DX","KS","TF","PG","KK","ZP",
                    "LH","AP","AZ","RF"
                    })
                            .ValueExpr("this")
                            .DisplayExpr("this")
                            .ShowSelectionControls(true)
                            .MaxDisplayedTags(3)
                            .SearchEnabled(true)
                            .OnSelectionChanged("onSelectionChanged")
                            .Width("100%"))

                    </div>
                    <div class="col-lg-3 form-group">
                        <label>Market</label>
                        @(Html.DevExtreme().TagBox()
                            .ID("Marketid")
                            .DataSource(new[] { "TN", "NG", "RG" })
                            .ValueExpr("this")
                            .DisplayExpr("this")
                            .ShowSelectionControls(true)
                            .MaxDisplayedTags(3)
                            .SearchEnabled(true)
                            .OnSelectionChanged("onSelectionChanged")
                            .Width("100%"))
                    </div>

                    <div class="col-lg-3 form-group" id="topDiv">
                        <label>Top</label>
                        @(Html.DevExtreme().SelectBox()
                            .ID("itemsPerPage")
                            .DataSource(new[] {
                    new { Value = 10, Text = "10" },
                    new { Value = 25, Text = "25" },
                    new { Value = 50, Text = "50" },
                    new { Value = 100, Text = "100" },
                    new { Value = 150, Text = "150" },
                    new { Value = 200, Text = "200" },
                    new { Value = 0, Text = "All" }
                    })
                            .ValueExpr("Value")
                            .DisplayExpr("Text")
                            .Value(10)
                            .Width("100%"))
                    </div>
                </div>

                <div class="float-left">
                    @(Html.DevExtreme().Button()
                        .ID("Filter")
                        .Type(ButtonType.Default)
                        .Text("Tampilkan")
                        .OnClick("onButtonFilterClicked")
                        .ValidationGroup("Filter"))
                </div>
            </div>
        </div>
    </div>

    

    <div class="card-body">
        @* Export toolbar (top-right) *@
        <div class="d-flex justify-content-end align-items-center mb-2" style="gap:8px;">
            @(Html.DevExtreme().Button()
                .ID("btnExportExcel")
                .Type(ButtonType.Success)
                .Icon("exportxlsx")
                .Text("Export Excel")
                .OnClick("exportPivotToExcel")
                )
            @(Html.DevExtreme().Button()
                .ID("btnExportPDF")
                .Type(ButtonType.Danger)
                .Icon("exportpdf")
                .Text("Export PDF")
                .OnClick("exportPivotToPDF")
                )
        </div>


        @(Html.DevExtreme().PivotGrid()
            .ID("pivotgrid")
            .ShowRowGrandTotals(false)
            .ShowRowTotals(false)
            .AllowSortingBySummary(true)
            .AllowSorting(true)
            .AllowFiltering(true)
            .Scrolling(s => s.Mode(PivotGridScrollingMode.Virtual))
            .Height(800)
            .ShowBorders(true)
            .FieldPanel(p => p
            .ShowRowFields(true)
            .ShowFilterFields(false)
            .AllowFieldDragging(false)
            .Visible(true)
            )
            .DataSource(d => d
            .Store(s => s.Mvc()
            .Controller("MarketDriven")
            .LoadAction("GetMarketData")
            .Area("BDAPM")

            // IMPORTANT: Force GET so it hits the [HttpGet] action
            .LoadMethod("GET")

            // IMPORTANT: Attach all filter params into the request
            .OnBeforeSend("dxBeforeSendAddFilters")
            )
            .Fields(f =>
            {
                f.Add().Caption("Transaction Date").DataField("TransactionDates").Expanded(true).Area(PivotGridArea.Row);
                f.Add().Caption("SID").DataField("sid_ori").Expanded(true).Area(PivotGridArea.Row);
                f.Add().Caption("SID Name").DataField("cpinvestorcode").Expanded(true).Area(PivotGridArea.Row);
                f.Add().Caption("Investor Code").DataField("investorcode").Expanded(true).Area(PivotGridArea.Row);
                f.Add().Caption("Security Code").DataField("securitycode").Expanded(true).Area(PivotGridArea.Row);
                f.Add().Caption("Quantity").DataField("quantity").SummaryType(SummaryType.Sum).Format("#,##0").Area(PivotGridArea.Data);
                f.Add().Caption("Value").DataField("value").SummaryType(SummaryType.Sum).Format("#,##0").Area(PivotGridArea.Data);
            })
            )
            )
    </div>

    <!-- The Modal  Detail-->
    <div class="modal fade" id="ModalSimpanPenggunaanData" tabindex="-1" role="document" aria-hidden="true" data-backdrop="static" data-keyboard="false">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header" style="background-color:#0066b2">
                    <h4 class="modal-title" style="text-align:left">
                        <font color="white">Pilih Penggunaan Data</font>
                    </h4>
                </div>
                <div class="modal-body">
                    <form id="StrukturFormDetail" method="POST" action="" class="form-horizontal row-border">
                        <div class="row" style="padding: 0 10px 0 10px;">
                            @(Html.DevExtreme().SelectBox()
                                .ID("penggunaandataid")
                                .DataSource(d => d.Mvc()
                                .Controller("PenggunaanData")
                                .Area("Website")
                                .LoadAction("GetPenggunaanData")
                                .Key("value"))
                                .ValueExpr("value")
                                .DisplayExpr("text")
                                .SearchEnabled(true)
                                .Width("100%")
                                )
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" id="btnSavePenggunaanData" class="btn btn-primary" data-bs-dismiss="modal"><i class='fa fa-save'></i> Save</button>
                </div>
            </div>
        </div>
    </div>
}

<script>
    // DevExtreme PDF utils already present in your file
    window.jsPDF = window.jspdf.jsPDF;
    applyPlugin(window.jsPDF);

    function pad2(n) { return ('0' + n).slice(-2); }
    function formatDateToYYYYMMDD(dateObj) {
        if (!dateObj) return null;
        return '' + dateObj.getFullYear() + pad2(dateObj.getMonth() + 1) + pad2(dateObj.getDate());
    }
    function formatMonthToYYYYMM(dateObj) {
        if (!dateObj) return null;
        return '' + dateObj.getFullYear() + pad2(dateObj.getMonth() + 1);
    }

    function getFilterParams() {
        var periodType = $("#Periodid").dxSelectBox("instance")?.option("value") || null;

        var dailyDate = $("#DatepickdID").dxDateBox("instance")?.option("value") || null;
        var monthlyDate = $("#datePickM").dxDateBox("instance")?.option("value") || null;
        var startDate = $("#StartDateID").dxDateBox("instance")?.option("value") || null;
        var endDate = $("#EndDateID").dxDateBox("instance")?.option("value") || null;

        var params = {
            periodType: periodType,
            selectedDate: dailyDate ? formatDateToYYYYMMDD(dailyDate) : null,
            selectedMonth: monthlyDate ? formatMonthToYYYYMM(monthlyDate) : null,
            startDate: startDate ? formatDateToYYYYMMDD(startDate) : null,
            endDate: endDate ? formatDateToYYYYMMDD(endDate) : null,
            startTime: $("#StartTime").dxSelectBox("instance")?.option("value") || null,
            endTime: $("#EndTime").dxSelectBox("instance")?.option("value") || null,
            confirmation: $("#Confirmationid").dxTagBox("instance")?.option("value") || [],
            lokalAsing: $("#LokalAsingid").dxTagBox("instance")?.option("value") || [],
            countryInvestor: $("#CountryInvestorid").dxTagBox("instance")?.option("value") || [],
            typeInvestor: $("#TypeInvestorid").dxTagBox("instance")?.option("value") || [],
            market: $("#Marketid").dxTagBox("instance")?.option("value") || [],
            abCodes: $("#ABcodeid").dxTagBox("instance")?.option("value") || [],
            topN: $("#itemsPerPage").dxSelectBox("instance")?.option("value") ?? 10,
            _ts: Date.now() // prevent caching
        };

        console.log("[getFilterParams] Built params:", params);
        return params;
    }

    // IMPORTANT: attach params on every load + prevent caching + proper array serialization
    function dxBeforeSendAddFilters(method, ajaxOptions) {
        var p = getFilterParams();

        // Make jQuery serialize arrays as key=val1&key=val2 (no [] suffix)
        ajaxOptions.traditional = true;
        ajaxOptions.cache = false;

        // Merge our params into outgoing request
        ajaxOptions.data = ajaxOptions.data || {};
        Object.assign(ajaxOptions.data, p);

        // Ensure GET to match controller signature
        ajaxOptions.method = "GET";

        console.log("[dxBeforeSendAddFilters] method:", method, " url:", ajaxOptions.url, " data:", ajaxOptions.data);
    }

    // 1) Refresh parameters every click: reload the pivot grid data source so OnBeforeSend runs and sends current params
    function onButtonFilterClicked() {
        var pivotGridInstance = $("#pivotgrid").data("dxPivotGrid");
        if (pivotGridInstance) {
            console.log("[onButtonFilterClicked] Reloading pivot with params:", getFilterParams());
            // Force a new load so OnBeforeSend picks up latest values
            pivotGridInstance.getDataSource().reload();
        }
    }

    // 1) FIXED Excel Export - Add proper headers
    async function exportPivotToExcel() {
        try {
            var pivotGrid = $("#pivotgrid").dxPivotGrid("instance");
            if (!pivotGrid) return;

            var workbook = new ExcelJS.Workbook();
            var worksheet = workbook.addWorksheet("Validasi Data Transaksi");

            // Add title and headers manually
            worksheet.mergeCells('A1:G1');
            worksheet.getCell('A1').value = 'VALIDASI DATA TRANSAKSI';
            worksheet.getCell('A1').font = { bold: true, size: 14 };
            worksheet.getCell('A1').alignment = { horizontal: 'center' };

            

            // Add column headers in row 2
            var headers = [
                'Transaction Date',
                'SID',
                'SID Name',
                'Investor Code',
                'Security Code',
                'Quantity',
                'Value'
 
            ];

            headers.forEach((header, index) => {
                var cell = worksheet.getCell(2, index + 1);
                cell.value = header;
                cell.font = { bold: true };
                cell.fill = {
                    type: 'pattern',
                    pattern: 'solid',
                    fgColor: { argb: 'FFE0E0E0' }
                };
            });

            await DevExpress.excelExporter.exportPivotGrid({
                component: pivotGrid,
                worksheet: worksheet,
                topLeftCell: 'A3',
                customizeCell: function (options) {
                    // Check if the cell is part of the pivot grid's column header area
                    if (options.pivotCell && options.pivotCell.area === 'column') {
                        // Set the cell's value to null to hide the column header content
                        options.excelCell.value = null;
                        return; // Exit for this cell, no further processing needed
                    }

                    // Your existing logic for formatting numeric data cells
                    if (options.pivotCell && options.pivotCell.dataType === 'number') {
                        if (options.pivotCell.text && options.pivotCell.text.includes(',')) {
                            options.excelCell.numFmt = '#,##0';
                        }
                    }
                }
            });

            // Auto-fit columns
            worksheet.columns.forEach(function (column, index) {
                if (index < headers.length) {
                    var maxLength = Math.max(headers[index].length, 15);
                    column.width = maxLength;
                }
            });

            var buffer = await workbook.xlsx.writeBuffer();
            var now = new Date();
            var ts = now.getFullYear().toString()
                + pad2(now.getMonth() + 1)
                + pad2(now.getDate())
                + "_"
                + pad2(now.getHours())
                + pad2(now.getMinutes())
                + pad2(now.getSeconds());

            saveAs(new Blob([buffer], { type: "application/octet-stream" }),
                `ValidasiDataTransaksi_${ts}.xlsx`);

            DevExpress.ui.notify("Excel file exported successfully!", "success", 3000);
        } catch (e) {
            console.error("Export Excel error:", e);
            DevExpress.ui.notify("Gagal mengekspor ke Excel: " + e.message, "error", 3000);
        }
    }

    // Add this function to your existing JavaScript section
    function exportPivotToPDF() {
        try {
            // Get current filter parameters
            var params = getFilterParams();

            // Show loading indicator
            DevExpress.ui.notify("Exporting to PDF...", "info", 2000);

            // Create form data
            var formData = new FormData();
            Object.keys(params).forEach(key => {
                if (Array.isArray(params[key])) {
                    params[key].forEach(val => formData.append(key + '[]', val));
                } else if (params[key] !== null && params[key] !== undefined) {
                    formData.append(key, params[key]);
                }
            });

            // Make AJAX call to export
            fetch('@Url.Action("ExportValidasiDataTransaksiToPDF", "MarketDriven", new { Area = "BDAPM" })', {
                method: 'POST',
                body: formData,
                headers: {
                    'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                }
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Export failed');
                    }
                    return response.blob();
                })
                .then(blob => {
                    // Create download link
                    var url = window.URL.createObjectURL(blob);
                    var a = document.createElement('a');
                    a.style.display = 'none';
                    a.href = url;

                    // Generate filename
                    var now = new Date();
                    var ts = now.getFullYear().toString() +
                        pad2(now.getMonth() + 1) +
                        pad2(now.getDate()) + "_" +
                        pad2(now.getHours()) +
                        pad2(now.getMinutes()) +
                        pad2(now.getSeconds());

                    a.download = `ValidasiDataTransaksi_${ts}.pdf`;
                    document.body.appendChild(a);
                    a.click();
                    window.URL.revokeObjectURL(url);
                    document.body.removeChild(a);

                    DevExpress.ui.notify("PDF exported successfully!", "success", 3000);
                })
                .catch(error => {
                    console.error('Export error:', error);
                    DevExpress.ui.notify("Failed to export PDF: " + error.message, "error", 3000);
                });

        } catch (e) {
            console.error("Export PDF error:", e);
            DevExpress.ui.notify("Failed to export PDF: " + e.message, "error", 3000);
        }
    }
    

    // Helper function to format numbers
    function formatNumber(num) {
        if (!num) return '0';
        return Number(num).toLocaleString();
    }

  

    function onPeriodChanged(e) {
        const selectedValue = e.value;
        const datepickdayDiv = document.getElementById("datepickday");
        const datepickmonthDiv = document.getElementById("datepickmonth");
        const starttimeDiv = document.getElementById("starttime");
        const endtimeDiv = document.getElementById("endtime");
        const startdateDiv = document.getElementById("startdate");
        const enddateDiv = document.getElementById("enddate");

        // Hide all first
        datepickdayDiv.style.display = "none";
        datepickmonthDiv.style.display = "none";
        starttimeDiv.style.display = "none";
        endtimeDiv.style.display = "none";
        startdateDiv.style.display = "none";
        enddateDiv.style.display = "none";

        if (selectedValue === "Daily") {
            starttimeDiv.style.display = "block";
            endtimeDiv.style.display = "block";
            datepickdayDiv.style.display = "block";
            datepickmonthDiv.style.display = "none";
            startdateDiv.style.display = "none";
            enddateDiv.style.display = "none";
        } else if (selectedValue === "Monthly") {
            datepickmonthDiv.style.display = "block";
            starttimeDiv.style.display = "none";
            endtimeDiv.style.display = "none";
            datepickdayDiv.style.display = "none";
            startdateDiv.style.display = "none";
            enddateDiv.style.display = "none";
        } else {
            starttimeDiv.style.display = "none";
            endtimeDiv.style.display = "none";
            datepickdayDiv.style.display = "none";
            datepickmonthDiv.style.display = "none";
            startdateDiv.style.display = "block";
            enddateDiv.style.display = "block";
         
        }

        // Reset values when changing period type
        $("#DatepickdID").dxDateBox("instance").option("value", null);
        $("#datePickM").dxDateBox("instance").option("value", null);
        $("#StartTime").dxSelectBox("instance").option("value", null);
        $("#EndTime").dxSelectBox("instance").option("value", null);
        $("#StartDateID").dxDateBox("instance").option("value", null);
        $("#EndDateID").dxDateBox("instance").option("value", null);
        $("#Confirmationid").dxTagBox("instance").option("value", []);
        $("#LokalAsingid").dxTagBox("instance").option("value", []);
        $("#CountryInvestorid").dxTagBox("instance").option("value", []);
        $("#TypeInvestorid").dxTagBox("instance").option("value", []);
        $("#ABcodeid").dxTagBox("instance").option("value", []);
        $("#Marketid").dxTagBox("instance").option("value", []);
        $("#itemsPerPage").dxSelectBox("instance").option("value", 10);

        // Reset pivot grid data source
        var pivotGrid = $("#pivotgrid").dxPivotGrid("instance");
        if (pivotGrid) {
            console.log("[onPeriodChanged] Resetting pivot grid data source");
            pivotGrid.getDataSource().reload();
        }
    }

    $(document).ready(function () {
        // Hide sections initially
        document.getElementById("starttime").style.display = "none";
        document.getElementById("endtime").style.display = "none";
        document.getElementById("datepickday").style.display = "none";
        document.getElementById("datepickmonth").style.display = "none";
        document.getElementById("startdate").style.display = "none";
        document.getElementById("enddate").style.display = "none";

        // Attach valueChanged events for custom date boxes
        $("#StartDateID").dxDateBox("instance")?.option("onValueChanged", onStartDateChanged);
        $("#EndDateID").dxDateBox("instance")?.option("onValueChanged", onEndDateChanged);
    });

    function onSelectionChanged(e) {
        if (e.addedItems.length > 0) {
            e.component.field().val("");
        }
    }

    function onStartDateChanged(e) {
        // When start date is set, limit end date to >= start date
        var startDateValue = e.value;
        var endDateBox = $("#EndDateID").dxDateBox("instance");
        if (startDateValue) {
            endDateBox.option("min", startDateValue);
            // If end date is earlier, reset it
            var endDateValue = endDateBox.option("value");
            if (endDateValue && endDateValue < startDateValue) {
                endDateBox.option("value", null);
            }
        } else {
            endDateBox.option("min", null);
        }
    }

    function onEndDateChanged(e) {
        // Optionally, you can add extra validation here if needed
        var startDateValue = $("#StartDateID").dxDateBox("instance")?.option("value");
        var endDateValue = e.value;
        if (startDateValue && endDateValue && endDateValue < startDateValue) {
            // Reset end date if invalid
            $("#EndDateID").dxDateBox("instance").option("value", null);
        }
    }

    $(window).on('load', function () {
        $("#ModalSimpanPenggunaanData").modal("show");
    });

    $("#btnSavePenggunaanData").click(function () {
        let penggunaandataid = $("#penggunaandataid").dxSelectBox("instance").option("value");
        let penggunaandataText = $("#penggunaandataid").dxSelectBox("instance").option("text");
        let pageTitle = "@reportId";

        if (penggunaandataid == null) {
            alert("Silahkan Pilih Tujuan Penggunaan Data");
            return false;
        } else {
            $.ajax({
                url: '@Url.Action("SimpanPenggunaanData", "MarketDriven")',
                data: {
                    id: penggunaandataid,
                    penggunaanData: penggunaandataText,
                    reportTitle: pageTitle
                },
                dataType: "json",
                type: "POST",
                success: function (data) {
                    if (data.success == true) {
                        $('#ModalSimpanPenggunaanData').modal('hide');
                        return "Saving Success !";
                    }
                    else if (data.success == false) {
                        alert(data.message);
                        $('#ModalSimpanPenggunaanData').modal('hide');
                        return "Saving Failed !";
                    }
                }
            });
        }
    });

</script>

<style type="text/css">
    .mandatory {
        color: red;
    }
</style>