@using DevExtreme.AspNet.Mvc
@{
    Layout = "~/Views/Shared/_LayoutMainMetronic.cshtml";
    string reportId = "GeospasialInvestor";
    var p = (string[])ViewBag.period;
    bool isHive = ViewBag.Hive;
    var maxItems = db.GetSetting("LimitFilterLJK");
    string lbl1 = " ";
}

@inject BDA.DataModel.DataEntities db


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    <input type="hidden" id="province" value="" />
    <div class="card card-default">
        @*filter*@
        <div class="row filter-panel" style="padding-top:0px;">
            <div class="card-body">
                <div class="row">
                    <div class="col-lg-2 form-group">
                        <label>Tanggal<span class="mandatory">*</span></label>
                        @(Html.DevExtreme().DateBox()
                            .ID("PeriodeAwal")
                            .DisplayFormat("dd MMM yyyy")
                            .Value(DateTime.Now)
                            .Max(DateTime.Now)
                            .Width("100%"))
                    </div>

                    <div class="col-lg-2 form-group">
                        <label>Nama PE</label>
                        @(Html.DevExtreme().SelectBox()
                            .ID("namaPEid")
                            .DataSource(d => d.Mvc()
                            .Controller("GeospasialInvestor")
                            .Area("BDAPM")
                            .LoadAction("GetNamaPE")
                            .Key("value"))
                            .ValueExpr("value")
                            .DisplayExpr("text")
                            .SearchEnabled(true)
                            .Width("100%")
                            .Value(ViewBag.pe)
                            )
                    </div>

                    <div class="col-lg-2 form-group">
                        <label>Growth Type</label>
                        @(Html.DevExtreme().SelectBox()
                            .ID("growthType")
                            .DataSource(d => d.Mvc()
                            .Controller("GeospasialInvestor")
                            .Area("BDAPM")
                            .LoadAction("getGrowthType")
                            .Key("value"))
                            .ValueExpr("value")
                            .DisplayExpr("text")
                            .SearchEnabled(true)
                            .Width("100%")
                            .Value(ViewBag.growthtype)
                            )
                    </div>

                    <div class="col-lg-2 form-group">
                        <label>Dimension</label>
                        @(Html.DevExtreme().SelectBox()
                            .ID("dimension")
                            .DataSource(d => d.Mvc()
                            .Controller("GeospasialInvestor")
                            .Area("BDAPM")
                            .LoadAction("getDimension")
                            .Key("value"))
                            .ValueExpr("value")
                            .DisplayExpr("text")
                            .SearchEnabled(true)
                            .Width("100%")
                            .Value(ViewBag.dimension)
                            )
                    </div>

                    <div class="col-lg-2 form-group">
                        <label>Value</label>
                        @(Html.DevExtreme().SelectBox()
                            .ID("investorType")
                            .DataSource(d => d.Mvc()
                            .Controller("GeospasialInvestor")
                            .Area("BDAPM")
                            .LoadAction("getInvestorType")
                            .Key("value"))
                            .ValueExpr("value")
                            .DisplayExpr("text")
                            .SearchEnabled(true)
                            .Width("100%")
                            .Value(ViewBag.investorType)
                            )
                    </div>
                </div>

                <div class="float-left">
                    @(Html.DevExtreme().Button()
                        .ID("Filter")
                        .Type(ButtonType.Default)
                        .Text("Tampilkan")
                        .OnClick("onButtonFilterClicked")
                        .ValidationGroup("Filter"))
                </div>
                <div class="float-right">
                    <a class="btn btn-success font-weight-bolder btn-sm mr-2" href="javascript:ExportChart();" title="Export"><span class="image fa fa-file-pdf"></span> Export PNG </a>
                </div>

            </div>
        </div>
        @*grid*@
        <div class="row filter-panel" style="padding-top:0px;">
            <div class="card-body">
                @if (ViewBag.investorType == "Lokal")
                {
                    <div class="row">
                        <h4 class="headerTable">Growth By Maps</h4>
                    </div>
                    <div class="row">
                        <div class="col-lg-12 form-group" style="padding-right:25px;padding-left:25px">
                            @(Html.DevExtreme().VectorMap()
                                .ID("vectorMap")
                                .Bounds(new double[] { 130, 8, 110, -12 })
                                .ZoomFactor(0)
                                .Center(new double[] { 118.108637, -2.317483 })
                                .Layers(layers =>
                                {
                                    layers.Add()
                                    .DataSource(new JS("IndonesiaContinents"))
                                    .BorderWidth(1)
                                    .BorderColor("#000000")
                                    .Label(z => z.Enabled(false));

                                    layers.Add()
                                    .Name("bubbles")
                                    .DataSource(d => d.Mvc().Controller("GeospasialInvestor").LoadAction("getMaps").LoadMethod("Get").LoadParams(new
                                    {
                                        periode = new JS("function() { return $(\"#PeriodeAwal\").dxDateBox(\"instance\").option(\"value\");}"),
                                        pe = new JS("function() { return $(\"#namaPEid\").dxSelectBox(\"instance\").option(\"value\");}"),
                                        growthtype = new JS("function() { return $(\"#growthType\").dxSelectBox(\"instance\").option(\"value\");}"),
                                        dimension = new JS("function() { return $(\"#dimension\").dxSelectBox(\"instance\").option(\"value\");}"),
                                        investorType = new JS("function() { return $(\"#investorType\").dxSelectBox(\"instance\").option(\"value\");}")
                                    }))
                                    .DataSourceOptions(dso => dso.Map("vectorMap_HeatMap_dataSource_map"))
                                    .HoveredColor("blue")
                                    .BorderColor("#000000")
                                    .HoveredBorderWidth(2)
                                    .DataField("value")
                                    .Label(x => x.Enabled(true).DataField("name"))
                                    .Opacity(0.9)
                                    .Customize("vectorMap_customizeBubble");
                                })
                                .OnClick("MapClick")
                                .Tooltip(t => t
                                .Enabled(true)
                                .CustomizeTooltip("vectorMap_customizeTooltip")

                                )
                                .ControlBar(v => v.Enabled(true))
                                .PanningEnabled(true)
                                .ZoomingEnabled(true)
                                .WheelEnabled(true)
                                .LoadingIndicator(li => li.Enabled(true).Show(true).Font(f => f.Size(100)).Text("Map Loading"))
                                )
                        </div>
                    </div>
                              
                }
                <div class="row">
                    <h4 class="headerTable">Leaderboard</h4>
                </div>
                <div class="row">
                    <div class="col-lg-6 form-group" style="padding-right:25px;padding-left:25px">
                        @(
                                Html.DevExtreme().DataGrid()
                            .ID("gridLBLargest")
                            .KeyExpr("ID")
                            .RemoteOperations(true)
                            .Width("100%")
                            .AllowColumnResizing(true)
                            .ColumnFixing(c => c.Enabled(true))
                            .Scrolling(s => s.ShowScrollbar(ShowScrollbarMode.Always))
                            .ShowBorders(true)
                            .Selection(c => c.Mode(SelectionMode.Single))
                            .DataSource(d => d.Mvc().Controller("GeospasialInvestor").LoadAction("GetGridLeaderBoard").LoadMethod("Get").LoadParams(new
                            {
                                periode = new JS("function() { return $(\"#PeriodeAwal\").dxDateBox(\"instance\").option(\"value\");}"),
                                pe = new JS("function() { return $(\"#namaPEid\").dxSelectBox(\"instance\").option(\"value\");}"),
                                growthtype = new JS("function() { return $(\"#growthType\").dxSelectBox(\"instance\").option(\"value\");}"),
                                dimension = new JS("function() { return $(\"#dimension\").dxSelectBox(\"instance\").option(\"value\");}"),
                                investorType = new JS("function() { return $(\"#investorType\").dxSelectBox(\"instance\").option(\"value\");}"),
                                LBType = "Lg",
                                province = new JS("function() { return $(\"#province\").val();}")
                            }))
                            .ShowRowLines(true)
                            .Columns(c =>
                                    {
                                        c.Add().Caption("Largest").Columns(a =>
                                        {
                                            a.Add().DataField("Lokasi");
                                            a.Add().DataField("InvestorType");
                                            a.Add().DataField("Value").Alignment(HorizontalAlignment.Right).CellTemplate("<%= thousandSeparatorDecimal(value)%>");
                                        }
                                        );})
                                
                            )
                    </div>
                    <div class="col-lg-6 form-group" style="padding-right:25px;padding-left:25px">
                        @(Html.DevExtreme().DataGrid()
                            .ID("gridLBLowest")
                            .KeyExpr("ID")
                            .RemoteOperations(true)
                            .Width("100%")
                            .AllowColumnResizing(true)
                            .ColumnFixing(c => c.Enabled(true))
                            .Scrolling(s => s.ShowScrollbar(ShowScrollbarMode.Always))
                            .ShowBorders(true)
                            .Selection(c => c.Mode(SelectionMode.Single))
                            .DataSource(d => d.Mvc().Controller("GeospasialInvestor").LoadAction("GetGridLeaderBoard").LoadMethod("Get").LoadParams(new
                            {
                                periode = new JS("function() { return $(\"#PeriodeAwal\").dxDateBox(\"instance\").option(\"value\");}"),
                                pe = new JS("function() { return $(\"#namaPEid\").dxSelectBox(\"instance\").option(\"value\");}"),
                                growthtype = new JS("function() { return $(\"#growthType\").dxSelectBox(\"instance\").option(\"value\");}"),
                                dimension = new JS("function() { return $(\"#dimension\").dxSelectBox(\"instance\").option(\"value\");}"),
                                investorType = new JS("function() { return $(\"#investorType\").dxSelectBox(\"instance\").option(\"value\");}"),
                                LBType = "Ls",
                                province = new JS("function() { return $(\"#province\").val();}")
                            }))
                            .ShowRowLines(true)
                            .Columns(c =>
                            {
                                c.Add().Caption("Lowest").Columns(a =>
                                {
                                    a.Add().DataField("Lokasi");
                                    a.Add().DataField("InvestorType");
                                    a.Add().DataField("Value").Alignment(HorizontalAlignment.Right).CellTemplate("<%= thousandSeparatorDecimal(value)%>");
                                }
                                );})
                            )
                    </div>
                </div>      
                <div class="row">
                    <div class="col-lg-6 form-group" style="padding-right:25px;padding-left:25px">
                        @(
                        Html.DevExtreme().Chart()
                            .ID("ChartSeriesCVGrowth")
                            .Title("Current Value VS Growth")
                            .Palette(VizPalette.Vintage)
                            .CommonSeriesSettings(s => s
                                .ArgumentField("periode")
                                .IgnoreEmptyPoints(true))
                            .Series(s =>
                            {
                                s.Add().ValueField("currentValue").Name("Current Value").Type(SeriesType.Bar);
                                s.Add().ValueField("growth").Name("Growth").Type(SeriesType.Line);
                            })
                            .DataSource(d => d.Mvc().Controller("GeospasialInvestor").LoadAction("GetGridDataCVGrowth").LoadMethod("Get").LoadParams(new
                            {
                                periode = new JS("function() { return $(\"#PeriodeAwal\").dxDateBox(\"instance\").option(\"value\");}"),
                                pe = new JS("function() { return $(\"#namaPEid\").dxSelectBox(\"instance\").option(\"value\");}"),
                                growthtype = new JS("function() { return $(\"#growthType\").dxSelectBox(\"instance\").option(\"value\");}"),
                                dimension = new JS("function() { return $(\"#dimension\").dxSelectBox(\"instance\").option(\"value\");}"),
                                investorType = new JS("function() { return $(\"#investorType\").dxSelectBox(\"instance\").option(\"value\");}"),
                                province = new JS("function() { return $(\"#province\").val();}")
                            }))
                            .Legend(l => l.Visible(false).VerticalAlignment(VerticalEdge.Top).HorizontalAlignment(HorizontalAlignment.Center))
                            )
                    </div>
                    <div class="col-lg-3 form-group" style="padding-right:25px;padding-left:25px">
                        @(
                            Html.DevExtreme().PieChart()
                            .ID("ChartIT")
                            .Title("Investor Type")
                            .Type(PieChartType.Doughnut)
                            .Palette(VizPalette.Vintage)
                            .ResolveLabelOverlapping(ShiftLabelOverlap.Shift)
                            .InnerRadius(0.65)
                            .Series(s => s
                                .Add()
                                .ArgumentField("investorType")
                                .ValueField("perc")
                                .Label(l => l.Visible(true)
                                .Connector(c => c.Visible(true))
                                .BackgroundColor("none"))
                                )
                            .DataSource(d => d.Mvc().Controller("GeospasialInvestor").LoadAction("GetChartIT").LoadMethod("Get").LoadParams(new
                            {
                                periode = new JS("function() { return $(\"#PeriodeAwal\").dxDateBox(\"instance\").option(\"value\");}"),
                                pe = new JS("function() { return $(\"#namaPEid\").dxSelectBox(\"instance\").option(\"value\");}"),
                                growthtype = new JS("function() { return $(\"#growthType\").dxSelectBox(\"instance\").option(\"value\");}"),
                                dimension = new JS("function() { return $(\"#dimension\").dxSelectBox(\"instance\").option(\"value\");}"),
                                investorType = new JS("function() { return $(\"#investorType\").dxSelectBox(\"instance\").option(\"value\");}"),
                                province = new JS("function() { return $(\"#province\").val();}")
                            }))
                            )                       
                    </div>
                    <div class="col-lg-3 form-group" style="padding-right:25px;padding-left:25px">
                        @(
                            Html.DevExtreme().PieChart()
                            .ID("ChartIO")
                            .Title("Investor Origin")
                            .Type(PieChartType.Doughnut)
                            .Palette(VizPalette.Vintage)
                            .ResolveLabelOverlapping(ShiftLabelOverlap.Shift)
                            .InnerRadius(0.65)
                            .Series(s => s
                            .Add()
                            .ArgumentField("investorOrigin")
                            .ValueField("perc")
                            .Label(l => l.Visible(true)
                            .Connector(c => c.Visible(true))
                            .BackgroundColor("none"))
                            )
                            .DataSource(d => d.Mvc().Controller("GeospasialInvestor").LoadAction("GetChartIO").LoadMethod("Get").LoadParams(new
                            {
                                periode = new JS("function() { return $(\"#PeriodeAwal\").dxDateBox(\"instance\").option(\"value\");}"),
                                pe = new JS("function() { return $(\"#namaPEid\").dxSelectBox(\"instance\").option(\"value\");}"),
                                growthtype = new JS("function() { return $(\"#growthType\").dxSelectBox(\"instance\").option(\"value\");}"),
                                dimension = new JS("function() { return $(\"#dimension\").dxSelectBox(\"instance\").option(\"value\");}"),
                                investorType = new JS("function() { return $(\"#investorType\").dxSelectBox(\"instance\").option(\"value\");}"),
                                province = new JS("function() { return $(\"#province\").val();}")
                            }))
                            )
                    </div>
                </div>
            </div>
        </div>
    </div>




<!-- The Modal  Detail-->
<div class="modal fade" id="ModalSimpanPenggunaanData" tabindex="-1" role="document" aria-hidden="true" data-backdrop="static" data-keyboard="false">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header" style="background-color:#0066b2">
                <h4 class="modal-title" style="text-align:left">
                    <font color="white">Pilih Penggunaan Data</font>
                </h4>
            </div><!--Modal Header-->
            <!-- Modal body -->
            <div class="modal-body">
                <form id="StrukturFormDetail" method="POST" action="" class="form-horizontal row-border">
                    <div class="row" style="padding: 0 10px 0 10px;">
                        @(Html.DevExtreme().SelectBox()
                            .ID("penggunaandataid")
                            .DataSource(d => d.Mvc()
                            .Controller("PenggunaanData")
                            .Area("Website")
                            .LoadAction("GetPenggunaanData")
                            .Key("value"))
                            .ValueExpr("value")
                            .DisplayExpr("text")
                            .SearchEnabled(true)
                            .Width("100%")
                            )
                    </div>
                </form>
            </div>
            <!-- Modal footer -->
            <div class="modal-footer">
                <button type="button" id="btnSavePenggunaanData" class="btn btn-primary" data-bs-dismiss="modal"><i class='fa fa-save'></i> Save</button>
            </div>
        </div>
    </div>
</div>
<!-- The Modal  Detail-->
}

<script>
    window.jsPDF = window.jspdf.jsPDF;
    applyPlugin(window.jsPDF);
</script>

<script type="text/javascript">

    $(function () {
        const startDate = $("#PeriodeAwal").dxDateBox({
            onValueChanged: function (e) {
                endDate.option("min", e.value);
            }
        }).dxDateBox("instance");

        $("#PeriodeAwal").dxValidator({
            validationGroup: "Filter",
            validationRules: [{ type: "required", message: "[Tanggal] harus dipilih" }]
        })
    });

    $(function () {
        $("#penggunaandataid").dxValidator({
            validationGroup: "Filter",
            validationRules: [{ type: "required", message: "[Penggunaan Data] harus dipilih" }]
        })
    });

    $(function () {
        $("#namaPEid").dxValidator({
            validationGroup: "Filter",
            validationRules: [{ type: "required", message: "[Nama PE] harus dipilih" }]
        })
    });

    $(window).on('load', function () {
        $("#ModalSimpanPenggunaanData").modal("show");
    });

    $("#btnSavePenggunaanData").click(function () {
        let penggunaandataid = $("#penggunaandataid").dxSelectBox("instance").option("value");

        if (penggunaandataid == null) {
            alert("Silahkan Pilih Tujuan Penggunaan Data");
            return false;
        } else {
            $.ajax({
                url: '@Url.Action("SimpanPenggunaanData", "SegmentationSummaryClusterMKBD")',
                data: { id: penggunaandataid },
                dataType: "json",
                type: "POST",
                success: function (data) {
                    if (data.success == true) {
                        //alert(data.message);
    @* waitingDialog.hide(); *@
                            $('#ModalSimpanPenggunaanData').modal('hide');
                        return "Saving Success !";
                    }
                    else if (data.success == false) {
    @*  waitingDialog.hide(); *@
                            alert(data.message);
                        $('#ModalSimpanPenggunaanData').modal('hide');
                        return "Saving Failed !";
                    }
                }
            });
        }
    });

    function onSelectionChanged(e) {
        if (e.addedItems.length > 0) {
            e.component.field().val(""); // Clears the search text. However, search filter is only applied to the widget after focus is lost in the input element
        }
    }

    function onButtonFilterClicked(e) {
        periode = $("#PeriodeAwal").dxDateBox("instance").option("value");
        pe = $("#namaPEid").dxSelectBox("instance").option("value");
        growthtype = $("#growthType").dxSelectBox("instance").option("value");
        dimension = $("#dimension").dxSelectBox("instance").option("value");
        investorType = $("#investorType").dxSelectBox("instance").option("value");

        var url = '@Url.Action("Index")?periode=' + periode + '&pe=' + pe + '&growthtype=' + growthtype + '&dimension=' + dimension + '&investorType=' + investorType;
        window.location = url;
    }

    function onGridBeforeSend(method, ajaxOptions) {
        let namaPE = $("#namaPEid").dxSelectBox("instance").option("value");
        let tempPeriodeAwal = $("#PeriodeAwal").dxDateBox("instance").option("value");
        let status = $("#Statusid").dxTagBox("instance").option("value");

        let periodeAwal = null;
        if (tempPeriodeAwal != null) {
            periodeAwal = tempPeriodeAwal.getFullYear() + '-' + (tempPeriodeAwal.getMonth() + 1) + '-' + tempPeriodeAwal.getDate();
        }
        ajaxOptions.data.namaPE = JSON.stringify(namaPE);
        ajaxOptions.data.periodeAwal = periodeAwal;
        ajaxOptions.data.status = JSON.stringify(status);
    }

    var waitingDialog = (function ($) {

        // Creating modal dialog's DOM
        var $dialog = $(
            '<div class="modal fade" data-backdrop="static" data-keyboard="false" tabindex="-1" role="dialog" aria-hidden="true" style="padding-top:15%; overflow-y:visible;">' +
            '<div class="modal-dialog modal-m">' +
            '<div class="modal-content">' +
            '<div class="modal-header"><h3 style="margin:0;"></h3></div>' +
            '<div class="modal-body">' +
            '<div class="progress progress-striped active" style="margin-bottom:0;"><div class="progress-bar" style="width: 100%"></div></div>' +
            '</div>' +
            '</div></div></div>');

        return {
            show: function (message, options) {
                // Assigning defaults
                var settings = $.extend({
                    dialogSize: 'm',
                    progressType: ''
                }, options);
                if (typeof message === 'undefined') {
                    message = 'Loading';
                }
                if (typeof options === 'undefined') {
                    options = {};
                }
                // Configuring dialog
                $dialog.find('.modal-dialog').attr('class', 'modal-dialog').addClass('modal-' + settings.dialogSize);
                $dialog.find('.progress-bar').attr('class', 'progress-bar');
                if (settings.progressType) {
                    $dialog.find('.progress-bar').addClass('progress-bar-' + settings.progressType);
                }
                $dialog.find('h3').text(message);
                // Opening dialog
                $dialog.modal();
            },
            /**
                * Closes dialog
                */
            hide: function () {
                $dialog.modal('hide');
            }
        }
    })(jQuery);

    function thousandSeparatorDecimal(e) {
        if (e != null)
            return e.toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 });
    }

    function thousandSeparatorDecimal2(e) {
        if (e != null)
            return e.toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 2 });
    }

    function ExportChart() {
        var chart1 = $("#ChartGender").dxChart("instance"),
            chart2 = $("#ChartUsia").dxChart("instance"),
            chart3 = $("#ChartPendidikan").dxChart("instance"),
            chart4 = $("#ChartPekerjaan").dxChart("instance"),
            chart5 = $("#ChartPenghasilan").dxTreeMap("instance");

        DevExpress.viz.exportWidgets([[chart1, chart2, chart3], [chart4, chart5]], {
            fileName: "chartDemografiInvestor",
            format: 'PNG'
        });
    }

    function MapClick(e) {
        var clickedElement = e.target;
        if (clickedElement != null && clickedElement.layer.type == "area") {
            $("#province").val(clickedElement.attribute().text);
        } else { 
            $("#province").val("");
        }

        var dataGrid = $("#gridLBLargest").dxDataGrid("instance").refresh();
        var dataGrid2 = $("#gridLBLowest").dxDataGrid("instance").refresh();
        
        var chart1 = $("#ChartSeriesCVGrowth").dxChart("instance");
        var ds1 = chart1.option('dataSource');
        chart1.option('dataSource', ds1);
        
        var chart2 = $("#ChartIT").dxPieChart("instance");
        var ds2 = chart2.option('dataSource');
        chart2.option('dataSource', ds2);
        
        var chart3 = $("#ChartIO").dxPieChart("instance");
        var ds3 = chart3.option('dataSource');
        chart3.option('dataSource', ds3);
    }

    function vectorMap_customizeTooltip(arg) {
        //console.log(arg);
        if (arg.layer.name === "bubbles") {
            return { text: arg.attribute("tooltip") };
        }

    }

    function vectorMap_customizeBubble(elements) {
        for (var i = 0; i < elements.length; i++) {
            var val = elements[i].attribute().value;
            
            if (val == 0) {
                elements[i].applySettings({ color: "#FFFFFF" });
            } else if (val > 0 & val < 51) {
                elements[i].applySettings({ color: "#A0522D" });
            } else if (val >= 51 & val < 500) {
                elements[i].applySettings({ color: "#FF6347" });
            } else if (val >= 500 & val < 1000) {
                elements[i].applySettings({ color: "#FFD700" });
            } else if (val >= 1000 & val < 10000) {
                elements[i].applySettings({ color: "#FFFF00" });
            } else if (val >= 10000 & val < 50000) {
                elements[i].applySettings({ color: "#ADFF2F" });
            } else if (val >= 50000 & val < 100000) {
                elements[i].applySettings({ color: "#90EE90" });
            } else if (val >= 100000 & val < 500000) {
                elements[i].applySettings({ color: "#00FF00" });
            } else if (val >= 500000 & val < 1000000) {
                elements[i].applySettings({ color: "#32CD32" });
            } else if (val >= 1000000) {
                elements[i].applySettings({ color: "#228B22" });
            }
        }

    }

    function vectorMap_HeatMap_dataSource_map(item) {
        item.features = $.map(item.features,
            function (data) {
                //console.log(data);
                return {
                    type: "Feature",
                    geometry: {
                        type: "MultiPolygon",
                        coordinates: data.coordinates
                    },
                    properties: {
                        text: data.text,
                        value: data.current_value,
                        tooltip: "<b>" + data.text + "</b>\n" + data.dimension + " = " + thousandSeparatorDecimal(data.current_value)
                    }
                };
            }
        );
        return item;
    }


    function vectorMap_bubblesLegend_customizeText(arg) {
        return ["<50", "51 - 100", "101 - 500", "501 - 1000", "1001 - 5000", "5001 - 10000", "10001 - 50000", "50000<"][arg.index];
    }

    function vectorMap_bubblesLegend_customizeItems(items) {
        return items.reverse();
    }

</script>
<style>
    .headerTable {
        box-sizing: border-box;
        background-color: #971c1d;
        padding: 10px;
        margin: 0 auto;
        display: block;
        width: 100%;
        color: #fdfdfd;
        text-align: center;
    }
</style>
<script src="~/js/devextreme/vectormap-data/indonesia.js"></script>
