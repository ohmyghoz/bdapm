@using DevExtreme.AspNet.Mvc
@{
    Layout = "~/Views/Shared/_LayoutMainMetronic.cshtml";
    string reportId = "Segmentation_Summary_Cluster_MKBD";
    var p = (string[])ViewBag.period;
    var maxItems = db.GetSetting("LimitFilterLJK");
}

@inject BDA.DataModel.DataEntities db


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="card card-default">
        @*filter*@
        <div class="row filter-panel" style="padding-top:0px;">
            <div class="card-body">
                <div class="row">
                    <div class="col-lg-4 form-group">
                        <label>Tanggal<span class="mandatory">*</span></label>
                        @(Html.DevExtreme().DateBox()
                            .ID("PeriodeAwal")
                            .DisplayFormat("dd MMM yyyy")
                            .Value(DateTime.Now)
                            .Max(DateTime.Now)
                            .Width("100%"))
                    </div>

                    <div class="col-lg-4 form-group">
                        <label>Nama PE</label>
                        @(Html.DevExtreme().SelectBox()
                            .ID("namaPEid")
                            .DataSource(d => d.Mvc()
                            .Controller("SegmentationSummaryClusterMKBD")
                            .Area("BDAPM")
                            .LoadAction("GetNamaPE")
                            .Key("value"))
                            .ValueExpr("value")
                            .DisplayExpr("text")
                            .SearchEnabled(true)
                            .Width("100%")
                            .Placeholder("(ALL)")
                            )
                    </div>

                    <div class="col-lg-4 form-group">
                        <label>Status@*<span class="mandatory">*</span>*@</label>
                        @(Html.DevExtreme().TagBox()
                            .ID("Statusid")
                            .DataSource(new[] { "Alert", "Normal" })
                            .ShowSelectionControls(true)
                            .MaxDisplayedTags(3)
                            .SearchEnabled(true)
                            .OnSelectionChanged("onSelectionChanged")
                            .Width("100%")
                            .Placeholder("(ALL)")
                            )
                    </div>

                </div>

                <div class="float-left">
                    @(Html.DevExtreme().Button()
                        .ID("Filter")
                        .Type(ButtonType.Default)
                        .Text("Tampilkan")
                        .OnClick("onButtonFilterClicked")
                        .ValidationGroup("Filter"))
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6">
                @(Html.DevExtreme().PieChart()
                    .ID("pie-chart")
                    .Type(PieChartType.Donut)
                    .Palette(VizPalette.Carmine)
                    .Title("Jumlah Cluster")
                    .Legend(l => l
                    .HorizontalAlignment(HorizontalAlignment.Right)
                    .VerticalAlignment(VerticalEdge.Top)
                    .Margin(0)
                    )
                    .Export(e => e.Enabled(true))
                    .Series(s => s
                    .Add()
                    .ArgumentField("status")
                    .ValueField("total")
                    .Label(l => l
                    .Visible(true)                   
                    .Connector(c => c.Visible(true))
                    ))
                    .DataSource(d => d.Mvc()
                    .Controller("SegmentationSummaryClusterMKBD")
                    .LoadAction("GetChartClusterSearch")
                    .OnBeforeSend("onGridBeforeSend")))
            </div>

            <div class="col-lg-6">
                @(Html.DevExtreme().Chart()
                    .ID("bar-chart")
                    .Title("Cluster PE Berdasarkan Persentase MKBD dibandingkan MKBD Dipersyaratkan")
                    .Export(e => e.Enabled(true))
                    .Series(s => s
                    .Add()
                    .ArgumentField("cluster")
                    .ValueField("total")
                    .Name("Cluster PE")
                    .Type(SeriesType.Bar)
                    .Color("#f5403d")
                    .Label(l => l
                    .Visible(true)
                    .Format(f => f
                    .Type(Format.FixedPoint)
                    .Precision(0))))
                    .DataSource(d => d.Mvc()
                    .Controller("SegmentationSummaryClusterMKBD")
                    .LoadAction("GetChartClusterBarSearch")
                    .OnBeforeSend("onGridBeforeSend")))
            </div>
        </div>
        <br />
        <br />
        @*grid*@
        <div class="row filter-panel" style="padding-top:0px;">
            <div class="card-body">
                <div class="float-right">
                    @if (ViewBag.Export)
                    {
                        <a class="btn btn-light-primary font-weight-bolder btn-sm mr-2" href="javascript:ExportToExcelIndex();"><span class="image fa fa-file-excel"></span> Export Excel</a>
                        <a class="btn btn-light-primary font-weight-bolder btn-sm mr-2" href="javascript:ExportToPdfIndex();"><span class="image fa fa-file-pdf"></span> Export PDF</a>
                    }
                </div>
            </div>
        </div>
        <div class="gridview-div">
            @(Html.DevExtreme().DataGrid()
                .ID("grid1")
                .ShowBorders(true).Width("100%").ShowColumnLines(true).ShowRowLines(true)
                .DataSource(d => d.Mvc()
                .Controller("SegmentationSummaryClusterMKBD")
                .LoadAction("GetGridData")
                .Key("securitycompanycode")
                .OnBeforeSend("onGridBeforeSend"))
                .RemoteOperations(true)
                .Width("100%")
                .AllowColumnResizing(true)
                .ColumnAutoWidth(true)
                .WordWrapEnabled(true)
                .Columns(columns =>
                {
                    columns.Add().DataField("no").Caption("No.").Alignment(HorizontalAlignment.Center);
                    columns.Add().DataField("securitycompanycode").Caption("Kode PE").Alignment(HorizontalAlignment.Center);
                    columns.Add().DataField("securitycompanyname").Caption("Nama PE").Width(300);
                    columns.Add().DataField("simpanangiro").Caption("Simpanan Giro").Alignment(HorizontalAlignment.Right).DataType(GridColumnDataType.Number).Format(",##0");
                    columns.Add().DataField("depositolt3bulan").Caption("Deposito < 3 Bulan").Alignment(HorizontalAlignment.Right).DataType(GridColumnDataType.Number).Format(",##0");
                    columns.Add().DataField("depositogt3bulandijaminlps").Caption("Deposito > 3 Bulan Dijamin LPS").Alignment(HorizontalAlignment.Right).DataType(GridColumnDataType.Number).Format(",##0");
                    columns.Add().DataField("uangjaminanlkp").Caption("Uang Jaminan LKP").Alignment(HorizontalAlignment.Right).DataType(GridColumnDataType.Number).Format(",##0");
                    columns.Add().DataField("kasdansetarakas").Caption("Kas dan Setara Kas (Simpanan Giro + Deposito < 3 Bulan + Uang Jaminan LKP)").Alignment(HorizontalAlignment.Right).DataType(GridColumnDataType.Number).Format(",##0");
                    columns.Add().DataField("mkbd").Caption("MKBD").Format("#,##0").Alignment(HorizontalAlignment.Right).DataType(GridColumnDataType.Number).Format(",##0"); 
                    columns.Add().DataField("mkbdminimum").Caption("MKBD Minimum").Alignment(HorizontalAlignment.Right).DataType(GridColumnDataType.Number).Format(",##0"); 
                    columns.Add().DataField("mkbdpermkbdminimum").Caption("MKBD Terhadap MKBD Minimum").Alignment(HorizontalAlignment.Right).DataType(GridColumnDataType.Number).Format(",##0");
                    @* columns.Add().DataField("status").Caption("Status"); *@
                    columns.Add().DataField("status").Visible(false);
                    columns.Add().Type(GridCommandColumnType.Buttons).Caption("Action").Buttons(b =>
                    {
                        b.Add()
                    .Hint("Detail")
                    .Icon("detailslayout")
                    .OnClick("Detail");
                    });
                })
                .FilterRow(f => f.Visible(true))
                .ShowBorders(false)
                .Paging(p =>
                {
                    p.PageSize(20);
                    p.Enabled(true);
                })
                .Pager(p =>
                {
                    p.ShowInfo(true);
                }))
        </div>

        <!-- The Modal  Detail-->
        <div class="modal fade" id="ModalSimpanPenggunaanData" tabindex="-1" role="document" aria-hidden="true" data-backdrop="static" data-keyboard="false">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <div class="modal-header" style="background-color:#0066b2">
                        <h4 class="modal-title" style="text-align:left">
                            <font color="white">Pilih Penggunaan Data</font>
                        </h4>
                    </div><!--Modal Header-->
                    <!-- Modal body -->
                    <div class="modal-body">
                        <form id="StrukturFormDetail" method="POST" action="" class="form-horizontal row-border">
                            <div class="row" style="padding: 0 10px 0 10px;">
                                @(Html.DevExtreme().SelectBox()
                                    .ID("penggunaandataid")
                                    .DataSource(d => d.Mvc()
                                    .Controller("PenggunaanData")
                                    .Area("Website")
                                    .LoadAction("GetPenggunaanData")
                                    .Key("value"))
                                    .ValueExpr("value")
                                    .DisplayExpr("text")
                                    .SearchEnabled(true)
                                    .Width("100%")
                                    )
                            </div>
                        </form>
                    </div>
                    <!-- Modal footer -->
                    <div class="modal-footer">
                        <button type="button" id="btnSavePenggunaanData" class="btn btn-primary" data-bs-dismiss="modal"><i class='fa fa-save'></i> Save</button>
                    </div>
                </div>
            </div>
        </div>
        <!-- The Modal  Detail-->
    </div>
}

<script>
    window.jsPDF = window.jspdf.jsPDF;
    applyPlugin(window.jsPDF);
</script>

<script>
    $(function () {
        $("#grid1").dxDataGrid({
            onCellPrepared: function (e) {
                if (e.rowType === "data") {
                    if (e.column.dataField === "no") {
                        e.cellElement.css({ "color": "black", "background-color": "white" });
                    }
                    if (e.column.dataField === "securitycompanycode") {
                        e.cellElement.css({ "color": "black", "background-color": "white" });
                    }
                    if (e.column.dataField === "securitycompanyname") {
                        e.cellElement.css({ "color": "black", "background-color": "white" });
                    }
                }
            }
        });
    });

    $(function () {
        $("#grid1").dxDataGrid({
            onRowPrepared: function (e) {
                if (e.rowType === "data") {
                    if (e.data.status === "Alert") {
                        e.rowElement.css({ "color": "black", "background-color": "#fb7764" });
                    }else{
                        e.rowElement.css({ "color": "black", "background-color": "#73d47f" });
                    }
                }
            }
        });
    });

    

    $(function () {
        const startDate = $("#PeriodeAwal").dxDateBox({
            onValueChanged: function (e) {
                
            }
        }).dxDateBox("instance");

        $("#PeriodeAwal").dxValidator({
            validationGroup: "Filter",
            validationRules: [{ type: "required", message: "[Tanggal] harus dipilih" }]
        })
    });

    $(function () {
        $("#penggunaandataid").dxValidator({
            validationGroup: "Filter",
            validationRules: [{ type: "required", message: "[Penggunaan Data] harus dipilih" }]
        })
    });

    @* $(function () {
        $("#namaPEid").dxValidator({
            validationGroup: "Filter",
            validationRules: [{ type: "required", message: "[Nama PE] harus dipilih" }]
        })
    }); *@

    $(window).on('load', function () {
        $("#ModalSimpanPenggunaanData").modal("show");
    });

    $("#btnSavePenggunaanData").click(function () {
        let penggunaandataid = $("#penggunaandataid").dxSelectBox("instance").option("value");

        if (penggunaandataid == null) {
            alert("Silahkan Pilih Tujuan Penggunaan Data");
            return false;
        } else {
            $.ajax({
                url: '@Url.Action("SimpanPenggunaanData", "SegmentationSummaryClusterMKBD")',
                data: { id: penggunaandataid },
                dataType: "json",
                type: "POST",
                success: function (data) {
                    if (data.success == true) {
                        //alert(data.message);
                        @* waitingDialog.hide(); *@
                        $('#ModalSimpanPenggunaanData').modal('hide');
                        return "Saving Success !";
                    }
                    else if (data.success == false) {
                       @*  waitingDialog.hide(); *@
                        alert(data.message);
                        $('#ModalSimpanPenggunaanData').modal('hide');
                        return "Saving Failed !";
                    }
                }
            });
        }
    });

    function ExportToExcelIndex() {
       $.ajax({
            type: "POST",
            url: "@Url.Action("LogExportIndex", "SegmentationSummaryClusterMKBD")",
            success: function (response) {
                if (response.result == "Success") {
                    var workbook = new ExcelJS.Workbook();
                    var worksheet = workbook.addWorksheet('Main sheet');

                    DevExpress.excelExporter.exportDataGrid({
                        component: $("#grid1").dxDataGrid("instance"),
                        worksheet: worksheet,
                        customizeCell: function (options) {
                            var { gridCell, excelCell } = options;

                            if (gridCell.rowType === 'data') {
                                if (options.gridCell.column.dataType === 'number') {
                                    excelCell.numFmt = '#,##0';
                                }
                            }
                        }
                    }).then(function () {
                        workbook.xlsx.writeBuffer().then(function (buffer) {
                            saveAs(new Blob([buffer], { type: "application/octet-stream" }), "SummaryClusterMKBD_" + new Date().toISOString().slice(0, 10) + ".xlsx");
                        });
                    });
                }
            }
        });
    }

    function ExportToPdfIndex() {
        var dataGrid = $("#grid1").dxDataGrid("instance");
        dataGrid.option("onExporting", function (e) { });
        dataGrid.option("onFileSaving", function (e) {
            var fd = new FormData();
            fd.append("file", e.data);
            $.ajax({
                type: "POST",
                url: "@Url.Action("LogExportPDFIndex", "SegmentationSummaryClusterMKBD")",
                data: fd,
                processData: false,
                contentType: false
            }).done(function (data) {
                window.location = "@Url.Action("FileIndex", "SegmentationSummaryClusterMKBD")"
            });
            e.cancel = true;
        });
        dataGrid.exportToExcel();
    }

    function onSelectionChanged(e) {
        if (e.addedItems.length > 0) {
            e.component.field().val(""); // Clears the search text. However, search filter is only applied to the widget after focus is lost in the input element
        }
    }

    function onButtonFilterClicked(e) {
        const res = e.validationGroup.validate();
        if (res.status === "valid") {
            let tempPeriodeAwal = $("#PeriodeAwal").dxDateBox("instance").option("value");
            let namaPE = $("#namaPEid").dxSelectBox("instance").option("value");
            let status = $("#Statusid").dxTagBox("instance").option("value");


            let periodeAwal = null;
            if (tempPeriodeAwal != null) {
                periodeAwal = tempPeriodeAwal.getFullYear() + '-' + String(tempPeriodeAwal.getMonth() + 1).padStart(2, '0') + '-' + String(tempPeriodeAwal.getDate()).padStart(2, '0');
            }

            $("#grid1").dxDataGrid("instance").refresh();

            $.ajax({
                url: '@Url.Action("GetChartClusterSearch", "SegmentationSummaryClusterMKBD")',
                data: { periodeAwal: periodeAwal, namaPE: namaPE, status: JSON.stringify(status) },
                dataType: "json",
                type: "POST",
                success: function (response) {
                    $("#pie-chart").dxPieChart("instance").refresh();
                }
            });

            $.ajax({
                url: '@Url.Action("GetChartClusterBarSearch", "SegmentationSummaryClusterMKBD")',
                data: { periodeAwal: periodeAwal, namaPE: namaPE, status: JSON.stringify(status) },
                dataType: "json",
                type: "POST",
                success: function (response) {
                    $("#bar-chart").dxChart("instance").refresh();
                }
            });
        }
    }

    function onGridBeforeSend(method, ajaxOptions) {
        let tempPeriodeAwal = $("#PeriodeAwal").dxDateBox("instance").option("value");
        let namaPE = $("#namaPEid").dxSelectBox("instance").option("value");
        let status = $("#Statusid").dxTagBox("instance").option("value");
        

        let periodeAwal = null;
        if (tempPeriodeAwal != null) {
            periodeAwal = tempPeriodeAwal.getFullYear() + '-' + String(tempPeriodeAwal.getMonth() + 1).padStart(2, '0') + '-' + String(tempPeriodeAwal.getDate()).padStart(2, '0');
        }
        
        ajaxOptions.data.periodeAwal = periodeAwal;
        ajaxOptions.data.namaPE = namaPE;
        ajaxOptions.data.status = JSON.stringify(status);
    }

    function onLJKOpened(e) {
        e.component.content().find('.dx-list-select-all').hide();
    }

    function Detail(e) {
        let tempPeriodeAwal = $("#PeriodeAwal").dxDateBox("instance").option("value");
        let namaPE = $("#namaPEid").dxSelectBox("instance").option("value");

        let periodeAwal = null;
        if (tempPeriodeAwal != null) {
            periodeAwal = tempPeriodeAwal.getFullYear() + '-' + String(tempPeriodeAwal.getMonth() + 1).padStart(2, '0') + '-' + String(tempPeriodeAwal.getDate()).padStart(2, '0');
        }

        
        var keys = e.row.key;
        if (typeof (keys) !== "undefined" && typeof (keys) !== null) {
            window.open('@Url.Action("Detail", "SegmentationSummaryClusterMKBD")?id=' + keys.toString() + '&periodeAwal=' + periodeAwal);            
        }
    }

    var waitingDialog = (function ($) {

        // Creating modal dialog's DOM
        var $dialog = $(
            '<div class="modal fade" data-backdrop="static" data-keyboard="false" tabindex="-1" role="dialog" aria-hidden="true" style="padding-top:15%; overflow-y:visible;">' +
            '<div class="modal-dialog modal-m">' +
            '<div class="modal-content">' +
            '<div class="modal-header"><h3 style="margin:0;"></h3></div>' +
            '<div class="modal-body">' +
            '<div class="progress progress-striped active" style="margin-bottom:0;"><div class="progress-bar" style="width: 100%"></div></div>' +
            '</div>' +
            '</div></div></div>');

        return {
            show: function (message, options) {
                // Assigning defaults
                var settings = $.extend({
                    dialogSize: 'm',
                    progressType: ''
                }, options);
                if (typeof message === 'undefined') {
                    message = 'Loading';
                }
                if (typeof options === 'undefined') {
                    options = {};
                }
                // Configuring dialog
                $dialog.find('.modal-dialog').attr('class', 'modal-dialog').addClass('modal-' + settings.dialogSize);
                $dialog.find('.progress-bar').attr('class', 'progress-bar');
                if (settings.progressType) {
                    $dialog.find('.progress-bar').addClass('progress-bar-' + settings.progressType);
                }
                $dialog.find('h3').text(message);
                // Opening dialog
                $dialog.modal();
            },
            /**
                * Closes dialog
                */
            hide: function () {
                $dialog.modal('hide');
            }
        }
    })(jQuery);
</script>

<style type="text/css">
    .mandatory {
        color: red;
    }
</style>
