@{
    Layout = "~/Views/Shared/_LayoutMainMetronic.cshtml";

    var isExport = false;
    //if (ViewBag.Akses != "Non Pengawas")
    if (ViewBag.Export)
    {
        isExport = true;
    }

    var maxItems = db.GetSetting("LimitFilterLJK");
}

@inject BDA.DataModel.DataEntities db

<script type="text/javascript">
    function ExportToExcel() {
        $.ajax({
            type: "POST",
            url: "@Url.Action("LogExportIndex", "OutliersFrekuensiAktivitas")",
            success: function (response) {
                if (response.result == "Success") {
                    var grid = $("#grid1").dxDataGrid("instance");
                    grid.option("onFileSaving", function (e) { });
                    grid.exportToExcel();
                }
            }
        });
    }

    var resetLJK;

    $(function () {
        const startDate = $("#PeriodeAwal").dxDateBox({
            onValueChanged: function (e) {
                endDate.option("min", e.value);
            }
        }).dxDateBox("instance");
        const endDate = $("#PeriodeAkhir").dxDateBox({
            onValueChanged: function (e) {
                startDate.option("max", e.value);
            }
        }).dxDateBox("instance");

        $("#PeriodeAwal").dxValidator({
            validationGroup: "Filter",
            validationRules: [{ type: "required", message: "[Periode Awal] harus dipilih" }]
        })
        $("#PeriodeAkhir").dxValidator({
            validationGroup: "Filter",
            validationRules: [{ type: "required", message: "[Periode Akhir] harus dipilih" }]
        })
    });

    function onSelectionChanged(e) {
        if (e.addedItems.length > 0) {
            e.component.field().val("");
        }
    }

    function onJenisLJKChanged(e) {
        resetLJK = true;
        $("#Members").dxTagBox("instance").getDataSource().reload();
        $("#Members").dxTagBox("reset");
        resetLJK = false;
    }

    function onButtonFilterClicked(e) {
        const res = e.validationGroup.validate();
        if (res.status === "valid") {
            $("#bar-chart1").dxChart("instance").refresh();
            $("#bar-chart2").dxChart("instance").refresh();
        }
    }

    function onGridBeforeSend(method, ajaxOptions) {
        let memberTypes = $("#MemberTypes").dxTagBox("instance").option("value");

        let members = $("#Members").dxTagBox("instance").option("value");

        let tempPeriodeAwal = $("#PeriodeAwal").dxDateBox("instance").option("value");
        let periodeAwal = null;
        if (tempPeriodeAwal != null) {
            periodeAwal = tempPeriodeAwal.getFullYear() + '-' + (tempPeriodeAwal.getMonth() + 1) + '-' + tempPeriodeAwal.getDate();
        }

        let tempPeriodeAkhir = $("#PeriodeAkhir").dxDateBox("instance").option("value");
        let periodeAkhir = null;
        if (tempPeriodeAkhir != null) {
            periodeAkhir = tempPeriodeAkhir.getFullYear() + '-' + (tempPeriodeAkhir.getMonth() + 1) + '-' + tempPeriodeAkhir.getDate();
        }

        ajaxOptions.data.memberTypes = JSON.stringify(memberTypes);
        ajaxOptions.data.members = JSON.stringify(members);
        ajaxOptions.data.periodeAwal = periodeAwal;
        ajaxOptions.data.periodeAkhir = periodeAkhir;
    }

    function onLJKOpened(e) {
        e.component.content().find('.dx-list-select-all').hide();
    }

    const maxItems = @maxItems;

    function onLJKChanged(e) {
        if (e.value.length > maxItems) {
            const newValue = e.value.slice(0, maxItems);
            e.component.option("value", newValue);
            //tooltip.show();
        }
    }
</script>

<style type="text/css">
    .mandatory {
        color: red;
    }
</style>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="card card-default">
        @*filter*@
        <div class="row filter-panel" style="padding-top:0px;">
            <div class="card-body">
                <div class="row">
                    <div class="col-lg-4 form-group">
                        <label>Jenis LJK</label>
                        @(Html.DevExtreme().TagBox()
                                .ID("MemberTypes")
                                .DataSource(d => d.Mvc()
                                    .Controller("OutliersFrekuensiAktivitas")
                                    .LoadAction("GetMemberTypes")
                                    .Key("kode_jenis_ljk"))
                                //.DataSourceOptions(d => d.Paginate(true).PageSize(10))
                                .ValueExpr("kode_jenis_ljk")
                                .DisplayExpr("Display")
                                .ShowSelectionControls(true)
                                .MaxDisplayedTags(3)
                                .SearchEnabled(true)
                                .ShowClearButton(true)
                                .OnSelectionChanged("onSelectionChanged")
                                .OnValueChanged("onJenisLJKChanged")
                                .Width("100%"))
                    </div>

                    <div class="col-lg-4 form-group">
                        <label>LJK</label>
                        @(Html.DevExtreme().TagBox()
                                .ID("Members")
                                .DataSource(d => d.Mvc()
                                    .Controller("OutliersFrekuensiAktivitas")
                                    .LoadAction("GetMembers")
                                    .LoadParams(new { memberTypes = new JS("function() { return $(\"#MemberTypes\").dxTagBox(\"instance\").option(\"value\"); }"), reset = new JS("function() { return resetLJK; }") })
                                    //.Key("kode_ljk")
                                    .Key("CompositeKey")
                                )
                                .DataSourceOptions(d => d.Paginate(true).PageSize(10))
                                //.ValueExpr("kode_ljk")
                                .ValueExpr("CompositeKey")
                                .DisplayExpr("Display")
                                .ShowSelectionControls(true)
                                .MaxDisplayedTags(3)
                                .SearchEnabled(true)
                                .ShowClearButton(true)
                                .OnSelectionChanged("onSelectionChanged")
                                .OnOpened("onLJKOpened")
                                .OnValueChanged("onLJKChanged")
                                .Width("100%"))
                    </div>

                    <div class="col-lg-4 form-group">
                        <label>Periode Awal<span class="mandatory">*</span></label>
                        @(Html.DevExtreme().DateBox()
                                .ID("PeriodeAwal")
                                .DisplayFormat("dd MMM yyyy")
                                .Value(DateTime.Now)
                                .Max(DateTime.Now)
                                .Width("100%"))
                    </div>

                    <div class="col-lg-4 form-group">
                        <label>Periode Akhir<span class="mandatory">*</span></label>
                        @(Html.DevExtreme().DateBox()
                                .ID("PeriodeAkhir")
                                .DisplayFormat("dd MMM yyyy")
                                .Value(DateTime.Now)
                                .Min(DateTime.Now)
                                .Width("100%"))
                    </div>

                </div>

                <div class="float-left">
                    @(Html.DevExtreme().Button()
                        .ID("Filter")
                        .Type(ButtonType.Default)
                        .Text("Tampilkan")
                        .OnClick("onButtonFilterClicked")
                        .ValidationGroup("Filter"))
                </div>
            </div>
        </div>

        @*chart*@
        <div class="row">
            <div class="col-lg-6">
                @(Html.DevExtreme().Chart()
                    .ID("bar-chart1")
                    .DataSource(d => d.Mvc()
                        .Controller("OutliersFrekuensiAktivitas")
                        .LoadAction("GetGridData")
                        .OnBeforeSend("onGridBeforeSend"))
                    .Title("Jumlah Aktivitas")
                    .Palette(VizPalette.Bright)
                    .Margin(m => m.Top(20).Bottom(20).Right(20).Left(20))
                    .Legend(l => l.Visible(false))
                    .CommonSeriesSettings(s => s
                        .ArgumentField("date")
                        .Type(SeriesType.Bar))
                    .ArgumentAxis(a => a
                    .Type(AxisScaleType.Discrete)
                    .ArgumentType(ChartDataType.DateTime)
                    .Label(l => l
                        .Format("MMM yyyy")
                        .DisplayMode(ChartLabelDisplayMode.Rotate)))
                    .Series(s =>
                    {
                        s.Add().ValueField("normal_act_sum").Name("Normal").IgnoreEmptyPoints(true);
                        s.Add().ValueField("outliers_act_sum").Name("Outlier").IgnoreEmptyPoints(true);
                    })
                    .Legend(l => l
                        .VerticalAlignment(VerticalEdge.Bottom)
                        .HorizontalAlignment(HorizontalAlignment.Center))
                    @*.CustomizeLabel(@<text>
                        function() {
                            return {
                                visible: true,
                                customizeText: function() {
                                    return this.valueText.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");;
                                }
                            };
                        }
                    </text>)*@
                     .Tooltip(t => t
                        .Enabled(true)
                        .CustomizeTooltip(@<text>
                            function(arg) {
                                return {
                                    text: arg.valueText.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",")
                                }
                            }
                        </text>)
                    )
                    .LoadingIndicator(l => l.Enabled(true))
                    .Export(e => e.Enabled(isExport))
                    .OnExporting(@<text>
                        function(e) {
                            $.ajax({
                                type: "POST",
                                url: "@Url.Action("LogExportIndex", "HMLPerorangan")",
                                success: function (response) {
                                    if (response.result == "Success") {
                                    }
                                }
                            });
                            e.fileName = "BarChart_HMLPerorangan_" + new Date().toISOString().slice(0, 10);
                        }
                    </text>))
            </div>

            <div class="col-lg-6">
                @(Html.DevExtreme().Chart()
                    .ID("bar-chart2")
                    .DataSource(d => d.Mvc()
                        .Controller("OutliersFrekuensiAktivitas")
                        .LoadAction("GetGridData2")
                        .OnBeforeSend("onGridBeforeSend"))
                    .Title("Jumlah User ID")
                    .Palette(VizPalette.Bright)
                    .Margin(m => m.Top(20).Bottom(20).Right(20).Left(20))
                    .Legend(l => l.Visible(false))
                    .CommonSeriesSettings(s => s
                        .ArgumentField("date")
                        .Type(SeriesType.Bar))
                    .ArgumentAxis(a => a
                    .Type(AxisScaleType.Discrete)
                    .ArgumentType(ChartDataType.DateTime)
                    .Label(l => l
                        .Format("MMM yyyy")
                        .DisplayMode(ChartLabelDisplayMode.Rotate)))
                    .Series(s =>
                    {
                        s.Add().ValueField("normal_user_count").Name("Normal").IgnoreEmptyPoints(true);
                        s.Add().ValueField("outliers_user_count").Name("Outlier").IgnoreEmptyPoints(true);
                    })
                    .Legend(l => l
                        .VerticalAlignment(VerticalEdge.Bottom)
                        .HorizontalAlignment(HorizontalAlignment.Center))
                    @*.CustomizeLabel(@<text>
                        function() {
                            return {
                                visible: true,
                                customizeText: function() {
                                    return this.valueText.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");;
                                }
                            };
                        }
                    </text>)*@
                    .Tooltip(t => t
                        .Enabled(true)
                        .CustomizeTooltip(@<text>
                            function(arg) {
                                return {
                                    text: arg.valueText.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",")
                                }
                            }
                        </text>)
                    )
                    .LoadingIndicator(l => l.Enabled(true))
                    .Export(e => e.Enabled(isExport))
                    .OnExporting(@<text>
                        function(e) {
                            $.ajax({
                                type: "POST",
                                url: "@Url.Action("LogExportIndex", "HMLPerorangan")",
                                success: function (response) {
                                    if (response.result == "Success") {
                                    }
                                }
                            });
                            e.fileName = "BarChart_HMLPerorangan_" + new Date().toISOString().slice(0, 10);
                        }
                    </text>))
            </div>
        </div>
    </div>
} 