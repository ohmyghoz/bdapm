@{
    Layout = "~/Views/Shared/_LayoutMainMetronic.cshtml";
    string reportId = "max_min_overdue";
    //var periodeAwal1 = (DateTime?)TempData.Peek("PeriodeAwal");
    //var periodeAkhir1 = (DateTime?)TempData.Peek("PeriodeAkhir");

    var maxItems = db.GetSetting("LimitFilterLJK");
}

@inject BDA.DataModel.DataEntities db

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="card card-default">
        @*filter*@
        <div class="row filter-panel" style="padding-top:0px;">
            <div class="card-body">
                <div class="row">
                    <div class="col-lg-4 form-group">
                        <label>Jenis LJK</label>
                        @(Html.DevExtreme().TagBox()
                            .ID("MemberTypes")
                            .DataSource(d => d.Mvc()
                                .Controller("MaxMinOverdue")
                                .LoadAction("GetMemberTypes")
                                .Key("kode_jenis_ljk"))
                            //.DataSourceOptions(d => d.Paginate(true).PageSize(10))
                            .ValueExpr("kode_jenis_ljk")
                            .DisplayExpr("Display")
                            .ShowSelectionControls(true)
                            .MaxDisplayedTags(3)
                            .SearchEnabled(true)
                            .ShowClearButton(true)
                            .OnSelectionChanged("onSelectionChanged")
                            .OnValueChanged("onJenisLJKChanged")
                            .Width("100%"))
                    </div>

                    <div class="col-lg-4 form-group">
                        <label>LJK</label>
                        @(Html.DevExtreme().TagBox()
                            .ID("Members")
                            .DataSource(d => d.Mvc()
                                .Controller("MaxMinOverdue")
                                .LoadAction("GetMembers")
                                .LoadParams(new { memberTypes = new JS("function() { return $(\"#MemberTypes\").dxTagBox(\"instance\").option(\"value\"); }"), reset = new JS("function() { return resetLJK; }") })
                                //.Key("kode_ljk")
                                .Key("CompositeKey")
                            )
                            .DataSourceOptions(d => d.Paginate(true).PageSize(10))
                            //.ValueExpr("kode_ljk")
                            .ValueExpr("CompositeKey")
                            .DisplayExpr("Display")
                            .ShowSelectionControls(true)
                            .MaxDisplayedTags(3)
                            .SearchEnabled(true)
                            .ShowClearButton(true)
                            .OnSelectionChanged("onSelectionChanged")
                            .OnOpened("onLJKOpened")
                            .OnValueChanged("onLJKChanged")
                            .Width("100%"))
                    </div>

                    <div class="col-lg-4 form-group">
                        <label>Jenis Debitur@*<span class="mandatory">*</span>*@</label>
                        @(Html.DevExtreme().TagBox()
                            .ID("DebiturTypes")
                            .DataSource(new [] { "Perorangan", "Badan Usaha", "Tidak Diketahui" })
                            .ShowSelectionControls(true)
                            .MaxDisplayedTags(3)
                            .SearchEnabled(true)
                            .OnSelectionChanged("onSelectionChanged")
                            .Width("100%"))
                    </div>

                    <div class="col-lg-4 form-group">
                        <label>Status Collectability@*<span class="mandatory">*</span>*@</label>
                        @(Html.DevExtreme().TagBox()
                            .ID("StatusCollectability")
                            .DataSource(new[] { "1", "2", "3", "4", "5" })
                            .ShowSelectionControls(true)
                            .MaxDisplayedTags(3)
                            .SearchEnabled(true)
                            .OnSelectionChanged("onSelectionChanged")
                            .Width("100%"))
                    </div>

                    <div class="col-lg-4 form-group">
                        <label>Periode Awal<span class="mandatory">*</span></label>
                        @(Html.DevExtreme().DateBox()
                            .ID("PeriodeAwal")
                            .DisplayFormat("dd MMM yyyy")
                            //.Value(periodeAwal1 == null ? DateTime.Now : periodeAwal1)
                            .Value(DateTime.Now)
                            .Max(DateTime.Now)
                            .Width("100%"))
                    </div>

                    <div class="col-lg-4 form-group">
                        <label>Periode Akhir<span class="mandatory">*</span></label>
                        @(Html.DevExtreme().DateBox()
                            .ID("PeriodeAkhir")
                            .DisplayFormat("dd MMM yyyy")
                            //.Value(periodeAkhir1 == null ? DateTime.Now : periodeAkhir1)
                            .Value(DateTime.Now)
                            .Min(DateTime.Now)
                            .Width("100%"))
                    </div>
                </div>

                <div class="float-left">
                    @(Html.DevExtreme().Button()
                        .ID("Filter")
                        .Type(ButtonType.Default)
                        .Text("Tampilkan")
                        .OnClick("onButtonFilterClicked")
                        .ValidationGroup("Filter"))
                </div>

                <div class="float-right">
                    @if (ViewBag.Export)
                    {
                        <a class="btn btn-light-primary font-weight-bolder btn-sm mr-2" href="javascript:Antrian();"><span class="image fa fa-file-invoice"></span> Antrian (CSV)</a>
                        <a class="btn btn-light-primary font-weight-bolder btn-sm mr-2" href="javascript:ExportToExcel();"><span class="image fa fa-file-excel"></span> Export Excel</a>
                        @*<a class="btn btn-light-primary font-weight-bolder btn-sm mr-2" href="javascript:ExportToPdf();"><span class="image fa fa-file-pdf"></span> Export PDF</a>*@
                        <a class="btn btn-light-primary font-weight-bolder btn-sm mr-2" href="javascript:ExportToPdf2();"><span class="image fa fa-file-pdf"></span> Export PDF</a>
                    }
                </div>
            </div>
        </div>

        @*grid*@
        <div class="gridview-div">
            @(Html.DevExtreme().DataGrid()
                .ID("grid1")
                .DataSource(d => d.Mvc()
                    .Controller("MaxMinOverdue")
                    .LoadAction("GetGridData")
                    .Key("rowid")
                    .OnBeforeSend("onGridBeforeSend"))
                .RemoteOperations(true)
                .Width("100%")
                .AllowColumnResizing(true)
                .ColumnAutoWidth(true)
                .Columns(columns =>
                {
                    columns.Add().DataField("rowid").Visible(false);
                    columns.Add().Type(GridCommandColumnType.Buttons).Caption("Detail").Buttons(b =>
                    {
                        b.Add()
                            .Hint("Detail")
                            .Icon("detailslayout")
                            .OnClick("Detail");
                    });
                    columns.Add().DataField("periode").Caption("Periode").DataType(GridColumnDataType.DateTime).Format("dd MMM yyyy");
                    columns.Add().DataField("deskripsi_jenis_ljk").Caption("Jenis LJK");
                    columns.Add().DataField("member_code").Caption("Kode LJK");
                    columns.Add().DataField("status").Caption("Jenis Debitur");
                    columns.Add().DataField("cnt_distinct_cif").Caption("Jumlah Debitur").Format("#,##0");
                    columns.Add().DataField("cnt_acc").Caption("Jumlah Account").Format("#,##0");
                    columns.Add().DataField("min_overdue_days").Caption("Min Overdue Days").Format("#,##0");
                    columns.Add().DataField("max_overdue_days").Caption("Max Overdue Days").Format("#,##0");
                    columns.Add().DataField("collectibility_type_code").Caption("Collectability");
                    columns.Add().DataField("sum_outstanding").Caption("Outstanding").DataType(GridColumnDataType.String).Alignment(HorizontalAlignment.Right).Format("#,##0");
                })
                .FilterRow(f => f.Visible(true))
                .ShowBorders(false)
                .Paging(p =>
                {
                    p.PageSize(20);
                    p.Enabled(true);
                })
                .Pager(p =>
                {
                    p.ShowInfo(true);
                }))
        </div>
    </div>
}

@*<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.3.1/jspdf.umd.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.14/jspdf.plugin.autotable.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/exceljs/3.3.1/exceljs.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/FileSaver.js/1.3.8/FileSaver.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/babel-polyfill/7.4.0/polyfill.min.js"></script>*@

<script>
    window.jsPDF = window.jspdf.jsPDF;
    applyPlugin(window.jsPDF);
</script>

<script>
     function ExportToExcel() {
        $.ajax({
            type: "POST",
            url: "@Url.Action("LogExportIndex", "MaxMinOverdue")",
            success: function (response) {
                if (response.result == "Success") {
                    var grid = $("#grid1").dxDataGrid("instance");
                    //grid.option("onExporting", function (e) {
                    //    var workbook = new ExcelJS.Workbook();
                    //    var worksheet = workbook.addWorksheet('Sheet1');
                    //    DevExpress.excelExporter.exportDataGrid({
                    //        component: e.component,
                    //        worksheet: worksheet,
                    //        customizeCell: function (options) {
                    //            var gridCell = options.gridCell;
                    //            var excelCell = options.excelCell;

                    //            if (gridCell.rowType === "data") {
                    //                if (gridCell.column.dataField === 'sum_outstanding') {
                    //                    excelCell.value = parseInt(gridCell.value);
                    //                    excelCell.numFmt = '#,##0';
                    //                }
                    //            }
                    //        }
                    //    }).then(function () {
                    //        workbook.xlsx.writeBuffer().then(function (buffer) {
                    //            saveAs(new Blob([buffer], { type: "application/octet-stream" }), "MaxMinOverdue_" + new Date().toISOString().slice(0, 10) + ".xlsx");
                    //        });
                    //    });
                    //    e.cancel = true;
                    //});

                    grid.option("onExporting", function (e) {
                        e.fileName = "MaxMinOverdue_" + new Date().toISOString().slice(0, 10);
                    });
                    grid.option("onFileSaving", function (e) { });
                    grid.exportToExcel();
                }
            }
        });
    }

    function ExportToPdf() {
        $.ajax({
            type: "POST",
            url: "@Url.Action("LogExportIndex", "MaxMinOverdue")",
            success: function (response) {
                if (response.result == "Success") {
                    const doc = new jsPDF({
                        orientation: "landscape",
                        unit: "cm",
                        format: [21, 60]
                    });
                    var dataGrid = $("#grid1").dxDataGrid("instance");
                    var fileName = "MaxMinOverdue_" + new Date().toISOString().slice(0, 10) + ".pdf";
                    doc.setFontSize("6")
                    //var keys = $("#grid1").dxDataGrid("getSelectedRowsData")
                    //console.log(keys)
                    DevExpress.pdfExporter.exportDataGrid({
                        jsPDFDocument: doc,
                        component: dataGrid,
                        keepColumnWidths: true
                        //selectedRowsOnly: true
                    }).then(function () {
                        doc.save(fileName);
                    });
                }
            }
        });
    }

    function ExportToPdf2() {
        var dataGrid = $("#grid1").dxDataGrid("instance");
        dataGrid.option("onExporting", function (e) { });
        dataGrid.option("onFileSaving", function (e) {
            var fd = new FormData();
            fd.append("file", e.data);
            $.ajax({
                type: "POST",
                url: "@Url.Action("ExportPDF", "MaxMinOverdue")",
                data: fd,
                processData: false,
                contentType: false
            }).done(function (data) {
                window.location = "@Url.Action("File", "MaxMinOverdue")"
            });
            e.cancel = true;
        });

        dataGrid.exportToExcel();
    }

    function Antrian() {
        $("#grid1").dxDataGrid("instance").refresh().then(function () {
            $.ajax({
			type: "POST",
			url: "@Url.Action("Antrian", "MaxMinOverdue", new { reportId = reportId })",
			contentType: "application/x-www-form-urlencoded;charset=UTF-8",
            dataType: "json",
            success: function (response) {
                swal({ type: 'success', title: 'Success', text: response });
            },
            error: function (response) {
                swal({ type: 'error', title: 'Failed', text: response });
            }
		    });
        });
    }

    var resetLJK;

    $(function () {
        const startDate = $("#PeriodeAwal").dxDateBox({
            onValueChanged: function (e) {
                endDate.option("min", e.value);
            }
        }).dxDateBox("instance");
        const endDate = $("#PeriodeAkhir").dxDateBox({
            onValueChanged: function (e) {
                startDate.option("max", e.value);
            }
        }).dxDateBox("instance");

        $("#PeriodeAwal").dxValidator({
            validationGroup: "Filter",
            validationRules: [{ type: "required", message: "[Periode Awal] harus dipilih" }]
        })
        $("#PeriodeAkhir").dxValidator({
            validationGroup: "Filter",
            validationRules: [{ type: "required", message: "[Periode Akhir] harus dipilih" }]
        })
    });

    function onSelectionChanged(e) {
        if (e.addedItems.length > 0) {
            e.component.field().val(""); // Clears the search text. However, search filter is only applied to the widget after focus is lost in the input element
        }
    }

    function onJenisLJKChanged(e) {
        resetLJK = true;
        $("#Members").dxTagBox("instance").getDataSource().reload();
        $("#Members").dxTagBox("reset");
        resetLJK = false;
    }

    function onButtonFilterClicked(e) {
        const res = e.validationGroup.validate();
        if (res.status === "valid") {
            $("#grid1").dxDataGrid("instance").refresh();
        }
    }

    function onGridBeforeSend(method, ajaxOptions) {
        let memberTypes = $("#MemberTypes").dxTagBox("instance").option("value");

        let members = $("#Members").dxTagBox("instance").option("value");

        let tempPeriodeAwal = $("#PeriodeAwal").dxDateBox("instance").option("value");
        let periodeAwal = null;
        if (tempPeriodeAwal != null) {
            periodeAwal = tempPeriodeAwal.getFullYear() + '-' + (tempPeriodeAwal.getMonth() + 1) + '-' + tempPeriodeAwal.getDate();
        }

        let tempPeriodeAkhir = $("#PeriodeAkhir").dxDateBox("instance").option("value");
        let periodeAkhir = null;
        if (tempPeriodeAkhir != null) {
            periodeAkhir = tempPeriodeAkhir.getFullYear() + '-' + (tempPeriodeAkhir.getMonth() + 1) + '-' + tempPeriodeAkhir.getDate();
        }

        let jenisDebitur = $("#DebiturTypes").dxTagBox("instance").option("value");

        let statusCollectability = $("#StatusCollectability").dxTagBox("instance").option("value");

        ajaxOptions.data.memberTypes = JSON.stringify(memberTypes);
        ajaxOptions.data.members = JSON.stringify(members);
        ajaxOptions.data.periodeAwal = periodeAwal;
        ajaxOptions.data.periodeAkhir = periodeAkhir;
        ajaxOptions.data.jenisDebitur = JSON.stringify(jenisDebitur);
        ajaxOptions.data.statusCollectability = JSON.stringify(statusCollectability);
    }

    function onLJKOpened(e) {
        e.component.content().find('.dx-list-select-all').hide();
    }

    const maxItems = @maxItems;

    function onLJKChanged(e) {
        if (e.value.length > maxItems) {
            const newValue = e.value.slice(0, maxItems);
            e.component.option("value", newValue);
            //tooltip.show();
        }
    }

    function Detail(e) {
        var keys = e.row.key;
        if (typeof (keys) !== "undefined" && typeof (keys) !== null) {
            window.open('@Url.Action("Detail", "MaxMinOverdue")?id=' + keys.toString());
        }
    }
</script>

<style type="text/css">
    .mandatory {
        color: red;
    }
</style>
