@model BDA.DataModel.BDA_F01_MaxMinOverdue

@{
    Layout = "~/Views/Shared/_LayoutMainMetronic.cshtml";
}

@*<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.3.1/jspdf.umd.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.14/jspdf.plugin.autotable.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/exceljs/3.3.1/exceljs.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/FileSaver.js/1.3.8/FileSaver.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/babel-polyfill/7.4.0/polyfill.min.js"></script>*@

<script>
    window.jsPDF = window.jspdf.jsPDF;
    applyPlugin(window.jsPDF);
</script>

<script>
    function ExportToExcel() {
        $.ajax({
            type: "POST",
            url: "@Url.Action("LogExportDetail", "MaxMinOverDue")",
            success: function (response) {
                if (response.result == "Success") {
                    var grid = $("#grid1").dxDataGrid("instance");
                    grid.option("onExporting", function (e) {
                        e.fileName = "Detail_MaxMinOverdue_" + new Date().toISOString().slice(0, 10);
                    });
                    grid.exportToExcel();
                }
            }
        });
    }

    function ExportToTxt() {
        $.ajax({
            type: "POST",
            url: "@Url.Action("LogExportDetail", "MaxMinOverDue")",
            success: function (response) {
                if (response.result == "Success") {
                    var grid = $("#grid1").dxDataGrid("instance");
                    var fileName = "Detail_MaxMinOverdue_" + new Date().toISOString().slice(0, 10) + ".txt";

                    var workbook = new ExcelJS.Workbook();
                    var worksheet = workbook.addWorksheet('Main sheet');

                    DevExpress.excelExporter.exportDataGrid({
                        component: grid,
                        worksheet: worksheet,
                    }).then(function () {
                        workbook.csv.writeBuffer({ delimiter: "|" }).then(function (buffer) {
                            saveAs(new Blob([buffer], { type: "application/octet-stream" }), fileName);
                        });
                    });
                    grid.cancel = true;
                }
            }
        });
    }
</script>

@section RightToolbar{
    <div class="d-flex align-items-center">
        <!--begin::Actions-->
        @if (ViewBag.Export)
        {
            <a class="btn btn-light-primary font-weight-bolder btn-sm mr-2" href="javascript:ExportToExcel();"><span class="image fa fa-file-excel"></span> Export Excel</a>
            <a class="btn btn-light-primary font-weight-bolder btn-sm mr-2" href="javascript:ExportToTxt();"><span class="image fa fa-file-archive"></span> Export TXT</a>
        }
        <!--end::Actions-->
    </div>
}

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="card card-default">
        <div class="row filter-panel" style="padding-top:0px;">
            <div class="card-body">
                <div class="float-left">
                    <div style="border-radius: 10px; background-color: orange; padding: 3px">
                        <span style="color: white; font-weight: bold">Sumber Data dari HIVE</span>
                    </div>
                </div>
            </div>
        </div>

        @*grid*@
        <div>
            @(Html.DevExtreme().DataGrid()
                .ID("grid1")
                .DataSource(d => d.Mvc()
                    .Controller("MaxMinOverdue")
                    .LoadAction("GetDetailData")
                    .LoadParams(new { id = Model.rowid }))
                .RemoteOperations(false)
                .Width("100%")
                .AllowColumnResizing(true)
                .ColumnAutoWidth(true)
                .Columns(columns =>
                {
                    columns.Add().DataField("cif").Caption("ID Debitur");
                    columns.Add().DataField("account_no").Caption("ID Account");
                    columns.Add().DataField("periode").Caption("Periode").DataType(GridColumnDataType.DateTime).Format("MMM yyyy");
                    columns.Add().DataField("desc_jenis_ljk_byreff").Caption("Jenis LJK");
                    columns.Add().DataField("member_code").Caption("Kode LJK");
                    columns.Add().DataField("qty_all").Caption("Jumlah Debitur").Format("#,##0");
                    columns.Add().DataField("qty_distinct_acc_cif").Caption("Jumlah Account").Format("#,##0");
                    columns.Add().DataField("min_overdue_days").Caption("Min Overdue Days").Format("#,##0");
                    columns.Add().DataField("max_overdue_days").Caption("Max Overdue Days").Format("#,##0");
                    columns.Add().DataField("collectibility_type_code").Caption("Collectability");
                    columns.Add().DataField("sum_outstanding").Caption("Outstanding").Format("#,##0");
                })
                .ColumnResizingMode(ColumnResizingMode.Widget)
                .FilterRow(f => f.Visible(true))
                .ShowBorders(false)
                // .RowAlternationEnabled(false)
                .Paging(p =>
                {
                    p.PageSize(20);
                    p.Enabled(true);
                })
                .Pager(p =>
                {
                    p.ShowInfo(true);
                })
                )
        </div>
    </div>
} 