@{
    Layout = "~/Views/Shared/_LayoutMainMetronic.cshtml";

    var isExport = false;
    //if (ViewBag.Akses != "Non Pengawas")
    if (ViewBag.Export)
    {
        isExport = true;
    }

    var maxItems = db.GetSetting("LimitFilterLJK");
}

@inject BDA.DataModel.DataEntities db

@*<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.3.1/jspdf.umd.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.14/jspdf.plugin.autotable.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/exceljs/3.3.1/exceljs.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/FileSaver.js/1.3.8/FileSaver.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/babel-polyfill/7.4.0/polyfill.min.js"></script>*@

<script>
    window.jsPDF = window.jspdf.jsPDF;
    applyPlugin(window.jsPDF);
</script>

<script type="text/javascript">
    function ExportToExcel() {
        $.ajax({
            type: "POST",
            url: "@Url.Action("LogExportIndex", "HMLBadanUsaha")",
            success: function (response) {
                if (response.result == "Success") {
                    var grid = $("#grid1").dxDataGrid("instance");
                    //grid.option("onExporting", function (e) {
                    //    var workbook = new ExcelJS.Workbook();
                    //    var worksheet = workbook.addWorksheet('Sheet1');
                    //    DevExpress.excelExporter.exportDataGrid({
                    //        component: e.component,
                    //        worksheet: worksheet,
                    //        customizeCell: function (options) {
                    //            var gridCell = options.gridCell;
                    //            var excelCell = options.excelCell;

                    //            if (gridCell.rowType === "data") {
                    //                if (gridCell.column.dataField === 'credit_limit') {
                    //                    excelCell.value = parseInt(gridCell.value);
                    //                    excelCell.numFmt = '#,##0';
                    //                }
                    //                if (gridCell.column.dataField === 'outstanding') {
                    //                    excelCell.value = parseInt(gridCell.value);
                    //                    excelCell.numFmt = '#,##0';
                    //                }
                    //                if (gridCell.column.dataField === 'debitur_count') {
                    //                    excelCell.value = parseInt(gridCell.value);
                    //                    excelCell.numFmt = '#,##0';
                    //                }
                    //            }
                    //        }
                    //    }).then(function () {
                    //        workbook.xlsx.writeBuffer().then(function (buffer) {
                    //            saveAs(new Blob([buffer], { type: "application/octet-stream" }), "HMLBadanUsaha_" + new Date().toISOString().slice(0, 10) + ".xlsx");
                    //        });
                    //    });
                    //    e.cancel = true;
                    //});

                    grid.option("onExporting", function (e) {
                        e.fileName = "HMLBadanUsaha_" + new Date().toISOString().slice(0, 10);
                    });
                    grid.option("onFileSaving", function (e) { });
                    grid.exportToExcel();
                }
            }
        });
    }

    function ExportToPdf() {
        $.ajax({
            type: "POST",
            url: "@Url.Action("LogExportIndex", "HMLBadanUsaha")",
            success: function (response) {
                if (response.result == "Success") {
                    const doc = new jsPDF({
                        orientation: "landscape",
                        unit: "cm",
                        format: [21, 60]
                    });
                    var dataGrid = $("#grid1").dxDataGrid("instance");
                    var fileName = "HMLBadanUsaha_" + new Date().toISOString().slice(0, 10) + ".pdf";
                    doc.setFontSize("6")
                    //var keys = $("#grid1").dxDataGrid("getSelectedRowsData")
                    //console.log(keys)
                    DevExpress.pdfExporter.exportDataGrid({
                        jsPDFDocument: doc,
                        component: dataGrid,
                        keepColumnWidths: true
                        //selectedRowsOnly: true
                    }).then(function () {
                        doc.save(fileName);
                    });
                }
            }
        });
    }

    function ExportToPdf2() {
        var dataGrid = $("#grid1").dxDataGrid("instance");
        dataGrid.option("onExporting", function (e) { });
        dataGrid.option("onFileSaving", function (e) {
            var fd = new FormData();
            fd.append("file", e.data);
            $.ajax({
                type: "POST",
                url: "@Url.Action("ExportPDF", "HMLBadanUsaha")",
                data: fd,
                processData: false,
                contentType: false
            }).done(function (data) {
                window.location = "@Url.Action("File", "HMLBadanUsaha")"
            });
            e.cancel = true;
        });

        dataGrid.exportToExcel();
    }

    var resetLJK;

    $(function () {
        const startDate = $("#PeriodeAwal").dxDateBox({
            onValueChanged: function (e) {
                endDate.option("min", e.value);
            }
        }).dxDateBox("instance");
        const endDate = $("#PeriodeAkhir").dxDateBox({
            onValueChanged: function (e) {
                startDate.option("max", e.value);
            }
        }).dxDateBox("instance");

        $("#PeriodeAwal").dxValidator({
            validationGroup: "Filter",
            validationRules: [{ type: "required", message: "[Periode Awal] harus dipilih" }]
        })
        $("#PeriodeAkhir").dxValidator({
            validationGroup: "Filter",
            validationRules: [{ type: "required", message: "[Periode Akhir] harus dipilih" }]
        })
        $("#JenisDebitur").dxValidator({
            validationGroup: "Filter",
            validationRules: [{ type: "required", message: "[Jenis Debitur] harus dipilih" }]
        })
    });

    function onSelectionChanged(e) {
        if (e.addedItems.length > 0) {
            e.component.field().val("");
        }
    }

    function onJenisLJKChanged(e) {
        resetLJK = true;
        $("#Members").dxTagBox("instance").getDataSource().reload();
        $("#Members").dxTagBox("reset");
        resetLJK = false;
    }

    function onButtonFilterClicked(e) {
        const res = e.validationGroup.validate();
        if (res.status === "valid") {
            $("#grid1").dxDataGrid("instance").refresh();
            $("#pie-chart").dxPieChart("instance").refresh();
            $("#bar-chart").dxChart("instance").refresh();
        }
    }

    function onGridBeforeSend(method, ajaxOptions) {
        let memberTypes = $("#MemberTypes").dxTagBox("instance").option("value");

        let members = $("#Members").dxTagBox("instance").option("value");

        let hml = $("#HMLSegmen").dxTagBox("instance").option("value");

        //let mcdfa = $("#MCDFASegmen").dxTagBox("instance").option("value");

        let tempPeriodeAwal = $("#PeriodeAwal").dxDateBox("instance").option("value");
        let periodeAwal = null;
        if (tempPeriodeAwal != null) {
            periodeAwal = tempPeriodeAwal.getFullYear() + '-' + (tempPeriodeAwal.getMonth() + 1) + '-' + tempPeriodeAwal.getDate();
        }

        let tempPeriodeAkhir = $("#PeriodeAkhir").dxDateBox("instance").option("value");
        let periodeAkhir = null;
        if (tempPeriodeAkhir != null) {
            periodeAkhir = tempPeriodeAkhir.getFullYear() + '-' + (tempPeriodeAkhir.getMonth() + 1) + '-' + tempPeriodeAkhir.getDate();
        }

        let jenisDebitur = $("#JenisDebitur").dxSelectBox("instance").option("value");

        ajaxOptions.data.memberTypes = JSON.stringify(memberTypes);
        ajaxOptions.data.members = JSON.stringify(members);
        ajaxOptions.data.periodeAwal = periodeAwal;
        ajaxOptions.data.periodeAkhir = periodeAkhir;
        ajaxOptions.data.hml = JSON.stringify(hml);
        //ajaxOptions.data.mcdfa = JSON.stringify(mcdfa);
        ajaxOptions.data.jenisDebitur = jenisDebitur;
    }

    function onLJKOpened(e) {
        e.component.content().find('.dx-list-select-all').hide();
    }

    const maxItems = @maxItems;

    function onLJKChanged(e) {
        if (e.value.length > maxItems) {
            const newValue = e.value.slice(0, maxItems);
            e.component.option("value", newValue);
            //tooltip.show();
        }
    }
</script>

<style type="text/css">
    .mandatory {
        color: red;
    }
</style>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="card card-default">
        @*filter*@
        <div class="row filter-panel" style="padding-top:0px;">
            <div class="card-body">
                <div class="row">
                    <div class="col-lg-4 form-group">
                        <label>Jenis LJK</label>
                        @(Html.DevExtreme().TagBox()
                            .ID("MemberTypes")
                            .DataSource(d => d.Mvc()
                                .Controller("HMLBadanUsaha")
                                .LoadAction("GetMemberTypes")
                                .Key("kode_jenis_ljk"))
                            //.DataSourceOptions(d => d.Paginate(true).PageSize(10))
                            .ValueExpr("kode_jenis_ljk")
                            .DisplayExpr("Display")
                            .ShowSelectionControls(true)
                            .MaxDisplayedTags(3)
                            .SearchEnabled(true)
                            .ShowClearButton(true)
                            .OnSelectionChanged("onSelectionChanged")
                            .OnValueChanged("onJenisLJKChanged")
                            .Width("100%"))
                    </div>

                    <div class="col-lg-4 form-group">
                        <label>LJK</label>
                        @(Html.DevExtreme().TagBox()
                            .ID("Members")
                            .DataSource(d => d.Mvc()
                                .Controller("HMLBadanUsaha")
                                .LoadAction("GetMembers")
                                .LoadParams(new { memberTypes = new JS("function() { return $(\"#MemberTypes\").dxTagBox(\"instance\").option(\"value\"); }"), reset = new JS("function() { return resetLJK; }") })
                                //.Key("kode_ljk")
                                .Key("CompositeKey")
                            )
                            .DataSourceOptions(d => d.Paginate(true).PageSize(10))
                            //.ValueExpr("kode_ljk")
                            .ValueExpr("CompositeKey")
                            .DisplayExpr("Display")
                            .ShowSelectionControls(true)
                            .MaxDisplayedTags(3)
                            .SearchEnabled(true)
                            .ShowClearButton(true)
                            .OnSelectionChanged("onSelectionChanged")
                            .OnOpened("onLJKOpened")
                            .OnValueChanged("onLJKChanged")
                            .Width("100%"))
                    </div>

                    <div class="col-lg-4 form-group">
                        <label>HML Segmen</label>
                        @(Html.DevExtreme().TagBox()
                            .ID("HMLSegmen")
                            .DataSource(new[] {
                                new { display = "H", value = "1.H" },
                                new { display = "M", value = "2.M" },
                                new { display = "L", value = "3.L" }
                            })
                            .DataSourceOptions(d => d.Paginate(true).PageSize(10))
                            .ValueExpr("value")
                            .DisplayExpr("display")
                            .ShowSelectionControls(true)
                            .MaxDisplayedTags(3)
                            .SearchEnabled(true)
                            .ShowClearButton(true)
                            .OnSelectionChanged("onSelectionChanged")
                            .Width("100%"))
                    </div>

                    <div class="col-lg-4 form-group">
                        <label>Periode Awal<span class="mandatory">*</span></label>
                        @(Html.DevExtreme().DateBox()
                            .ID("PeriodeAwal")
                            .DisplayFormat("dd MMM yyyy")
                            .Value(DateTime.Now)
                            .Max(DateTime.Now)
                            .Width("100%"))
                    </div>

                    <div class="col-lg-4 form-group">
                        <label>Periode Akhir<span class="mandatory">*</span></label>
                        @(Html.DevExtreme().DateBox()
                            .ID("PeriodeAkhir")
                            .DisplayFormat("dd MMM yyyy")
                            .Value(DateTime.Now)
                            .Min(DateTime.Now)
                            .Width("100%"))
                    </div>

                    @*<div class="col-lg-4 form-group">
                        <label>MCDFA Segmen</label>
                        @(Html.DevExtreme().TagBox()
                            .ID("MCDFASegmen")
                            .DataSource(new[] { "M", "C", "D", "F", "A" })
                            .DataSourceOptions(d => d.Paginate(true).PageSize(10))
                            .ShowSelectionControls(true)
                            //.MaxDisplayedTags(3)
                            .SearchEnabled(true)
                            .ShowClearButton(true)
                            .OnSelectionChanged("onSelectionChanged")
                            .Width("100%"))
                    </div>*@

                    <div class="col-lg-4 form-group">
                        <label>Jenis Fasilitas<span class="mandatory">*</span></label>
                        @(Html.DevExtreme().SelectBox()
                            .ID("JenisDebitur")
                            .DataSource(new[] { "F01", "F02" })
                            .Value("F01")
                            .Width("100%"))
                    </div>
                </div>

                <div class="float-left">
                    @(Html.DevExtreme().Button()
                            .ID("Filter")
                            .Type(ButtonType.Default)
                            .Text("Tampilkan")
                            .OnClick("onButtonFilterClicked")
                            .ValidationGroup("Filter"))
                </div>

                <div class="float-right">
                    @if (ViewBag.Export)
                    {
                        <a class="btn btn-light-primary font-weight-bolder btn-sm mr-2" href="javascript:ExportToExcel();"><span class="image fa fa-file-excel"></span> Export Excel</a>
                        @*<a class="btn btn-light-primary font-weight-bolder btn-sm mr-2" href="javascript:ExportToPdf();"><span class="image fa fa-file-pdf"></span> Export PDF</a>*@
                        <a class="btn btn-light-primary font-weight-bolder btn-sm mr-2" href="javascript:ExportToPdf2();"><span class="image fa fa-file-pdf"></span> Export PDF</a>
                    }
                </div>
            </div>
        </div>

        @*grid*@
        <div class="gridview-div">
            @(Html.DevExtreme().DataGrid()
                .ID("grid1")
                .DataSource(d => d.Mvc()
                    .Controller("HMLBadanUsaha")
                    .LoadAction("GetGridData")
                    .OnBeforeSend("onGridBeforeSend"))
                .RemoteOperations(true)
                .Width("100%")
                .AllowColumnResizing(true)
                .Columns(columns =>
                {
                    columns.Add().DataField("hml").Caption("HML Segmen").Width("100%");
                    columns.Add().DataField("outstanding").Caption("Outstanding").DataType(GridColumnDataType.String).Alignment(HorizontalAlignment.Right).Format("#,##0").Width("100%");
                    columns.Add().DataField("credit_limit").Caption("Credit Limit").DataType(GridColumnDataType.String).Alignment(HorizontalAlignment.Right).Format("#,##0").Width("100%");
                    columns.Add().DataField("debitur_count").Caption("Jumlah Debitur").DataType(GridColumnDataType.String).Alignment(HorizontalAlignment.Right).Format("#,##0").Width("100%");
                })
                .FilterRow(f => f.Visible(true))
                .ShowBorders(false)
                ///.Selection(c => c.Mode(SelectionMode.Single))
                .Paging(p =>
                {
                    p.PageSize(20);
                    p.Enabled(true);
                })
                .Pager(p =>
                {
                    p.ShowInfo(true);
                })
                @*.OnExporting(@<text>
                    function(e) {
                        var workbook = new ExcelJS.Workbook();
                        var worksheet = workbook.addWorksheet('Sheet1');
                        DevExpress.excelExporter.exportDataGrid({
                            component: e.component,
                            worksheet: worksheet,
                            customizeCell: function (options) {
                                var gridCell = options.gridCell;
                                var excelCell = options.excelCell;

                                if (gridCell.rowType === "data") {
                                    if (gridCell.column.dataField === 'credit_limit') {
                                        excelCell.value = parseInt(gridCell.value);
                                        excelCell.numFmt = '#,##0';
                                    }
                                    if (gridCell.column.dataField === 'outstanding') {
                                        excelCell.value = parseInt(gridCell.value);
                                        excelCell.numFmt = '#,##0';
                                    }
                                    if (gridCell.column.dataField === 'debitur_count') {
                                        excelCell.value = parseInt(gridCell.value);
                                        excelCell.numFmt = '#,##0';
                                    }
                                }
                            }
                        }).then(function () {
                            workbook.xlsx.writeBuffer().then(function (buffer) {
                                saveAs(new Blob([buffer], { type: "application/octet-stream" }), "HMLBadanUsaha_" + new Date().toISOString().slice(0, 10) +".xlsx");
                            });
                        });
                        e.cancel = true;
                    }
                </text>)*@
            )
        </div>

        @*chart*@
        <div class="row">
            <div class="col-lg-6">
                @(Html.DevExtreme().PieChart()
                    .ID("pie-chart")
                    .DataSource(d => d.Mvc()
                        .Controller("HMLBadanUsaha")
                        .LoadAction("GetGridData")
                        .OnBeforeSend("onGridBeforeSend"))
                    .ResolveLabelOverlapping(ShiftLabelOverlap.Shift)
                    .Margin(m => m.Top(20).Bottom(20).Right(20).Left(20))
                    //.Size(s => s.Height(400).Width(400))
                    .Title("Jumlah Debitur")
                    .LoadingIndicator(l => l.Enabled(true))
                    .Legend(l => l.Visible(false))
                    .Series(s => s
                        .Add()
                        .ArgumentField("hml")
                        .ValueField("debitur_count")
                        .Label(l => l
                            .Visible(true)
                            .Connector(c => c.Visible(true))
                            .CustomizeText(@<text>
                                function(arg) {
                                    return arg.argumentText;
                                }
                            </text>)
                        )
                    )
                    .Tooltip(t => t
                        .Enabled(true)
                        .CustomizeTooltip(@<text>
                            function(arg) {
                                return {
                                    text: arg.value.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",") + " (" + arg.percentText + ")"
                                }
                            }
                        </text>)
                    )
                    .Export(e => e.Enabled(isExport))
                    .OnExporting(@<text>
                        function(e) {
                            e.fileName = "PieChart_HMLBadanUsaha_" + new Date().toISOString().slice(0, 10);
                            $.ajax({
                                type: "POST",
                                url: "@Url.Action("LogExportIndex", "HMLBadanUsaha")",
                                success: function (response) {
                                    if (response.result == "Success") {

                                    }
                                }
                            });
                        }
                    </text>))
            </div>

            <div class="col-lg-6">
                @(Html.DevExtreme().Chart()
                    .ID("bar-chart")
                    .DataSource(d => d.Mvc()
                        .Controller("HMLBadanUsaha")
                        .LoadAction("GetGridData")
                        .OnBeforeSend("onGridBeforeSend"))
                    .Palette(VizPalette.Bright)
                    .Margin(m => m.Top(20).Bottom(20).Right(20).Left(20))
                    .Title("Outstanding")
                    .LoadingIndicator(l => l.Enabled(true))
                    .Legend(l => l.Visible(false))
                    .CommonSeriesSettings(s => s
                        .ArgumentField("hml")
                        .ValueField("outstanding")
                        .IgnoreEmptyPoints(true)
                        .Type(SeriesType.Bar))
                    .SeriesTemplate(t => t.NameField("hml"))
                    .Tooltip(t => t
                        .Enabled(true)
                        .CustomizeTooltip(@<text>
                            function(arg) {
                                if (arg.value > 1000000) {
                                    return {
                                        text: "Rp " + Math.round(arg.value/1000000).toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",") + " Juta"
                                    }
                                } else {
                                    return {
                                        text: "Rp " + arg.valueText.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",")
                                    }
                                }
                            }
                        </text>)
                    )
                    .ValueAxis(a => a
                        .Add()
                        .Label(l => l.CustomizeText(@<text>
                            function() {
                                if (this.value > 1000000) {
                                        return "Rp " + Math.round(this.value/1000000).toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",") + " Juta";
                                } else {
                                    return "Rp " + this.valueText.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                                }
                            }
                        </text>))
                    )
                    .Export(e => e.Enabled(isExport))
                    .OnExporting(@<text>
                        function(e) {
                            e.fileName = "BarChart_HMLBadanUsaha_" + new Date().toISOString().slice(0, 10);
                            $.ajax({
                                type: "POST",
                                url: "@Url.Action("LogExportIndex", "HMLBadanUsaha")",
                                success: function (response) {
                                    if (response.result == "Success") {

                                    }
                                }
                            });
                        }
                    </text>))
            </div>
        </div>
    </div>
} 