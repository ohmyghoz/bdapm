@model BDA.DataModel.Alert_Summary

@{
    Layout = "~/Views/Shared/_LayoutMainMetronic.cshtml";

    var levelAlert = (string[])TempData.Peek("LevelAlert");
    var memberTypes = (string[])TempData.Peek("MemberTypes");
    var members = (string[])TempData.Peek("Members");
    var periodeAwal = (DateTime?)TempData.Peek("PeriodeAwal");
    var periodeAkhir = (DateTime?)TempData.Peek("PeriodeAkhir");
    var dataMart = (string)TempData.Peek("DataMart");
    var permintaanIDeb = (string)TempData.Peek("PermintaanIDeb");
    var waktu = (string)TempData.Peek("Waktu");
    var isExport = false;
    var ttNilai1 = (string)TempData.Peek("ttNilai1");
    var ttNilaiRata2 = (string)TempData.Peek("ttNilaiRata2");
    //if (ViewBag.Akses != "Non Pengawas")
    if (ViewBag.Export)
    {
        isExport = true;
    }

    var fdt = "dd MMM yyyy HH:mm:ss";
    if (dataMart == "Bulanan")
    {
        fdt = "MMM yyyy HH:mm:ss";
    }
}

@*<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.3.1/jspdf.umd.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.14/jspdf.plugin.autotable.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/exceljs/3.3.1/exceljs.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/FileSaver.js/1.3.8/FileSaver.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/babel-polyfill/7.4.0/polyfill.min.js"></script>*@

<script>
    window.jsPDF = window.jspdf.jsPDF;
    applyPlugin(window.jsPDF);
</script>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="card card-default">
        <div class="row filter-panel" style="padding-top:0px;">
            <div class="card-body">
                <div class="row">
                    <div class="col-lg-4 form-group">
                        <label>Level Alert</label>
                        @(Html.DevExtreme().SelectBox()
                            .ID("LevelAlert")
                            .DataSource(new[] {
                                new { display = "Red", value = "3" },
                                new { display = "Yellow", value = "2" },
                                new { display = "Green", value = "1" },
                                new { display = "Grey", value = "0" }
                            })
                            .ValueExpr("value")
                            .DisplayExpr("display")
                            .Value(levelAlert)
                            .Width("100%")
                            .ReadOnly(true))
                    </div>

                    <div class="col-lg-4 form-group">
                        <label>Jenis LJK</label>
                        @(Html.DevExtreme().TagBox()
                            .ID("MemberTypes")
                            .DataSource(d => d.Mvc()
                                .Controller("RentangWaktuPermintaan")
                                .LoadAction("GetMemberTypes")
                                .Key("kode_jenis_ljk"))
                            .ValueExpr("kode_jenis_ljk")
                            .DisplayExpr("Display")
                            .MaxDisplayedTags(3)
                            .Value(memberTypes)
                            .Width("100%")
                            .ReadOnly(true))
                    </div>

                    <div class="col-lg-4 form-group">
                        <label>LJK</label>
                        @(Html.DevExtreme().TagBox()
                            .ID("Members")
                            .DataSource(d => d.Mvc()
                                .Controller("RentangWaktuPermintaan")
                                .LoadAction("GetMembers")
                                .LoadParams(new { memberTypes = new JS("function() { return $(\"#MemberTypes\").dxTagBox(\"instance\").option(\"value\"); }") })
                                //.Key("kode_ljk")
                                .Key("CompositeKey")
                            )
                            //.ValueExpr("kode_ljk")
                            .ValueExpr("CompositeKey")
                            .DisplayExpr("Display")
                            .MaxDisplayedTags(3)
                            .Value(members)
                            .Width("100%")
                            .ReadOnly(true))
                    </div>

                    <div class="col-lg-4 form-group">
                        <label>Periode Awal</label>
                        @(Html.DevExtreme().DateBox()
                            .ID("PeriodeAwal")
                            .DisplayFormat("dd MMM yyyy")
                            .Value(periodeAwal)
                            .Width("100%")
                            .ReadOnly(true))
                    </div>

                    <div class="col-lg-4 form-group">
                        <label>Periode Akhir</label>
                        @(Html.DevExtreme().DateBox()
                            .ID("PeriodeAkhir")
                            .DisplayFormat("dd MMM yyyy")
                            .Value(periodeAkhir)
                            .Width("100%")
                            .ReadOnly(true))
                    </div>

                    <div class="col-lg-4 form-group">
                        <label>Data Mart</label>
                        @(Html.DevExtreme().SelectBox()
                            .ID("DataMart")
                            .DataSource(new[] { "Bulanan", "Harian" })
                            .Value(dataMart)
                            .Width("100%")
                            .ReadOnly(true))
                    </div>

                    <div class="col-lg-4 form-group">
                        <label>Jumlah Permintaan IDeb</label>
                        @(Html.DevExtreme().SelectBox()
                            .ID("PermintaanIDeb")
                            .DataSource(new[] {
                                new { display = "Total Permintaan", value = "Total Permintaan" },
                                new { display = "Interactive", value = "Interactive" },
                                new { display = "Batch", value = "Batch" },
                                new { display = "Individu", value = "Individu" },
                                new { display = "Badan Usaha", value = "NonIndividu" }
                            })
                            .ValueExpr("value")
                            .DisplayExpr("display")
                            .Value(permintaanIDeb)
                            .Width("100%")
                            .ReadOnly(true))
                    </div>

                    <div class="col-lg-4 form-group">
                        <label>Waktu</label>
                        @(Html.DevExtreme().SelectBox()
                            .ID("Waktu")
                            .DataSource(new[] {
                                new { display = "5 Menit", value = "RWP_5_Menit" },
                                new { display = "30 Menit", value = "RWP_30_Menit" },
                                new { display = "60 Menit", value = "RWP_60_Menit" },
                                new { display = "5 Jam", value = "RWP_5_Jam" },
                                new { display = "10 Jam", value = "RWP_10_Jam" }
                            })
                            .ValueExpr("value")
                            .DisplayExpr("display")
                            .Value(waktu)
                            .Width("100%")
                            .ReadOnly(true))
                    </div>

                    <div class="col-lg-4 form-group">
                        <label>Visualisasi</label>
                        @(Html.DevExtreme().SelectBox()
                            .ID("Visualisasi")
                            .DataSource(new[]
                            {
                                new { display = "Point & Line", value = "Line" },
                                new { display = "Bar & Line", value = "Bar" },
                                new { display = "Point & Point", value = "Scatter" }
                            })
                            .ValueExpr("value")
                            .DisplayExpr("display")
                            .SearchEnabled(true)
                            .Value("Line")
                            //.ShowClearButton(true)
                            .Width("100%")
                            .OnValueChanged("onVisualisasiChanged"))
                    </div>
                </div>

                <div class="float-right">
                    @if (ViewBag.Export)
                    {
                        <a class="btn btn-light-primary font-weight-bolder btn-sm mr-2" href="javascript:PrintPage();">Print Page</a>
                    }
                </div>
            </div>
        </div>
        <div class="gridview-div">
            @(Html.DevExtreme().Chart()
                .ID("chart1")
                .DataSource(d => d.Mvc()
                    .Controller("RentangWaktuPermintaan")
                    .LoadAction("GetChartData"))
                .Palette(VizPalette.HarmonyLight)
                .Export(e => e.Enabled(isExport))
                .OnExporting(@<text>
                    function(e) {
                        $.ajax({
                            type: "POST",
                            url: "@Url.Action("LogExportDetail", "RentangWaktuPermintaan")",
                            success: function (response) {
                                if (response.result == "Success") {
                                    e.fileName = "Chart_RentangWaktuPermintaan_" + new Date().toISOString().slice(0, 10);
                                } else {
                                    e.cancel = true;
                                }
                            }
                        });
                    }
                </text>)
                .Margin(m => m.Top(20).Bottom(20).Right(20).Left(20))
                .Legend(l => l.Visible(false))
                .Tooltip(t => t.Enabled(true))
                .ValueAxis(v => v
                    .Add()
                    .Visible(true)
                    .AutoBreaksEnabled(true)
                    .MaxAutoBreakCount(1)
                    .BreakStyle(b => b.Line(ScaleBreakLineStyle.Waved))
                )
                .ArgumentAxis(a => a
                    .Type(AxisScaleType.Discrete)
                    .ArgumentType(ChartDataType.DateTime)
                    .Label(l => l
                        //.Format("dd MMM yyyy HH:mm:ss")
                        .Format(fdt)
                        .DisplayMode(ChartLabelDisplayMode.Rotate)
                        //.OverlappingBehavior(OverlappingBehavior.Rotate)
                        )
                    )
                .CommonSeriesSettings(s => s.ArgumentField("PERIODE"))
                .CustomizePoint(@<text>
                   function() {
                        if (this.seriesName == "Jumlah Permintaan") {
                            if (this.data.LEVEL_ALERT == "3") {
                                return { color: 'red' };
                            } else if (this.data.LEVEL_ALERT == "2") {
                                return { color: 'yellow' };
                            } else if (this.data.LEVEL_ALERT == "1") {
                                return { color: 'green' };
                            } else {
                                return { color: 'grey' };
                            }
                        }
                    }
                </text>)
                .ResolveLabelOverlapping(ChartResolveLabelOverlapping.Hide)
                .Series(s =>
                {
                    s.Add()
                        .ValueField("NILAI1")
                        .Name("Jumlah Permintaan")
                        .Type(SeriesType.Scatter)
                        .Label(l => l
                            .Visible(true)
                        );
                    s.Add()
                       .ValueField("NILAI_PEMBANDING1")
                       .Name("Rata-rata Diri Sendiri")
                       .Type(SeriesType.Line)
                       .Point(e => e.Visible(false))
                       .Color("#ECE769");
                })
                .LoadingIndicator(l => l.Enabled(true))
                .OnPointClick("onPointClicked"))
        </div>
    </div>

    <div class="card card-default">
        <div class="row filter-panel" style="padding-top:0px;">
            <div class="card-body">
                <div class="float-left">
                    <label style="font-weight:400;font-size:large">Informasi Pendukung</label>
                </div>
                <div class="float-right">
                    <a class="btn btn-light-primary font-weight-bolder btn-sm mr-2" href="javascript:Inquiry();"><span class="image fa fa-desktop"></span> Detail</a>
                    @if (ViewBag.Export)
                    {
                        <a class="btn btn-light-primary font-weight-bolder btn-sm mr-2" href="javascript:ExportToExcel();"><span class="image fa fa-file-excel"></span> Export Excel</a>
                        <a class="btn btn-light-primary font-weight-bolder btn-sm mr-2" href="javascript:ExportToTxt();"><span class="image fa fa-file-archive"></span> Export TXT</a>
                    }
                </div>
            </div>
        </div>
        <div class="gridview-div">
            @(Html.DevExtreme().DataGrid()
                .ID("grid1")
                .DataSource(d => d.Mvc()
                    .Controller("RentangWaktuPermintaan")
                    .LoadAction("GetChartData")
                    .Key("rowid"))
                .RemoteOperations(true)
                .Width("100%")
                .AllowColumnResizing(true)
                .Columns(columns =>
                {
                    columns.Add().DataField("rowid").Visible(false);
                    columns.Add().DataField("LEVEL_ALERT").Caption("Level Alert").Alignment(HorizontalAlignment.Center).Width("100%").CellTemplate(
                        @<text>
                            <% if (data.LEVEL_ALERT == "3") { %>
                                <img src="~/assets/img/ball_red.png" />
                            <% } else if (data.LEVEL_ALERT == "2") { %>
                                <img src="~/assets/img/ball_yellow.png" />
                            <% } else if (data.LEVEL_ALERT == "1") { %>
                                <img src="~/assets/img/ball_green.png" />
                            <% } else { %>
                                <img src="~/assets/img/ball_grey.png" />
                            <% } %>
                        </text>);
                    columns.Add().DataField("NAMA_ALERT").Caption("Nama Alert").Width("100%");
                    columns.Add().DataField("TIPE_PERIODE").Caption("Data Mart").Width("100%");
                    columns.Add().DataField("PERIODE").Caption("Periode").DataType(GridColumnDataType.DateTime).Format(fdt).Width("100%");
                    columns.Add().DataField("JenisLJK").Caption("Jenis LJK").Width("100%");
                    columns.Add().DataField("LJK").Caption("LJK").Width("100%");
                    columns.Add().DataField("DIMENSI1").Caption("Permintaan IDeb").Width("100%");
                    columns.Add().DataField("NILAI1").Caption("Jumlah Permintaan").Format("#,##0.######").Width("100%").HeaderCellTemplate(@<text>
                    <div id='tooltiptarget1'>Jumlah Permintaan</div>
                    </text>);
                    columns.Add().DataField("NILAI_PEMBANDING1").Caption("Nilai Rata-rata").Format("#,##0.######").Width("100%").HeaderCellTemplate(@<text>
                    <div id='tooltiptarget2'>Nilai Rata-rata</div>
                    </text>);
                })
                .FilterRow(f => f.Visible(true))
                .ShowBorders(false)
                .Selection(c => c.Mode(SelectionMode.Single))
                .Paging(p =>
                {
                    p.PageSize(20);
                    p.Enabled(true);
                })
                .Pager(p =>
                {
                    p.ShowInfo(true);
                }))
            @(Html.DevExtreme().Tooltip()
                            .Target("#tooltiptarget1")
                            .ShowEvent("mouseenter")
                            .HideEvent("mouseleave")
                            .ContentTemplate(ttNilai1)
                            )
            @(Html.DevExtreme().Tooltip()
                            .Target("#tooltiptarget2")
                            .ShowEvent("mouseenter")
                            .HideEvent("mouseleave")
                            .ContentTemplate(ttNilaiRata2)
                            )
        </div>
    </div>
}

<script type="text/javascript">
    function onVisualisasiChanged(e) {
        var chart = $('#chart1').dxChart('instance');
        var series = chart.option('series');
        //series[0].type = e.value;
        if (e.value == "Line") {
            series[0].type = "Scatter"
            series[1].type = "Line";
            series[1].point.visible = false;
        } else if (e.value == "Bar") {
            series[0].type = "Bar";
            series[1].type = "Line";
            series[1].point.visible = false;
        } else {
            series[0].type = "Scatter";
            series[1].type = "Scatter";
            series[1].point.visible = true;
        }
        chart.option('series', series);
    }

    function onPointClicked(e) {
        window.open("@Url.Action("Record", "RentangWaktuPermintaan")/" + e.target.data.rowid.toString());
    }

    function PrintPage() {
        window.print();
    }

    function Inquiry(e) {
        var keys = $("#grid1").dxDataGrid("getSelectedRowKeys");
        if (keys.length >= 1) {
            window.open("@Url.Action("Record", "RentangWaktuPermintaan")/" + keys[0].toString());
        } else {
            swal({ type: 'error', title: 'Oops...', text: 'Silahkan Pilih Baris Telebih Dahulu' });
        }
    }

    function ExportToExcel() {
        $.ajax({
            type: "POST",
            url: "@Url.Action("LogExportDetail", "RentangWaktuPermintaan")",
            success: function (response) {
                if (response.result == "Success") {
                    var grid = $("#grid1").dxDataGrid("instance");
                    grid.option("onExporting", function (e) {
                        e.fileName = "Detail_RentangWaktuPermintaan_" + new Date().toISOString().slice(0, 10);
                    });
                    grid.exportToExcel();
                }
            }
        });
    }

    function ExportToTxt() {
        $.ajax({
            type: "POST",
            url: "@Url.Action("LogExportDetail", "RentangWaktuPermintaan")",
            success: function (response) {
                if (response.result == "Success") {
                    var grid = $("#grid1").dxDataGrid("instance");
                    var fileName = "Detail_RentangWaktuPermintaan_" + new Date().toISOString().slice(0, 10) + ".txt";

                    var workbook = new ExcelJS.Workbook();
                    var worksheet = workbook.addWorksheet('Main sheet');

                    DevExpress.excelExporter.exportDataGrid({
                        component: grid,
                        worksheet: worksheet,
                    }).then(function () {
                        workbook.csv.writeBuffer({ delimiter: "|" }).then(function (buffer) {
                            saveAs(new Blob([buffer], { type: "application/octet-stream" }), fileName);
                        });
                    });
                    grid.cancel = true;
                }
            }
        });
    }
</script>

<style type="text/css">
    .mandatory {
        color: red;
    }
</style>
