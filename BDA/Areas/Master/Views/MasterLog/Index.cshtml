@{
    Layout = "~/Views/Shared/_LayoutMainMetronic.cshtml";
}

@*<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.3.1/jspdf.umd.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.14/jspdf.plugin.autotable.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/exceljs/3.3.1/exceljs.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/FileSaver.js/1.3.8/FileSaver.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/babel-polyfill/7.4.0/polyfill.min.js"></script>*@

<script>
    window.jsPDF = window.jspdf.jsPDF;
    applyPlugin(window.jsPDF);
</script>

<script type="text/javascript">

    $(function () {
        
    });

    function syncTreeViewSelection(treeView, value) {
        if (!value) {
            treeView.unselectAll();
        } else {
            treeView.selectItem(value);
        }
    }

    function treeBox_valueChanged(e) {
        var $treeView = e.component.content().find(".dx-treeview");
        if ($treeView.length) {
            syncTreeViewSelection($treeView.dxTreeView("instance"), e.value);
        }
    }

    function Upload() {
        var popupUpload = $("#uploadPopup").dxPopup({
            width: 500,
            height: 300,
            title: "Upload File",
            visible: false, 
            deferRendering: false,
            dragEnabled: true,
            closeOnOutsideClick: true,
            contentTemplate: function (contentElement) {
                const uploader = $("<div>").appendTo(contentElement);
                uploader.dxFileUploader({
                    name: "file",
                    multiple: false,
                    accept: ".xlsx, .xls",
                    uploadMode: "useButtons",
                    uploadUrl: "@Url.Action("UploadTemplate", "MasterLog")",
                    onValueChanged: function (e) {
                        console.log("Files selected: ", e.value);
                    },
                    onUploaded: function (e) {
                        alert("File uploaded and processed successfully!");
                        location.href = '@Url.Action("Index", "MasterLog")'
                    },
                    onUploadError: function (e) {
                        alert("Error uploading file: " + e.error);
                    }
                }).dxFileUploader("instance");

                uploader.show();
            }
        }).dxPopup("instance");


        popupUpload.show();
    }

    function GetTemplate() {
        $.ajax({
            url: "@Url.Action("GetTemplate", "MasterLog")",
            type: 'GET',
            xhrFields: {
                responseType: 'blob'
            },
            success: function (data, status, xhr) {
                var a = document.createElement('a');

                var contentDisposition = xhr.getResponseHeader('Content-Disposition');
                var filename = "default.xlsx"; 

                if (contentDisposition) {
                    var filenameMatch = contentDisposition.match(/filename="([^"]+)"/);
                    var filenameEncodedMatch = contentDisposition.match(/filename\*=UTF-8''([^"]+)/);

                    console.log(filenameMatch);

                    console.log(filenameEncodedMatch);

                    if (filenameMatch) {
                        filename = filenameMatch[1]; 
                    } else if (filenameEncodedMatch) {
                        filename = decodeURIComponent(filenameEncodedMatch[1]);
                    }

                }

                var blob = data;
                var url = window.URL.createObjectURL(blob);

                a.href = url;
                a.download = filename;
                document.body.appendChild(a);
                a.click();

                window.URL.revokeObjectURL(url);
                document.body.removeChild(a);
            },
            error: function (xhr, status, error) {
                alert(error);
            }
        });

    }
    
    function redirDetail(e) {
        var kode = e.row.data.log_kode;

        $.ajax({
            type: "POST",
            url: "@Url.Action("GetGridDataDetails", "MasterLog")",
            data: {paramID: kode},
            dataType: "json",
            type: "POST",
        }).done(function (resp) {
            $("#popup").dxPopup({
                visible: true,
                title: "Detil",
                showCloseButton: true,
                height: 400,
                contentTemplate: function (contentElement) {
                    const detailGrid = $("<div>").appendTo(contentElement);
                    detailGrid.dxDataGrid({
                        dataSource: resp.data,
                        columns: [
                            { dataField: "log_kode", caption: "Kode Job" },
                            { dataField: "log_seq", caption: "Urutan Proses" },
                            { dataField: "log_job", caption: "Nama Job" },
                            { dataField: "log_table_src", caption: "Nama Tabel Sumber" },
                            { dataField: "log_table_dst", caption: "Nama Tabel Target" },
                            { dataField: "log_script", caption: "Lokasi Script" },
                        ],
                        showBorders: true
                    });
                }
            });
        });
    }

</script>


<div class="card card-default">
    <div class="row filter-panel" style="padding-top:0px;">
        <div class="card-body">
            
            <div class="float-right">
                @if (ViewBag.Export)
                {
                    <a class="btn btn-light-primary font-weight-bolder btn-sm mr-2" href="javascript:GetTemplate();"><span class="image fa fa-download"></span> Download Template</a>
                    <a class="btn btn-light-primary font-weight-bolder btn-sm mr-2" href="javascript:Upload();"><span class="image fa fa-upload"></span> Upload</a>
                }
            </div>
        </div>
    </div>

    <div class="gridview-div">

        @Html.AntiForgeryToken()

        @(Html.DevExtreme().DataGrid()
            .ID("grid1")
            .DataSource(d => d.Mvc()
            .Controller("MasterLog")
            .LoadAction("GetGridData")
            .Key("log_kode")
            )
            .RemoteOperations(true)
            .Export(e => e.AllowExportSelectedData(true).Texts(q => q.ExportTo("Ekspor")))
            .Width("100%")
            .Columns(columns =>
            {
                columns.Add().DataField("log_no").Caption("No").Width("10%");
                columns.Add().DataField("log_kode").Caption("Kode Job").Width("20%");
                columns.Add().DataField("log_nama").Caption("Nama Sequence").Width("20%");
                columns.Add().DataField("log_waktu").Caption("Waktu Scheduler").Width("10%");
                columns.Add().Type(GridCommandColumnType.Buttons).Caption("Aksi").Buttons(b =>
                            {
                                b.Add().Hint("Detail")
                                    .Icon("activefolder")
                                    .OnClick("redirDetail");
                            });
            })
            .FilterRow(f => f.Visible(true))
            //.AllowColumnResizing(true)
            .WordWrapEnabled(true)
            .ShowBorders(false)
            //.Selection(c => c.Mode(SelectionMode.Multiple))
            .RowAlternationEnabled(false)
            .Paging(p =>
            {
                p.PageSize(20);
                p.Enabled(true);
            }
            )
            .Pager(p =>
            {
                p.ShowInfo(true);
            }
            )
            )

    </div>
    <div id="popup"></div>
    <div id="uploadPopup"></div>
</div>

<style type="text/css">
    .mandatory {
        background-color: red !important;
    }

    .dx-datagrid-headers {
        background-color: #a01905;
        color: #ffffff;
    }
</style>


