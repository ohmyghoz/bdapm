@{
    Layout = "~/Views/Shared/_LayoutMainMetronic.cshtml";
}

@*<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.3.1/jspdf.umd.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.14/jspdf.plugin.autotable.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/exceljs/3.3.1/exceljs.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/FileSaver.js/1.3.8/FileSaver.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/babel-polyfill/7.4.0/polyfill.min.js"></script>*@

<script>
    window.jsPDF = window.jspdf.jsPDF;
    applyPlugin(window.jsPDF);
</script>

<script type="text/javascript">

    function syncTreeViewSelection(treeView, value) {
        if (!value) {
            treeView.unselectAll();
        } else {
            treeView.selectItem(value);
        }
    }

    function treeBox_valueChanged(e) {
        var $treeView = e.component.content().find(".dx-treeview");
        if ($treeView.length) {
            syncTreeViewSelection($treeView.dxTreeView("instance"), e.value);
        }
    }

    function exportToPDF() {
        $.ajax({
            type: "POST",
            url: "@Url.Action("LogExport", "MasterLog")",
            success: function (response) {
                if (response.result == "Success") {
                    const doc = new jsPDF({
                        orientation: "landscape",
                        unit: "cm",
                        format: [21, 60]
                    });
                    var dataGrid = $("#grid1").dxDataGrid("instance");
                    var fileName = "Master_Log_" + new Date().toISOString().slice(0, 10) + ".pdf";
                    doc.setFontSize("6")
                    //var keys = $("#grid1").dxDataGrid("getSelectedRowsData")
                    //console.log(keys)
                    DevExpress.pdfExporter.exportDataGrid({
                        jsPDFDocument: doc,
                        component: dataGrid,
                        keepColumnWidths: true
                        //selectedRowsOnly: true
                    }).then(function () {
                        doc.save(fileName);
                    });
                }
            }
        });
    }

    function exportToEx() {
        $.ajax({
            type: "POST",
            url: "@Url.Action("LogExport", "MasterLog")",
            success: function (response) {
                if (response.result == "Success") {
                    var dataGrid = $("#grid1").dxDataGrid("instance");
                    var fileName = "Master_Log_" + new Date().toISOString().slice(0, 10) + ".xlsx";

                    var workbook = new ExcelJS.Workbook();
                    var worksheet = workbook.addWorksheet('Main Sheet');

                    DevExpress.excelExporter.exportDataGrid({
                        component: dataGrid,
                        worksheet: worksheet,
                        autoFilterEnabled: true
                        //selectedRowsOnly: true
                    }).then(function () {
                        workbook.xlsx.writeBuffer().then(function (buffer) {
                            saveAs(new Blob([buffer], { type: 'application/octet-stream' }), fileName);
                        });
                    });
                    dataGrid.cancel = true;
                }
            }
        });

    }
    
    function redirDetail() {}

    function redirDelete() {}

    function gridOnBeforeSend(method, ajaxOptions) {
        var tempstartDate = $("#startDate").dxDateBox("instance").option('value');
        var tempendDate = $("#endDate").dxDateBox("instance").option('value');
        var menu = $("#menu").dxDropDownBox("instance").option('text');
        var startDate = null;
        var endDate = null;

        if (tempstartDate > tempendDate) {
            swal({ type: 'error', title: 'Validasi', text: 'Periksa Kembali Tanggal Inputan' });
        }

        if (tempstartDate != null) {
            startDate = tempstartDate.getFullYear() + '-' + (tempstartDate.getMonth() + 1) + '-' + tempstartDate.getDate();
        }
        if (tempendDate != null) {
            endDate = tempendDate.getFullYear() + '-' + (tempendDate.getMonth() + 1) + '-' + tempendDate.getDate();
        }

        ajaxOptions.data.paramMenu = menu?.toString();
        ajaxOptions.data.paramStartDate = startDate;
        ajaxOptions.data.paramEndDate = endDate;

    }
</script>


<div class="card card-default">
    <div class="row filter-panel" style="padding-top:0px;">
        <div class="card-body">
            
            <div class="float-right">
                @if (ViewBag.Export)
                {
                    <a class="btn btn-light-primary font-weight-bolder btn-sm mr-2" href="javascript:exportToPDF();"><span class="image fa fa-download"></span> Download Template</a>
                    <a class="btn btn-light-primary font-weight-bolder btn-sm mr-2" href="javascript:exportToEx();"><span class="image fa fa-upload"></span> Upload</a>
                }
            </div>
        </div>
    </div>

    <div class="gridview-div">

        @Html.AntiForgeryToken()

        @(Html.DevExtreme().DataGrid()
            .ID("grid1")
            .DataSource(@* d => d.Mvc()
            .Controller("MasterLog")
            .LoadAction("GetGridData")
            .OnBeforeSend("gridOnBeforeSend")
            .Key("AuditId") *@
            new [] {
                    new { log_no = 1, log_kode = "PS01", log_nama = "Summary Cluster MKBD", log_waktu = "02:00" },
                    new { log_no = 2, log_kode = "PS02", log_nama = "Basis Investor", log_waktu = "04:00" }
                }
            )
            .RemoteOperations(true)
            .Export(e => e.AllowExportSelectedData(true).Texts(q => q.ExportTo("Ekspor")))
            .Width("100%")
            .Columns(columns =>
            {
                columns.Add().DataField("log_no").Caption("No").Width("10%");
                columns.Add().DataField("log_kode").Caption("Kode Job").Width("20%");
                columns.Add().DataField("log_nama").Caption("Nama Sequence").Width("20%");
                columns.Add().DataField("log_waktu").Caption("Waktu Scheduler").Width("10%");
                columns.Add().Type(GridCommandColumnType.Buttons).Caption("Aksi").Buttons(b =>
                            {
                                b.Add().Hint("Detail")
                                    .Icon("activefolder")
                                    .OnClick("redirDetail");

                                b.Add().Hint("Delete")
                                    .Icon("trash")
                                    .OnClick("redirDelete");
                            });
                columns.Add().DataField("log_id").Visible(false);
            })
            .FilterRow(f => f.Visible(true))
            //.AllowColumnResizing(true)
            .WordWrapEnabled(true)
            .ShowBorders(false)
            //.Selection(c => c.Mode(SelectionMode.Multiple))
            .RowAlternationEnabled(false)
            .Paging(p =>
            {
                p.PageSize(20);
                p.Enabled(true);
            }
            )
            .Pager(p =>
            {
                p.ShowInfo(true);
            }
            )
            )

    </div>
</div>


